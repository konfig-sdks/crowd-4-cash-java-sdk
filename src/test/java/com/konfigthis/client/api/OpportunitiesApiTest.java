/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.LoanRating;
import com.konfigthis.client.model.Opportunity;
import com.konfigthis.client.model.YN;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OpportunitiesApi
 */
@Disabled
public class OpportunitiesApiTest {

    private static OpportunitiesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new OpportunitiesApi(apiClient);
    }

    /**
     * Get available investment opportunities
     *
     * __Note__: C4C offers a private, secure and uncomplicated way for the investors to discover, analyze, review and invest.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableInvestmentsTest() throws ApiException {
        LoanRating rating = null;
        Double loanAmount = null;
        String loanType = null;
        Double availableAmount = null;
        Double interestRate = null;
        Integer duration = null;
        YN insurance = null;
        YN collateral = null;
        Integer borrowerAge = null;
        String borrowerNationality = null;
        Opportunity response = api.getAvailableInvestments()
                .rating(rating)
                .loanAmount(loanAmount)
                .loanType(loanType)
                .availableAmount(availableAmount)
                .interestRate(interestRate)
                .duration(duration)
                .insurance(insurance)
                .collateral(collateral)
                .borrowerAge(borrowerAge)
                .borrowerNationality(borrowerNationality)
                .execute();
        // TODO: test validations
    }

}
