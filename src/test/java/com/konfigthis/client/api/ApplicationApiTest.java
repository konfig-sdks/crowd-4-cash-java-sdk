/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ApplicationResult;
import com.konfigthis.client.model.IntermediaryLoanApplication;
import com.konfigthis.client.model.IntermediaryLoanHandoverDate;
import com.konfigthis.client.model.RentalApplicationResult;
import com.konfigthis.client.model.RentalLoanApplication;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationApi
 */
@Disabled
public class ApplicationApiTest {

    private static ApplicationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ApplicationApi(apiClient);
    }

    /**
     * Set the definitive Handover Date (a date when the item is handed over to the customer)
     *
     * **Note**: It&#39;s valid only for loans made indirectly through the intermediary.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefinitiveHandoverDateTest() throws ApiException {
        Integer loanId = null;
        String handoverDate = null;
        ApplicationResult response = api.setDefinitiveHandoverDate()
                .loanId(loanId)
                .handoverDate(handoverDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Apply for a regular loan - 100% online application
     *
     * **Note**: Approval and funding times vary, but typically it takes only 24 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitLoanApplicationTest() throws ApiException {
        ApplicationResult response = api.submitLoanApplication()
                .execute();
        // TODO: test validations
    }

    /**
     * Apply for a loan on behalf of your partners e.g. garages/shops/stores
     *
     * **Note**: Each successful application creates a binding obligation on you. Once you apply you may not retract the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitPartnerLoanApplicationTest() throws ApiException {
        String serialNumber = null;
        String identificationNumber = null;
        Integer partnerId = null;
        String purchaseItem = null;
        String itemStatus = null;
        String itemName = null;
        String itemType = null;
        String itemBrand = null;
        String itemModel = null;
        String itemColor = null;
        Double itemMarketValue = null;
        String manufactureDate = null;
        String firstRegistration = null;
        String mileage = null;
        String itemCertificate = null;
        Double rentalAmount = null;
        String handoverDate = null;
        ApplicationResult response = api.submitPartnerLoanApplication(serialNumber, identificationNumber)
                .partnerId(partnerId)
                .purchaseItem(purchaseItem)
                .itemStatus(itemStatus)
                .itemName(itemName)
                .itemType(itemType)
                .itemBrand(itemBrand)
                .itemModel(itemModel)
                .itemColor(itemColor)
                .itemMarketValue(itemMarketValue)
                .manufactureDate(manufactureDate)
                .firstRegistration(firstRegistration)
                .mileage(mileage)
                .itemCertificate(itemCertificate)
                .rentalAmount(rentalAmount)
                .handoverDate(handoverDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Apply for a rental loan
     *
     * **Note**: Each successful application creates a binding obligation on you. Once you apply you may not retract the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitRentalLoanApplicationTest() throws ApiException {
        String renteeGender = null;
        String renteeFirstName = null;
        String renteeLastName = null;
        String renteeEmail = null;
        String renteeMobilePhoneNumber = null;
        String purchaseItem = null;
        String itemName = null;
        Double itemMarketValue = null;
        Double rentalAmount = null;
        String idFrontPhoto = null;
        String idFrontExtension = null;
        String idBackPhoto = null;
        String idBackExtension = null;
        String selfiePhoto = null;
        String selfieExtension = null;
        String contractFile = null;
        String contractFileExtension = null;
        String apiRequester = null;
        String renteeBirthdate = null;
        String renteeStreetAddress = null;
        String renteeHouseNumber = null;
        String renteeZipCode = null;
        String renteeCity = null;
        String itemStatus = null;
        String itemType = null;
        String itemBrand = null;
        String itemModel = null;
        String itemColor = null;
        String serialNumber = null;
        String identificationNumber = null;
        String rentDate = null;
        RentalApplicationResult response = api.submitRentalLoanApplication(renteeGender, renteeFirstName, renteeLastName, renteeEmail, renteeMobilePhoneNumber, purchaseItem, itemName, itemMarketValue, rentalAmount, idFrontPhoto, idFrontExtension, idBackPhoto, idBackExtension, selfiePhoto, selfieExtension, contractFile, contractFileExtension)
                .apiRequester(apiRequester)
                .renteeBirthdate(renteeBirthdate)
                .renteeStreetAddress(renteeStreetAddress)
                .renteeHouseNumber(renteeHouseNumber)
                .renteeZipCode(renteeZipCode)
                .renteeCity(renteeCity)
                .itemStatus(itemStatus)
                .itemType(itemType)
                .itemBrand(itemBrand)
                .itemModel(itemModel)
                .itemColor(itemColor)
                .serialNumber(serialNumber)
                .identificationNumber(identificationNumber)
                .rentDate(rentDate)
                .execute();
        // TODO: test validations
    }

}
