/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Contract;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContractsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContractsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContractsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contracts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCall(_callback);

    }


    private ApiResponse<Contract> getAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(final ApiCallback<Contract> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {

        private GetAllRequestBuilder() {
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreements List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(_callback);
        }


        /**
         * Execute getAll request
         * @return Contract
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreements List </td><td>  -  </td></tr>
         </table>
         */
        public Contract execute() throws ApiException {
            ApiResponse<Contract> localVarResp = getAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;Contract&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreements List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contract> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo();
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreements List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contract> _callback) throws ApiException {
            return getAllAsync(_callback);
        }
    }

    /**
     * Get all your contracts
     * 
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Loan Agreements List </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getLoanContractCall(Integer loanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contracts/RentalLoan/{loanId}"
            .replace("{" + "loanId" + "}", localVarApiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoanContractValidateBeforeCall(Integer loanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling getLoanContract(Async)");
        }

        return getLoanContractCall(loanId, _callback);

    }


    private ApiResponse<Contract> getLoanContractWithHttpInfo(Integer loanId) throws ApiException {
        okhttp3.Call localVarCall = getLoanContractValidateBeforeCall(loanId, null);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLoanContractAsync(Integer loanId, final ApiCallback<Contract> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoanContractValidateBeforeCall(loanId, _callback);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLoanContractRequestBuilder {
        private final Integer loanId;

        private GetLoanContractRequestBuilder(Integer loanId) {
            this.loanId = loanId;
        }

        /**
         * Build call for getLoanContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLoanContractCall(loanId, _callback);
        }


        /**
         * Execute getLoanContract request
         * @return Contract
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public Contract execute() throws ApiException {
            ApiResponse<Contract> localVarResp = getLoanContractWithHttpInfo(loanId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLoanContract request with HTTP info returned
         * @return ApiResponse&lt;Contract&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contract> executeWithHttpInfo() throws ApiException {
            return getLoanContractWithHttpInfo(loanId);
        }

        /**
         * Execute getLoanContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contract> _callback) throws ApiException {
            return getLoanContractAsync(loanId, _callback);
        }
    }

    /**
     * Get specific rental loan contract
     * 
     * @param loanId  (required)
     * @return GetLoanContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
     </table>
     */
    public GetLoanContractRequestBuilder getLoanContract(Integer loanId) throws IllegalArgumentException {
        if (loanId == null) throw new IllegalArgumentException("\"loanId\" is required but got null");
        return new GetLoanContractRequestBuilder(loanId);
    }
    private okhttp3.Call getSpecificCall(Integer loanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contracts/{loanId}"
            .replace("{" + "loanId" + "}", localVarApiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificValidateBeforeCall(Integer loanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling getSpecific(Async)");
        }

        return getSpecificCall(loanId, _callback);

    }


    private ApiResponse<Contract> getSpecificWithHttpInfo(Integer loanId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(loanId, null);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificAsync(Integer loanId, final ApiCallback<Contract> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificValidateBeforeCall(loanId, _callback);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificRequestBuilder {
        private final Integer loanId;

        private GetSpecificRequestBuilder(Integer loanId) {
            this.loanId = loanId;
        }

        /**
         * Build call for getSpecific
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificCall(loanId, _callback);
        }


        /**
         * Execute getSpecific request
         * @return Contract
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public Contract execute() throws ApiException {
            ApiResponse<Contract> localVarResp = getSpecificWithHttpInfo(loanId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecific request with HTTP info returned
         * @return ApiResponse&lt;Contract&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contract> executeWithHttpInfo() throws ApiException {
            return getSpecificWithHttpInfo(loanId);
        }

        /**
         * Execute getSpecific request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contract> _callback) throws ApiException {
            return getSpecificAsync(loanId, _callback);
        }
    }

    /**
     * Get specific contract
     * 
     * @param loanId  (required)
     * @return GetSpecificRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificRequestBuilder getSpecific(Integer loanId) throws IllegalArgumentException {
        if (loanId == null) throw new IllegalArgumentException("\"loanId\" is required but got null");
        return new GetSpecificRequestBuilder(loanId);
    }
    private okhttp3.Call getSpecificIntermediaryLoanContractCall(Integer partnerId, Integer loanId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Contracts/{partnerId}/{loanId}"
            .replace("{" + "partnerId" + "}", localVarApiClient.escapeString(partnerId.toString()))
            .replace("{" + "loanId" + "}", localVarApiClient.escapeString(loanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificIntermediaryLoanContractValidateBeforeCall(Integer partnerId, Integer loanId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partnerId' is set
        if (partnerId == null) {
            throw new ApiException("Missing the required parameter 'partnerId' when calling getSpecificIntermediaryLoanContract(Async)");
        }

        // verify the required parameter 'loanId' is set
        if (loanId == null) {
            throw new ApiException("Missing the required parameter 'loanId' when calling getSpecificIntermediaryLoanContract(Async)");
        }

        return getSpecificIntermediaryLoanContractCall(partnerId, loanId, _callback);

    }


    private ApiResponse<Contract> getSpecificIntermediaryLoanContractWithHttpInfo(Integer partnerId, Integer loanId) throws ApiException {
        okhttp3.Call localVarCall = getSpecificIntermediaryLoanContractValidateBeforeCall(partnerId, loanId, null);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificIntermediaryLoanContractAsync(Integer partnerId, Integer loanId, final ApiCallback<Contract> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificIntermediaryLoanContractValidateBeforeCall(partnerId, loanId, _callback);
        Type localVarReturnType = new TypeToken<Contract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificIntermediaryLoanContractRequestBuilder {
        private final Integer partnerId;
        private final Integer loanId;

        private GetSpecificIntermediaryLoanContractRequestBuilder(Integer partnerId, Integer loanId) {
            this.partnerId = partnerId;
            this.loanId = loanId;
        }

        /**
         * Build call for getSpecificIntermediaryLoanContract
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificIntermediaryLoanContractCall(partnerId, loanId, _callback);
        }


        /**
         * Execute getSpecificIntermediaryLoanContract request
         * @return Contract
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public Contract execute() throws ApiException {
            ApiResponse<Contract> localVarResp = getSpecificIntermediaryLoanContractWithHttpInfo(partnerId, loanId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificIntermediaryLoanContract request with HTTP info returned
         * @return ApiResponse&lt;Contract&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contract> executeWithHttpInfo() throws ApiException {
            return getSpecificIntermediaryLoanContractWithHttpInfo(partnerId, loanId);
        }

        /**
         * Execute getSpecificIntermediaryLoanContract request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contract> _callback) throws ApiException {
            return getSpecificIntermediaryLoanContractAsync(partnerId, loanId, _callback);
        }
    }

    /**
     * Get specific intermediary loan contract
     * 
     * @param partnerId  (required)
     * @param loanId  (required)
     * @return GetSpecificIntermediaryLoanContractRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Loan Agreement </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificIntermediaryLoanContractRequestBuilder getSpecificIntermediaryLoanContract(Integer partnerId, Integer loanId) throws IllegalArgumentException {
        if (partnerId == null) throw new IllegalArgumentException("\"partnerId\" is required but got null");
        if (loanId == null) throw new IllegalArgumentException("\"loanId\" is required but got null");
        return new GetSpecificIntermediaryLoanContractRequestBuilder(partnerId, loanId);
    }
}
