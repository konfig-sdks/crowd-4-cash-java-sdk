/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PagedList;
import com.konfigthis.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LoansApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LoansApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LoansApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getLoanDataCall(Integer pageNumber, Integer pageSize, Status loanstatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Loans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageSize", pageSize));
        }

        if (loanstatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanstatus", loanstatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLoanDataValidateBeforeCall(Integer pageNumber, Integer pageSize, Status loanstatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getLoanData(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getLoanData(Async)");
        }

        // verify the required parameter 'loanstatus' is set
        if (loanstatus == null) {
            throw new ApiException("Missing the required parameter 'loanstatus' when calling getLoanData(Async)");
        }

        return getLoanDataCall(pageNumber, pageSize, loanstatus, _callback);

    }


    private ApiResponse<PagedList> getLoanDataWithHttpInfo(Integer pageNumber, Integer pageSize, Status loanstatus) throws ApiException {
        okhttp3.Call localVarCall = getLoanDataValidateBeforeCall(pageNumber, pageSize, loanstatus, null);
        Type localVarReturnType = new TypeToken<PagedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLoanDataAsync(Integer pageNumber, Integer pageSize, Status loanstatus, final ApiCallback<PagedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLoanDataValidateBeforeCall(pageNumber, pageSize, loanstatus, _callback);
        Type localVarReturnType = new TypeToken<PagedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLoanDataRequestBuilder {
        private final Integer pageNumber;
        private final Integer pageSize;
        private final Status loanstatus;

        private GetLoanDataRequestBuilder(Integer pageNumber, Integer pageSize, Status loanstatus) {
            this.pageNumber = pageNumber;
            this.pageSize = pageSize;
            this.loanstatus = loanstatus;
        }

        /**
         * Build call for getLoanData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Data Dataset </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLoanDataCall(pageNumber, pageSize, loanstatus, _callback);
        }


        /**
         * Execute getLoanData request
         * @return PagedList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Data Dataset </td><td>  -  </td></tr>
         </table>
         */
        public PagedList execute() throws ApiException {
            ApiResponse<PagedList> localVarResp = getLoanDataWithHttpInfo(pageNumber, pageSize, loanstatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLoanData request with HTTP info returned
         * @return ApiResponse&lt;PagedList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Data Dataset </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedList> executeWithHttpInfo() throws ApiException {
            return getLoanDataWithHttpInfo(pageNumber, pageSize, loanstatus);
        }

        /**
         * Execute getLoanData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Loan Data Dataset </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedList> _callback) throws ApiException {
            return getLoanDataAsync(pageNumber, pageSize, loanstatus, _callback);
        }
    }

    /**
     * Get a complete C4C loan data dataset for your credit analyses
     * **Note**: In order to consume this endpoint we need to grant a special access to your account. Please [contact us](https://crowd4cash.ch/contact) for further information.
     * @param pageNumber Page number you want to access (required)
     * @param pageSize Number of items per page. Max is 20 (required)
     * @param loanstatus Status values that need to be considered for filter (required)
     * @return GetLoanDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Loan Data Dataset </td><td>  -  </td></tr>
     </table>
     */
    public GetLoanDataRequestBuilder getLoanData(Integer pageNumber, Integer pageSize, Status loanstatus) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        if (pageSize == null) throw new IllegalArgumentException("\"pageSize\" is required but got null");
        if (loanstatus == null) throw new IllegalArgumentException("\"loanstatus\" is required but got null");
        return new GetLoanDataRequestBuilder(pageNumber, pageSize, loanstatus);
    }
}
