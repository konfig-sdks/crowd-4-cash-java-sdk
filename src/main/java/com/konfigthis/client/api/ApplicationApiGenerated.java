/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicationResult;
import com.konfigthis.client.model.IntermediaryLoanApplication;
import com.konfigthis.client.model.IntermediaryLoanHandoverDate;
import com.konfigthis.client.model.RentalApplicationResult;
import com.konfigthis.client.model.RentalLoanApplication;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call setDefinitiveHandoverDateCall(IntermediaryLoanHandoverDate intermediaryLoanHandoverDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = intermediaryLoanHandoverDate;

        // create path and map variables
        String localVarPath = "/IntermediaryLoan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefinitiveHandoverDateValidateBeforeCall(IntermediaryLoanHandoverDate intermediaryLoanHandoverDate, final ApiCallback _callback) throws ApiException {
        return setDefinitiveHandoverDateCall(intermediaryLoanHandoverDate, _callback);

    }


    private ApiResponse<ApplicationResult> setDefinitiveHandoverDateWithHttpInfo(IntermediaryLoanHandoverDate intermediaryLoanHandoverDate) throws ApiException {
        okhttp3.Call localVarCall = setDefinitiveHandoverDateValidateBeforeCall(intermediaryLoanHandoverDate, null);
        Type localVarReturnType = new TypeToken<ApplicationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefinitiveHandoverDateAsync(IntermediaryLoanHandoverDate intermediaryLoanHandoverDate, final ApiCallback<ApplicationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefinitiveHandoverDateValidateBeforeCall(intermediaryLoanHandoverDate, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefinitiveHandoverDateRequestBuilder {
        private Integer loanId;
        private String handoverDate;

        private SetDefinitiveHandoverDateRequestBuilder() {
        }

        /**
         * Set loanId
         * @param loanId Loan ID (optional)
         * @return SetDefinitiveHandoverDateRequestBuilder
         */
        public SetDefinitiveHandoverDateRequestBuilder loanId(Integer loanId) {
            this.loanId = loanId;
            return this;
        }
        
        /**
         * Set handoverDate
         * @param handoverDate The date when the car is handed over to the subscriber (optional)
         * @return SetDefinitiveHandoverDateRequestBuilder
         */
        public SetDefinitiveHandoverDateRequestBuilder handoverDate(String handoverDate) {
            this.handoverDate = handoverDate;
            return this;
        }
        
        /**
         * Build call for setDefinitiveHandoverDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IntermediaryLoanHandoverDate intermediaryLoanHandoverDate = buildBodyParams();
            return setDefinitiveHandoverDateCall(intermediaryLoanHandoverDate, _callback);
        }

        private IntermediaryLoanHandoverDate buildBodyParams() {
            IntermediaryLoanHandoverDate intermediaryLoanHandoverDate = new IntermediaryLoanHandoverDate();
            intermediaryLoanHandoverDate.loanId(this.loanId);
            intermediaryLoanHandoverDate.handoverDate(this.handoverDate);
            return intermediaryLoanHandoverDate;
        }

        /**
         * Execute setDefinitiveHandoverDate request
         * @return ApplicationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationResult execute() throws ApiException {
            IntermediaryLoanHandoverDate intermediaryLoanHandoverDate = buildBodyParams();
            ApiResponse<ApplicationResult> localVarResp = setDefinitiveHandoverDateWithHttpInfo(intermediaryLoanHandoverDate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefinitiveHandoverDate request with HTTP info returned
         * @return ApiResponse&lt;ApplicationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationResult> executeWithHttpInfo() throws ApiException {
            IntermediaryLoanHandoverDate intermediaryLoanHandoverDate = buildBodyParams();
            return setDefinitiveHandoverDateWithHttpInfo(intermediaryLoanHandoverDate);
        }

        /**
         * Execute setDefinitiveHandoverDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationResult> _callback) throws ApiException {
            IntermediaryLoanHandoverDate intermediaryLoanHandoverDate = buildBodyParams();
            return setDefinitiveHandoverDateAsync(intermediaryLoanHandoverDate, _callback);
        }
    }

    /**
     * Set the definitive Handover Date (a date when the item is handed over to the customer)
     * **Note**: It&#39;s valid only for loans made indirectly through the intermediary.
     * @return SetDefinitiveHandoverDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SetDefinitiveHandoverDateRequestBuilder setDefinitiveHandoverDate() throws IllegalArgumentException {
        return new SetDefinitiveHandoverDateRequestBuilder();
    }
    private okhttp3.Call submitLoanApplicationCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/Loan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitLoanApplicationValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return submitLoanApplicationCall(body, _callback);

    }


    private ApiResponse<ApplicationResult> submitLoanApplicationWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = submitLoanApplicationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ApplicationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitLoanApplicationAsync(Object body, final ApiCallback<ApplicationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitLoanApplicationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitLoanApplicationRequestBuilder {

        private SubmitLoanApplicationRequestBuilder() {
        }

        /**
         * Build call for submitLoanApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return submitLoanApplicationCall(body, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute submitLoanApplication request
         * @return ApplicationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationResult execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<ApplicationResult> localVarResp = submitLoanApplicationWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitLoanApplication request with HTTP info returned
         * @return ApiResponse&lt;ApplicationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationResult> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return submitLoanApplicationWithHttpInfo(body);
        }

        /**
         * Execute submitLoanApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationResult> _callback) throws ApiException {
            Object body = buildBodyParams();
            return submitLoanApplicationAsync(body, _callback);
        }
    }

    /**
     * Apply for a regular loan - 100% online application
     * **Note**: Approval and funding times vary, but typically it takes only 24 hours.
     * @return SubmitLoanApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
     </table>
     */
    public SubmitLoanApplicationRequestBuilder submitLoanApplication() throws IllegalArgumentException {
        return new SubmitLoanApplicationRequestBuilder();
    }
    private okhttp3.Call submitPartnerLoanApplicationCall(IntermediaryLoanApplication intermediaryLoanApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = intermediaryLoanApplication;

        // create path and map variables
        String localVarPath = "/IntermediaryLoan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitPartnerLoanApplicationValidateBeforeCall(IntermediaryLoanApplication intermediaryLoanApplication, final ApiCallback _callback) throws ApiException {
        return submitPartnerLoanApplicationCall(intermediaryLoanApplication, _callback);

    }


    private ApiResponse<ApplicationResult> submitPartnerLoanApplicationWithHttpInfo(IntermediaryLoanApplication intermediaryLoanApplication) throws ApiException {
        okhttp3.Call localVarCall = submitPartnerLoanApplicationValidateBeforeCall(intermediaryLoanApplication, null);
        Type localVarReturnType = new TypeToken<ApplicationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitPartnerLoanApplicationAsync(IntermediaryLoanApplication intermediaryLoanApplication, final ApiCallback<ApplicationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitPartnerLoanApplicationValidateBeforeCall(intermediaryLoanApplication, _callback);
        Type localVarReturnType = new TypeToken<ApplicationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitPartnerLoanApplicationRequestBuilder {
        private final String serialNumber;
        private final String identificationNumber;
        private Integer partnerId;
        private String purchaseItem;
        private String itemStatus;
        private String itemName;
        private String itemType;
        private String itemBrand;
        private String itemModel;
        private String itemColor;
        private Double itemMarketValue;
        private String manufactureDate;
        private String firstRegistration;
        private String mileage;
        private String itemCertificate;
        private Double rentalAmount;
        private String handoverDate;

        private SubmitPartnerLoanApplicationRequestBuilder(String serialNumber, String identificationNumber) {
            this.serialNumber = serialNumber;
            this.identificationNumber = identificationNumber;
        }

        /**
         * Set partnerId
         * @param partnerId ID of the partner that is buying an item. This ID can be taken from the Report endpoint and Intermediary route. (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder partnerId(Integer partnerId) {
            this.partnerId = partnerId;
            return this;
        }
        
        /**
         * Set purchaseItem
         * @param purchaseItem Description of the item you buy e.g. Car (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder purchaseItem(String purchaseItem) {
            this.purchaseItem = purchaseItem;
            return this;
        }
        
        /**
         * Set itemStatus
         * @param itemStatus Status of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemStatus(String itemStatus) {
            this.itemStatus = itemStatus;
            return this;
        }
        
        /**
         * Set itemName
         * @param itemName Name of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemName(String itemName) {
            this.itemName = itemName;
            return this;
        }
        
        /**
         * Set itemType
         * @param itemType Type of the item e.g. SUV, Van, Saloon, Cabriolet etc. (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemType(String itemType) {
            this.itemType = itemType;
            return this;
        }
        
        /**
         * Set itemBrand
         * @param itemBrand Brand of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemBrand(String itemBrand) {
            this.itemBrand = itemBrand;
            return this;
        }
        
        /**
         * Set itemModel
         * @param itemModel Model of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemModel(String itemModel) {
            this.itemModel = itemModel;
            return this;
        }
        
        /**
         * Set itemColor
         * @param itemColor Color of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemColor(String itemColor) {
            this.itemColor = itemColor;
            return this;
        }
        
        /**
         * Set itemMarketValue
         * @param itemMarketValue Market value of the item you want to buy. Please notice that the Loan Amount will be 80% of this value. (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemMarketValue(Double itemMarketValue) {
            this.itemMarketValue = itemMarketValue;
            return this;
        }
        
        /**
         * Set manufactureDate
         * @param manufactureDate Date when the car was manufactured (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder manufactureDate(String manufactureDate) {
            this.manufactureDate = manufactureDate;
            return this;
        }
        
        /**
         * Set firstRegistration
         * @param firstRegistration Date when the item was registered very first time (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder firstRegistration(String firstRegistration) {
            this.firstRegistration = firstRegistration;
            return this;
        }
        
        /**
         * Set mileage
         * @param mileage Mileage of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder mileage(String mileage) {
            this.mileage = mileage;
            return this;
        }
        
        /**
         * Set itemCertificate
         * @param itemCertificate Certificate of the item (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder itemCertificate(String itemCertificate) {
            this.itemCertificate = itemCertificate;
            return this;
        }
        
        /**
         * Set rentalAmount
         * @param rentalAmount Rental amount per month (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder rentalAmount(Double rentalAmount) {
            this.rentalAmount = rentalAmount;
            return this;
        }
        
        /**
         * Set handoverDate
         * @param handoverDate The expected/approximate handover date (date when the car is expected to be handed over to the subscriber). Expected format: dd.MM.yyyy (optional)
         * @return SubmitPartnerLoanApplicationRequestBuilder
         */
        public SubmitPartnerLoanApplicationRequestBuilder handoverDate(String handoverDate) {
            this.handoverDate = handoverDate;
            return this;
        }
        
        /**
         * Build call for submitPartnerLoanApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            IntermediaryLoanApplication intermediaryLoanApplication = buildBodyParams();
            return submitPartnerLoanApplicationCall(intermediaryLoanApplication, _callback);
        }

        private IntermediaryLoanApplication buildBodyParams() {
            IntermediaryLoanApplication intermediaryLoanApplication = new IntermediaryLoanApplication();
            intermediaryLoanApplication.partnerId(this.partnerId);
            intermediaryLoanApplication.purchaseItem(this.purchaseItem);
            intermediaryLoanApplication.itemStatus(this.itemStatus);
            intermediaryLoanApplication.itemName(this.itemName);
            intermediaryLoanApplication.itemType(this.itemType);
            intermediaryLoanApplication.itemBrand(this.itemBrand);
            intermediaryLoanApplication.itemModel(this.itemModel);
            intermediaryLoanApplication.itemColor(this.itemColor);
            intermediaryLoanApplication.itemMarketValue(this.itemMarketValue);
            intermediaryLoanApplication.manufactureDate(this.manufactureDate);
            intermediaryLoanApplication.firstRegistration(this.firstRegistration);
            intermediaryLoanApplication.mileage(this.mileage);
            intermediaryLoanApplication.itemCertificate(this.itemCertificate);
            intermediaryLoanApplication.serialNumber(this.serialNumber);
            intermediaryLoanApplication.identificationNumber(this.identificationNumber);
            intermediaryLoanApplication.rentalAmount(this.rentalAmount);
            intermediaryLoanApplication.handoverDate(this.handoverDate);
            return intermediaryLoanApplication;
        }

        /**
         * Execute submitPartnerLoanApplication request
         * @return ApplicationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationResult execute() throws ApiException {
            IntermediaryLoanApplication intermediaryLoanApplication = buildBodyParams();
            ApiResponse<ApplicationResult> localVarResp = submitPartnerLoanApplicationWithHttpInfo(intermediaryLoanApplication);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitPartnerLoanApplication request with HTTP info returned
         * @return ApiResponse&lt;ApplicationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationResult> executeWithHttpInfo() throws ApiException {
            IntermediaryLoanApplication intermediaryLoanApplication = buildBodyParams();
            return submitPartnerLoanApplicationWithHttpInfo(intermediaryLoanApplication);
        }

        /**
         * Execute submitPartnerLoanApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationResult> _callback) throws ApiException {
            IntermediaryLoanApplication intermediaryLoanApplication = buildBodyParams();
            return submitPartnerLoanApplicationAsync(intermediaryLoanApplication, _callback);
        }
    }

    /**
     * Apply for a loan on behalf of your partners e.g. garages/shops/stores
     * **Note**: Each successful application creates a binding obligation on you. Once you apply you may not retract the application.
     * @return SubmitPartnerLoanApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
     </table>
     */
    public SubmitPartnerLoanApplicationRequestBuilder submitPartnerLoanApplication(String serialNumber, String identificationNumber) throws IllegalArgumentException {
        if (serialNumber == null) throw new IllegalArgumentException("\"serialNumber\" is required but got null");
            if (serialNumber != null && serialNumber.length() < 17) {
              throw new IllegalArgumentException("Invalid value for serialNumber. Length must be greater than or equal to 17.");
            }

        if (identificationNumber == null) throw new IllegalArgumentException("\"identificationNumber\" is required but got null");
            if (identificationNumber != null && identificationNumber.length() < 9) {
              throw new IllegalArgumentException("Invalid value for identificationNumber. Length must be greater than or equal to 9.");
            }

        return new SubmitPartnerLoanApplicationRequestBuilder(serialNumber, identificationNumber);
    }
    private okhttp3.Call submitRentalLoanApplicationCall(RentalLoanApplication rentalLoanApplication, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rentalLoanApplication;

        // create path and map variables
        String localVarPath = "/RentalLoan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitRentalLoanApplicationValidateBeforeCall(RentalLoanApplication rentalLoanApplication, final ApiCallback _callback) throws ApiException {
        return submitRentalLoanApplicationCall(rentalLoanApplication, _callback);

    }


    private ApiResponse<RentalApplicationResult> submitRentalLoanApplicationWithHttpInfo(RentalLoanApplication rentalLoanApplication) throws ApiException {
        okhttp3.Call localVarCall = submitRentalLoanApplicationValidateBeforeCall(rentalLoanApplication, null);
        Type localVarReturnType = new TypeToken<RentalApplicationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitRentalLoanApplicationAsync(RentalLoanApplication rentalLoanApplication, final ApiCallback<RentalApplicationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitRentalLoanApplicationValidateBeforeCall(rentalLoanApplication, _callback);
        Type localVarReturnType = new TypeToken<RentalApplicationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SubmitRentalLoanApplicationRequestBuilder {
        private final String renteeGender;
        private final String renteeFirstName;
        private final String renteeLastName;
        private final String renteeEmail;
        private final String renteeMobilePhoneNumber;
        private final String purchaseItem;
        private final String itemName;
        private final Double itemMarketValue;
        private final Double rentalAmount;
        private final String idFrontPhoto;
        private final String idFrontExtension;
        private final String idBackPhoto;
        private final String idBackExtension;
        private final String selfiePhoto;
        private final String selfieExtension;
        private final String contractFile;
        private final String contractFileExtension;
        private String apiRequester;
        private String renteeBirthdate;
        private String renteeStreetAddress;
        private String renteeHouseNumber;
        private String renteeZipCode;
        private String renteeCity;
        private String itemStatus;
        private String itemType;
        private String itemBrand;
        private String itemModel;
        private String itemColor;
        private String serialNumber;
        private String identificationNumber;
        private String rentDate;

        private SubmitRentalLoanApplicationRequestBuilder(String renteeGender, String renteeFirstName, String renteeLastName, String renteeEmail, String renteeMobilePhoneNumber, String purchaseItem, String itemName, Double itemMarketValue, Double rentalAmount, String idFrontPhoto, String idFrontExtension, String idBackPhoto, String idBackExtension, String selfiePhoto, String selfieExtension, String contractFile, String contractFileExtension) {
            this.renteeGender = renteeGender;
            this.renteeFirstName = renteeFirstName;
            this.renteeLastName = renteeLastName;
            this.renteeEmail = renteeEmail;
            this.renteeMobilePhoneNumber = renteeMobilePhoneNumber;
            this.purchaseItem = purchaseItem;
            this.itemName = itemName;
            this.itemMarketValue = itemMarketValue;
            this.rentalAmount = rentalAmount;
            this.idFrontPhoto = idFrontPhoto;
            this.idFrontExtension = idFrontExtension;
            this.idBackPhoto = idBackPhoto;
            this.idBackExtension = idBackExtension;
            this.selfiePhoto = selfiePhoto;
            this.selfieExtension = selfieExtension;
            this.contractFile = contractFile;
            this.contractFileExtension = contractFileExtension;
        }

        /**
         * Set apiRequester
         * @param apiRequester Name or E-mail of the user who makes the API call (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder apiRequester(String apiRequester) {
            this.apiRequester = apiRequester;
            return this;
        }
        
        /**
         * Set renteeBirthdate
         * @param renteeBirthdate Birthdate of the rentee. Expected format: dd.MM.yyyy (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder renteeBirthdate(String renteeBirthdate) {
            this.renteeBirthdate = renteeBirthdate;
            return this;
        }
        
        /**
         * Set renteeStreetAddress
         * @param renteeStreetAddress Street address of the rentee (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder renteeStreetAddress(String renteeStreetAddress) {
            this.renteeStreetAddress = renteeStreetAddress;
            return this;
        }
        
        /**
         * Set renteeHouseNumber
         * @param renteeHouseNumber House number of the rentee (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder renteeHouseNumber(String renteeHouseNumber) {
            this.renteeHouseNumber = renteeHouseNumber;
            return this;
        }
        
        /**
         * Set renteeZipCode
         * @param renteeZipCode Zip code of the rentee (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder renteeZipCode(String renteeZipCode) {
            this.renteeZipCode = renteeZipCode;
            return this;
        }
        
        /**
         * Set renteeCity
         * @param renteeCity City of the rentee (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder renteeCity(String renteeCity) {
            this.renteeCity = renteeCity;
            return this;
        }
        
        /**
         * Set itemStatus
         * @param itemStatus Status of the item (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder itemStatus(String itemStatus) {
            this.itemStatus = itemStatus;
            return this;
        }
        
        /**
         * Set itemType
         * @param itemType Type of the item e.g. Electric Scooter, E-Motorcycle etc. (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder itemType(String itemType) {
            this.itemType = itemType;
            return this;
        }
        
        /**
         * Set itemBrand
         * @param itemBrand Brand of the item (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder itemBrand(String itemBrand) {
            this.itemBrand = itemBrand;
            return this;
        }
        
        /**
         * Set itemModel
         * @param itemModel Model of the item (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder itemModel(String itemModel) {
            this.itemModel = itemModel;
            return this;
        }
        
        /**
         * Set itemColor
         * @param itemColor Color of the item (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder itemColor(String itemColor) {
            this.itemColor = itemColor;
            return this;
        }
        
        /**
         * Set serialNumber
         * @param serialNumber Serial number (aka VIN or Chassis No.) (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder serialNumber(String serialNumber) {
            this.serialNumber = serialNumber;
            return this;
        }
        
        /**
         * Set identificationNumber
         * @param identificationNumber Identification number (aka Stammnummer) (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder identificationNumber(String identificationNumber) {
            this.identificationNumber = identificationNumber;
            return this;
        }
        
        /**
         * Set rentDate
         * @param rentDate The first date of the rental period. Expected format: dd.MM.yyyy (optional)
         * @return SubmitRentalLoanApplicationRequestBuilder
         */
        public SubmitRentalLoanApplicationRequestBuilder rentDate(String rentDate) {
            this.rentDate = rentDate;
            return this;
        }
        
        /**
         * Build call for submitRentalLoanApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RentalLoanApplication rentalLoanApplication = buildBodyParams();
            return submitRentalLoanApplicationCall(rentalLoanApplication, _callback);
        }

        private RentalLoanApplication buildBodyParams() {
            RentalLoanApplication rentalLoanApplication = new RentalLoanApplication();
            rentalLoanApplication.apiRequester(this.apiRequester);
            rentalLoanApplication.renteeGender(this.renteeGender);
            rentalLoanApplication.renteeFirstName(this.renteeFirstName);
            rentalLoanApplication.renteeLastName(this.renteeLastName);
            rentalLoanApplication.renteeBirthdate(this.renteeBirthdate);
            rentalLoanApplication.renteeEmail(this.renteeEmail);
            rentalLoanApplication.renteeMobilePhoneNumber(this.renteeMobilePhoneNumber);
            rentalLoanApplication.renteeStreetAddress(this.renteeStreetAddress);
            rentalLoanApplication.renteeHouseNumber(this.renteeHouseNumber);
            rentalLoanApplication.renteeZipCode(this.renteeZipCode);
            rentalLoanApplication.renteeCity(this.renteeCity);
            rentalLoanApplication.purchaseItem(this.purchaseItem);
            rentalLoanApplication.itemStatus(this.itemStatus);
            rentalLoanApplication.itemName(this.itemName);
            rentalLoanApplication.itemType(this.itemType);
            rentalLoanApplication.itemBrand(this.itemBrand);
            rentalLoanApplication.itemModel(this.itemModel);
            rentalLoanApplication.itemColor(this.itemColor);
            rentalLoanApplication.itemMarketValue(this.itemMarketValue);
            rentalLoanApplication.serialNumber(this.serialNumber);
            rentalLoanApplication.identificationNumber(this.identificationNumber);
            rentalLoanApplication.rentalAmount(this.rentalAmount);
            rentalLoanApplication.rentDate(this.rentDate);
            rentalLoanApplication.idFrontPhoto(this.idFrontPhoto);
            rentalLoanApplication.idFrontExtension(this.idFrontExtension);
            rentalLoanApplication.idBackPhoto(this.idBackPhoto);
            rentalLoanApplication.idBackExtension(this.idBackExtension);
            rentalLoanApplication.selfiePhoto(this.selfiePhoto);
            rentalLoanApplication.selfieExtension(this.selfieExtension);
            rentalLoanApplication.contractFile(this.contractFile);
            rentalLoanApplication.contractFileExtension(this.contractFileExtension);
            return rentalLoanApplication;
        }

        /**
         * Execute submitRentalLoanApplication request
         * @return RentalApplicationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public RentalApplicationResult execute() throws ApiException {
            RentalLoanApplication rentalLoanApplication = buildBodyParams();
            ApiResponse<RentalApplicationResult> localVarResp = submitRentalLoanApplicationWithHttpInfo(rentalLoanApplication);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute submitRentalLoanApplication request with HTTP info returned
         * @return ApiResponse&lt;RentalApplicationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RentalApplicationResult> executeWithHttpInfo() throws ApiException {
            RentalLoanApplication rentalLoanApplication = buildBodyParams();
            return submitRentalLoanApplicationWithHttpInfo(rentalLoanApplication);
        }

        /**
         * Execute submitRentalLoanApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RentalApplicationResult> _callback) throws ApiException {
            RentalLoanApplication rentalLoanApplication = buildBodyParams();
            return submitRentalLoanApplicationAsync(rentalLoanApplication, _callback);
        }
    }

    /**
     * Apply for a rental loan
     * **Note**: Each successful application creates a binding obligation on you. Once you apply you may not retract the application.
     * @return SubmitRentalLoanApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Loan Application </td><td>  -  </td></tr>
     </table>
     */
    public SubmitRentalLoanApplicationRequestBuilder submitRentalLoanApplication(String renteeGender, String renteeFirstName, String renteeLastName, String renteeEmail, String renteeMobilePhoneNumber, String purchaseItem, String itemName, Double itemMarketValue, Double rentalAmount, String idFrontPhoto, String idFrontExtension, String idBackPhoto, String idBackExtension, String selfiePhoto, String selfieExtension, String contractFile, String contractFileExtension) throws IllegalArgumentException {
        if (renteeGender == null) throw new IllegalArgumentException("\"renteeGender\" is required but got null");
            if (renteeGender != null && renteeGender.length() < 1) {
              throw new IllegalArgumentException("Invalid value for renteeGender. Length must be greater than or equal to 1.");
            }

        if (renteeFirstName == null) throw new IllegalArgumentException("\"renteeFirstName\" is required but got null");
            if (renteeFirstName != null && renteeFirstName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for renteeFirstName. Length must be greater than or equal to 1.");
            }

        if (renteeLastName == null) throw new IllegalArgumentException("\"renteeLastName\" is required but got null");
            if (renteeLastName != null && renteeLastName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for renteeLastName. Length must be greater than or equal to 1.");
            }

        if (renteeEmail == null) throw new IllegalArgumentException("\"renteeEmail\" is required but got null");
            if (renteeEmail != null && renteeEmail.length() < 1) {
              throw new IllegalArgumentException("Invalid value for renteeEmail. Length must be greater than or equal to 1.");
            }

        if (renteeMobilePhoneNumber == null) throw new IllegalArgumentException("\"renteeMobilePhoneNumber\" is required but got null");
            if (renteeMobilePhoneNumber != null && renteeMobilePhoneNumber.length() < 1) {
              throw new IllegalArgumentException("Invalid value for renteeMobilePhoneNumber. Length must be greater than or equal to 1.");
            }

        if (purchaseItem == null) throw new IllegalArgumentException("\"purchaseItem\" is required but got null");
            if (purchaseItem != null && purchaseItem.length() < 1) {
              throw new IllegalArgumentException("Invalid value for purchaseItem. Length must be greater than or equal to 1.");
            }

        if (itemName == null) throw new IllegalArgumentException("\"itemName\" is required but got null");
            if (itemName != null && itemName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for itemName. Length must be greater than or equal to 1.");
            }

        if (itemMarketValue == null) throw new IllegalArgumentException("\"itemMarketValue\" is required but got null");
        if (rentalAmount == null) throw new IllegalArgumentException("\"rentalAmount\" is required but got null");
        if (idFrontPhoto == null) throw new IllegalArgumentException("\"idFrontPhoto\" is required but got null");
            if (idFrontPhoto != null && idFrontPhoto.length() < 1) {
              throw new IllegalArgumentException("Invalid value for idFrontPhoto. Length must be greater than or equal to 1.");
            }

        if (idFrontExtension == null) throw new IllegalArgumentException("\"idFrontExtension\" is required but got null");
            if (idFrontExtension != null && idFrontExtension.length() < 1) {
              throw new IllegalArgumentException("Invalid value for idFrontExtension. Length must be greater than or equal to 1.");
            }

        if (idBackPhoto == null) throw new IllegalArgumentException("\"idBackPhoto\" is required but got null");
            if (idBackPhoto != null && idBackPhoto.length() < 1) {
              throw new IllegalArgumentException("Invalid value for idBackPhoto. Length must be greater than or equal to 1.");
            }

        if (idBackExtension == null) throw new IllegalArgumentException("\"idBackExtension\" is required but got null");
            if (idBackExtension != null && idBackExtension.length() < 1) {
              throw new IllegalArgumentException("Invalid value for idBackExtension. Length must be greater than or equal to 1.");
            }

        if (selfiePhoto == null) throw new IllegalArgumentException("\"selfiePhoto\" is required but got null");
            if (selfiePhoto != null && selfiePhoto.length() < 1) {
              throw new IllegalArgumentException("Invalid value for selfiePhoto. Length must be greater than or equal to 1.");
            }

        if (selfieExtension == null) throw new IllegalArgumentException("\"selfieExtension\" is required but got null");
            if (selfieExtension != null && selfieExtension.length() < 1) {
              throw new IllegalArgumentException("Invalid value for selfieExtension. Length must be greater than or equal to 1.");
            }

        if (contractFile == null) throw new IllegalArgumentException("\"contractFile\" is required but got null");
            if (contractFile != null && contractFile.length() < 1) {
              throw new IllegalArgumentException("Invalid value for contractFile. Length must be greater than or equal to 1.");
            }

        if (contractFileExtension == null) throw new IllegalArgumentException("\"contractFileExtension\" is required but got null");
            if (contractFileExtension != null && contractFileExtension.length() < 1) {
              throw new IllegalArgumentException("Invalid value for contractFileExtension. Length must be greater than or equal to 1.");
            }

        return new SubmitRentalLoanApplicationRequestBuilder(renteeGender, renteeFirstName, renteeLastName, renteeEmail, renteeMobilePhoneNumber, purchaseItem, itemName, itemMarketValue, rentalAmount, idFrontPhoto, idFrontExtension, idBackPhoto, idBackExtension, selfiePhoto, selfieExtension, contractFile, contractFileExtension);
    }
}
