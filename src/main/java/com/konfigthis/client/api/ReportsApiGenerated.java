/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConnectorReport;
import com.konfigthis.client.model.IntermediaryReport;
import com.konfigthis.client.model.RentalReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getConnectorInvestmentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Connector";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorInvestmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConnectorInvestmentsCall(_callback);

    }


    private ApiResponse<ConnectorReport> getConnectorInvestmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConnectorInvestmentsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConnectorReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorInvestmentsAsync(final ApiCallback<ConnectorReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorInvestmentsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConnectorReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConnectorInvestmentsRequestBuilder {

        private GetConnectorInvestmentsRequestBuilder() {
        }

        /**
         * Build call for getConnectorInvestments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Investments List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorInvestmentsCall(_callback);
        }


        /**
         * Execute getConnectorInvestments request
         * @return ConnectorReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Investments List </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorReport execute() throws ApiException {
            ApiResponse<ConnectorReport> localVarResp = getConnectorInvestmentsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConnectorInvestments request with HTTP info returned
         * @return ApiResponse&lt;ConnectorReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Investments List </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorReport> executeWithHttpInfo() throws ApiException {
            return getConnectorInvestmentsWithHttpInfo();
        }

        /**
         * Execute getConnectorInvestments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Investments List </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorReport> _callback) throws ApiException {
            return getConnectorInvestmentsAsync(_callback);
        }
    }

    /**
     * Get your connector account summary and investments of the connected investors
     * __Note__: It&#39;s valid only for investments made indirectly through connector
     * @return GetConnectorInvestmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Investments List </td><td>  -  </td></tr>
     </table>
     */
    public GetConnectorInvestmentsRequestBuilder getConnectorInvestments() throws IllegalArgumentException {
        return new GetConnectorInvestmentsRequestBuilder();
    }
    private okhttp3.Call getIntermediaryDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Intermediary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIntermediaryDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getIntermediaryDataCall(_callback);

    }


    private ApiResponse<IntermediaryReport> getIntermediaryDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getIntermediaryDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<IntermediaryReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIntermediaryDataAsync(final ApiCallback<IntermediaryReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIntermediaryDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<IntermediaryReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIntermediaryDataRequestBuilder {

        private GetIntermediaryDataRequestBuilder() {
        }

        /**
         * Build call for getIntermediaryData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIntermediaryDataCall(_callback);
        }


        /**
         * Execute getIntermediaryData request
         * @return IntermediaryReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public IntermediaryReport execute() throws ApiException {
            ApiResponse<IntermediaryReport> localVarResp = getIntermediaryDataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIntermediaryData request with HTTP info returned
         * @return ApiResponse&lt;IntermediaryReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IntermediaryReport> executeWithHttpInfo() throws ApiException {
            return getIntermediaryDataWithHttpInfo();
        }

        /**
         * Execute getIntermediaryData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IntermediaryReport> _callback) throws ApiException {
            return getIntermediaryDataAsync(_callback);
        }
    }

    /**
     * Get your intermediary account summary and your partner loans data
     * __Note__: It&#39;s valid only for loans made indirectly through the intermediary
     * @return GetIntermediaryDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
     </table>
     */
    public GetIntermediaryDataRequestBuilder getIntermediaryData() throws IllegalArgumentException {
        return new GetIntermediaryDataRequestBuilder();
    }
    private okhttp3.Call rentalAccountSummaryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Rental";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rentalAccountSummaryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return rentalAccountSummaryCall(_callback);

    }


    private ApiResponse<RentalReport> rentalAccountSummaryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = rentalAccountSummaryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RentalReport>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rentalAccountSummaryAsync(final ApiCallback<RentalReport> _callback) throws ApiException {

        okhttp3.Call localVarCall = rentalAccountSummaryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RentalReport>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RentalAccountSummaryRequestBuilder {

        private RentalAccountSummaryRequestBuilder() {
        }

        /**
         * Build call for rentalAccountSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return rentalAccountSummaryCall(_callback);
        }


        /**
         * Execute rentalAccountSummary request
         * @return RentalReport
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public RentalReport execute() throws ApiException {
            ApiResponse<RentalReport> localVarResp = rentalAccountSummaryWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rentalAccountSummary request with HTTP info returned
         * @return ApiResponse&lt;RentalReport&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RentalReport> executeWithHttpInfo() throws ApiException {
            return rentalAccountSummaryWithHttpInfo();
        }

        /**
         * Execute rentalAccountSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RentalReport> _callback) throws ApiException {
            return rentalAccountSummaryAsync(_callback);
        }
    }

    /**
     * Get your rental account summary and your loans data
     * __Note__: It&#39;s valid only for loans made through this API
     * @return RentalAccountSummaryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account Overview </td><td>  -  </td></tr>
     </table>
     */
    public RentalAccountSummaryRequestBuilder rentalAccountSummary() throws IllegalArgumentException {
        return new RentalAccountSummaryRequestBuilder();
    }
}
