/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information regarding each monthly payment
 */
@ApiModel(description = "Information regarding each monthly payment")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SchedulePayment {
  public static final String SERIALIZED_NAME_ANNUITY_NUMBER = "annuityNumber";
  @SerializedName(SERIALIZED_NAME_ANNUITY_NUMBER)
  private Integer annuityNumber;

  public static final String SERIALIZED_NAME_ANNUITY_DATE = "annuityDate";
  @SerializedName(SERIALIZED_NAME_ANNUITY_DATE)
  private String annuityDate;

  public static final String SERIALIZED_NAME_ANNUITY_AMOUNT = "annuityAmount";
  @SerializedName(SERIALIZED_NAME_ANNUITY_AMOUNT)
  private Double annuityAmount;

  public static final String SERIALIZED_NAME_PRINCIPAL_PORTION = "principalPortion";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_PORTION)
  private Double principalPortion;

  public static final String SERIALIZED_NAME_INTEREST_PORTION = "interestPortion";
  @SerializedName(SERIALIZED_NAME_INTEREST_PORTION)
  private Double interestPortion;

  public static final String SERIALIZED_NAME_INSURANCE_FEE = "insuranceFee";
  @SerializedName(SERIALIZED_NAME_INSURANCE_FEE)
  private Double insuranceFee;

  public static final String SERIALIZED_NAME_ADMINISTRATIVE_FEE = "administrativeFee";
  @SerializedName(SERIALIZED_NAME_ADMINISTRATIVE_FEE)
  private Double administrativeFee;

  public static final String SERIALIZED_NAME_COMMISSION_PORTION = "commissionPortion";
  @SerializedName(SERIALIZED_NAME_COMMISSION_PORTION)
  private Double commissionPortion;

  public static final String SERIALIZED_NAME_NET_INCOME = "netIncome";
  @SerializedName(SERIALIZED_NAME_NET_INCOME)
  private Double netIncome;

  public static final String SERIALIZED_NAME_PRINCIPAL_BALANCE = "principalBalance";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_BALANCE)
  private Double principalBalance;

  public static final String SERIALIZED_NAME_ANNUITY_STATUS = "annuityStatus";
  @SerializedName(SERIALIZED_NAME_ANNUITY_STATUS)
  private String annuityStatus;

  public static final String SERIALIZED_NAME_IS_PAID = "isPaid";
  @SerializedName(SERIALIZED_NAME_IS_PAID)
  private String isPaid;

  public static final String SERIALIZED_NAME_DATE_PAID = "datePaid";
  @SerializedName(SERIALIZED_NAME_DATE_PAID)
  private String datePaid;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public SchedulePayment() {
  }

  public SchedulePayment annuityNumber(Integer annuityNumber) {
    
    
    
    
    this.annuityNumber = annuityNumber;
    return this;
  }

   /**
   * Number of the investor instalment
   * @return annuityNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5320", value = "Number of the investor instalment")

  public Integer getAnnuityNumber() {
    return annuityNumber;
  }


  public void setAnnuityNumber(Integer annuityNumber) {
    
    
    
    this.annuityNumber = annuityNumber;
  }


  public SchedulePayment annuityDate(String annuityDate) {
    
    
    
    
    this.annuityDate = annuityDate;
    return this;
  }

   /**
   * Instalment due date
   * @return annuityDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "26.02.2021", value = "Instalment due date")

  public String getAnnuityDate() {
    return annuityDate;
  }


  public void setAnnuityDate(String annuityDate) {
    
    
    
    this.annuityDate = annuityDate;
  }


  public SchedulePayment annuityAmount(Double annuityAmount) {
    
    
    
    
    this.annuityAmount = annuityAmount;
    return this;
  }

   /**
   * An amount the investor receives each month
   * @return annuityAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "235.78", value = "An amount the investor receives each month")

  public Double getAnnuityAmount() {
    return annuityAmount;
  }


  public void setAnnuityAmount(Double annuityAmount) {
    
    
    
    this.annuityAmount = annuityAmount;
  }


  public SchedulePayment principalPortion(Double principalPortion) {
    
    
    
    
    this.principalPortion = principalPortion;
    return this;
  }

   /**
   * The principal part of the instalment
   * @return principalPortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "200.57", value = "The principal part of the instalment")

  public Double getPrincipalPortion() {
    return principalPortion;
  }


  public void setPrincipalPortion(Double principalPortion) {
    
    
    
    this.principalPortion = principalPortion;
  }


  public SchedulePayment interestPortion(Double interestPortion) {
    
    
    
    
    this.interestPortion = interestPortion;
    return this;
  }

   /**
   * The interest part of the instalment
   * @return interestPortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "35.21", value = "The interest part of the instalment")

  public Double getInterestPortion() {
    return interestPortion;
  }


  public void setInterestPortion(Double interestPortion) {
    
    
    
    this.interestPortion = interestPortion;
  }


  public SchedulePayment insuranceFee(Double insuranceFee) {
    
    
    
    
    this.insuranceFee = insuranceFee;
    return this;
  }

   /**
   * The insurance fee amount
   * @return insuranceFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2.52", value = "The insurance fee amount")

  public Double getInsuranceFee() {
    return insuranceFee;
  }


  public void setInsuranceFee(Double insuranceFee) {
    
    
    
    this.insuranceFee = insuranceFee;
  }


  public SchedulePayment administrativeFee(Double administrativeFee) {
    
    
    
    
    this.administrativeFee = administrativeFee;
    return this;
  }

   /**
   * The administrative fee amount
   * @return administrativeFee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.2", value = "The administrative fee amount")

  public Double getAdministrativeFee() {
    return administrativeFee;
  }


  public void setAdministrativeFee(Double administrativeFee) {
    
    
    
    this.administrativeFee = administrativeFee;
  }


  public SchedulePayment commissionPortion(Double commissionPortion) {
    
    
    
    
    this.commissionPortion = commissionPortion;
    return this;
  }

   /**
   * Monthly commission that investor pays
   * @return commissionPortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3.79", value = "Monthly commission that investor pays")

  public Double getCommissionPortion() {
    return commissionPortion;
  }


  public void setCommissionPortion(Double commissionPortion) {
    
    
    
    this.commissionPortion = commissionPortion;
  }


  public SchedulePayment netIncome(Double netIncome) {
    
    
    
    
    this.netIncome = netIncome;
    return this;
  }

   /**
   * Monthly net income of the investor (monthly interest - monthly commission)
   * @return netIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "31.45", value = "Monthly net income of the investor (monthly interest - monthly commission)")

  public Double getNetIncome() {
    return netIncome;
  }


  public void setNetIncome(Double netIncome) {
    
    
    
    this.netIncome = netIncome;
  }


  public SchedulePayment principalBalance(Double principalBalance) {
    
    
    
    
    this.principalBalance = principalBalance;
    return this;
  }

   /**
   * The amount of principal on the loan
   * @return principalBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6500", value = "The amount of principal on the loan")

  public Double getPrincipalBalance() {
    return principalBalance;
  }


  public void setPrincipalBalance(Double principalBalance) {
    
    
    
    this.principalBalance = principalBalance;
  }


  public SchedulePayment annuityStatus(String annuityStatus) {
    
    
    
    
    this.annuityStatus = annuityStatus;
    return this;
  }

   /**
   * The status of the instalment
   * @return annuityStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "paid, unpaid, late", value = "The status of the instalment")

  public String getAnnuityStatus() {
    return annuityStatus;
  }


  public void setAnnuityStatus(String annuityStatus) {
    
    
    
    this.annuityStatus = annuityStatus;
  }


  public SchedulePayment isPaid(String isPaid) {
    
    
    
    
    this.isPaid = isPaid;
    return this;
  }

   /**
   * Is instalment is paid?
   * @return isPaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Is instalment is paid?")

  public String getIsPaid() {
    return isPaid;
  }


  public void setIsPaid(String isPaid) {
    
    
    
    this.isPaid = isPaid;
  }


  public SchedulePayment datePaid(String datePaid) {
    
    
    
    
    this.datePaid = datePaid;
    return this;
  }

   /**
   * A date when the instalment is paid.
   * @return datePaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01.03.2021", value = "A date when the instalment is paid.")

  public String getDatePaid() {
    return datePaid;
  }


  public void setDatePaid(String datePaid) {
    
    
    
    this.datePaid = datePaid;
  }


  public SchedulePayment note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * Some explanation of the instalment
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The customer pays regularly, but is two instalments behind schedule.", value = "Some explanation of the instalment")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SchedulePayment instance itself
   */
  public SchedulePayment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchedulePayment schedulePayment = (SchedulePayment) o;
    return Objects.equals(this.annuityNumber, schedulePayment.annuityNumber) &&
        Objects.equals(this.annuityDate, schedulePayment.annuityDate) &&
        Objects.equals(this.annuityAmount, schedulePayment.annuityAmount) &&
        Objects.equals(this.principalPortion, schedulePayment.principalPortion) &&
        Objects.equals(this.interestPortion, schedulePayment.interestPortion) &&
        Objects.equals(this.insuranceFee, schedulePayment.insuranceFee) &&
        Objects.equals(this.administrativeFee, schedulePayment.administrativeFee) &&
        Objects.equals(this.commissionPortion, schedulePayment.commissionPortion) &&
        Objects.equals(this.netIncome, schedulePayment.netIncome) &&
        Objects.equals(this.principalBalance, schedulePayment.principalBalance) &&
        Objects.equals(this.annuityStatus, schedulePayment.annuityStatus) &&
        Objects.equals(this.isPaid, schedulePayment.isPaid) &&
        Objects.equals(this.datePaid, schedulePayment.datePaid) &&
        Objects.equals(this.note, schedulePayment.note)&&
        Objects.equals(this.additionalProperties, schedulePayment.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(annuityNumber, annuityDate, annuityAmount, principalPortion, interestPortion, insuranceFee, administrativeFee, commissionPortion, netIncome, principalBalance, annuityStatus, isPaid, datePaid, note, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchedulePayment {\n");
    sb.append("    annuityNumber: ").append(toIndentedString(annuityNumber)).append("\n");
    sb.append("    annuityDate: ").append(toIndentedString(annuityDate)).append("\n");
    sb.append("    annuityAmount: ").append(toIndentedString(annuityAmount)).append("\n");
    sb.append("    principalPortion: ").append(toIndentedString(principalPortion)).append("\n");
    sb.append("    interestPortion: ").append(toIndentedString(interestPortion)).append("\n");
    sb.append("    insuranceFee: ").append(toIndentedString(insuranceFee)).append("\n");
    sb.append("    administrativeFee: ").append(toIndentedString(administrativeFee)).append("\n");
    sb.append("    commissionPortion: ").append(toIndentedString(commissionPortion)).append("\n");
    sb.append("    netIncome: ").append(toIndentedString(netIncome)).append("\n");
    sb.append("    principalBalance: ").append(toIndentedString(principalBalance)).append("\n");
    sb.append("    annuityStatus: ").append(toIndentedString(annuityStatus)).append("\n");
    sb.append("    isPaid: ").append(toIndentedString(isPaid)).append("\n");
    sb.append("    datePaid: ").append(toIndentedString(datePaid)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annuityNumber");
    openapiFields.add("annuityDate");
    openapiFields.add("annuityAmount");
    openapiFields.add("principalPortion");
    openapiFields.add("interestPortion");
    openapiFields.add("insuranceFee");
    openapiFields.add("administrativeFee");
    openapiFields.add("commissionPortion");
    openapiFields.add("netIncome");
    openapiFields.add("principalBalance");
    openapiFields.add("annuityStatus");
    openapiFields.add("isPaid");
    openapiFields.add("datePaid");
    openapiFields.add("note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchedulePayment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchedulePayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchedulePayment is not found in the empty JSON string", SchedulePayment.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("annuityDate").isJsonNull() && (jsonObj.get("annuityDate") != null && !jsonObj.get("annuityDate").isJsonNull()) && !jsonObj.get("annuityDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annuityDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annuityDate").toString()));
      }
      if (!jsonObj.get("annuityStatus").isJsonNull() && (jsonObj.get("annuityStatus") != null && !jsonObj.get("annuityStatus").isJsonNull()) && !jsonObj.get("annuityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `annuityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("annuityStatus").toString()));
      }
      if (!jsonObj.get("isPaid").isJsonNull() && (jsonObj.get("isPaid") != null && !jsonObj.get("isPaid").isJsonNull()) && !jsonObj.get("isPaid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isPaid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isPaid").toString()));
      }
      if (!jsonObj.get("datePaid").isJsonNull() && (jsonObj.get("datePaid") != null && !jsonObj.get("datePaid").isJsonNull()) && !jsonObj.get("datePaid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datePaid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datePaid").toString()));
      }
      if (!jsonObj.get("note").isJsonNull() && (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchedulePayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchedulePayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchedulePayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchedulePayment.class));

       return (TypeAdapter<T>) new TypeAdapter<SchedulePayment>() {
           @Override
           public void write(JsonWriter out, SchedulePayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SchedulePayment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SchedulePayment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchedulePayment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchedulePayment
  * @throws IOException if the JSON string is invalid with respect to SchedulePayment
  */
  public static SchedulePayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchedulePayment.class);
  }

 /**
  * Convert an instance of SchedulePayment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

