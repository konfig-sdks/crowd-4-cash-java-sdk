/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A person who takes out a loan
 */
@ApiModel(description = "A person who takes out a loan")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelPrivate {
  public static final String SERIALIZED_NAME_BORROWER_ID = "borrowerId";
  @SerializedName(SERIALIZED_NAME_BORROWER_ID)
  private Integer borrowerId;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_HOUSING_CONDITION = "housingCondition";
  @SerializedName(SERIALIZED_NAME_HOUSING_CONDITION)
  private String housingCondition;

  public static final String SERIALIZED_NAME_RESIDENTIAL_SITUATION = "residentialSituation";
  @SerializedName(SERIALIZED_NAME_RESIDENTIAL_SITUATION)
  private String residentialSituation;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public static final String SERIALIZED_NAME_CHILDREN = "children";
  @SerializedName(SERIALIZED_NAME_CHILDREN)
  private Integer children;

  public static final String SERIALIZED_NAME_PROFESSION = "profession";
  @SerializedName(SERIALIZED_NAME_PROFESSION)
  private String profession;

  public static final String SERIALIZED_NAME_WORK_SINCE = "workSince";
  @SerializedName(SERIALIZED_NAME_WORK_SINCE)
  private String workSince;

  public static final String SERIALIZED_NAME_SOLVENCY = "solvency";
  @SerializedName(SERIALIZED_NAME_SOLVENCY)
  private String solvency;

  public static final String SERIALIZED_NAME_MONTHLY_NET_INCOME = "monthlyNetIncome";
  @SerializedName(SERIALIZED_NAME_MONTHLY_NET_INCOME)
  private Double monthlyNetIncome;

  public static final String SERIALIZED_NAME_PARTNER_INCOME = "partnerIncome";
  @SerializedName(SERIALIZED_NAME_PARTNER_INCOME)
  private Double partnerIncome;

  public static final String SERIALIZED_NAME_AVAILABLE_AMOUNT = "availableAmount";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_AMOUNT)
  private Double availableAmount;

  public static final String SERIALIZED_NAME_AVAILABLE_AMOUNT_PERCENTAGE = "availableAmountPercentage";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_AMOUNT_PERCENTAGE)
  private Double availableAmountPercentage;

  public static final String SERIALIZED_NAME_MONTHLY_PAYMENT = "monthlyPayment";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PAYMENT)
  private Double monthlyPayment;

  public static final String SERIALIZED_NAME_COLLECTION_PROCEDURES = "collectionProcedures";
  @SerializedName(SERIALIZED_NAME_COLLECTION_PROCEDURES)
  private String collectionProcedures;

  public ModelPrivate() {
  }

  public ModelPrivate borrowerId(Integer borrowerId) {
    
    
    
    
    this.borrowerId = borrowerId;
    return this;
  }

   /**
   * Id of the borrower
   * @return borrowerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "25", value = "Id of the borrower")

  public Integer getBorrowerId() {
    return borrowerId;
  }


  public void setBorrowerId(Integer borrowerId) {
    
    
    
    this.borrowerId = borrowerId;
  }


  public ModelPrivate zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Zip of the borrower
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "8200", value = "Zip of the borrower")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public ModelPrivate city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City of the borrower
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = " Schaffhausen", value = "City of the borrower")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public ModelPrivate age(Integer age) {
    
    
    
    
    this.age = age;
    return this;
  }

   /**
   * Age of the borrower
   * @return age
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "37", value = "Age of the borrower")

  public Integer getAge() {
    return age;
  }


  public void setAge(Integer age) {
    
    
    
    this.age = age;
  }


  public ModelPrivate gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Gender of borrower
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Male, Female, null", value = "Gender of borrower")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public ModelPrivate category(String category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Borrower type
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Private, SME", value = "Borrower type")

  public String getCategory() {
    return category;
  }


  public void setCategory(String category) {
    
    
    
    this.category = category;
  }


  public ModelPrivate housingCondition(String housingCondition) {
    
    
    
    
    this.housingCondition = housingCondition;
    return this;
  }

   /**
   * Description of the housing conditon (used to calculate the living costs)
   * @return housingCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Single, Single sharing an apartment, Partnership without sharing an apartment, Single parent, etc.", value = "Description of the housing conditon (used to calculate the living costs)")

  public String getHousingCondition() {
    return housingCondition;
  }


  public void setHousingCondition(String housingCondition) {
    
    
    
    this.housingCondition = housingCondition;
  }


  public ModelPrivate residentialSituation(String residentialSituation) {
    
    
    
    
    this.residentialSituation = residentialSituation;
    return this;
  }

   /**
   * Residential situation
   * @return residentialSituation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Tenant, Homeowner", value = "Residential situation")

  public String getResidentialSituation() {
    return residentialSituation;
  }


  public void setResidentialSituation(String residentialSituation) {
    
    
    
    this.residentialSituation = residentialSituation;
  }


  public ModelPrivate nationality(String nationality) {
    
    
    
    
    this.nationality = nationality;
    return this;
  }

   /**
   * Nationality
   * @return nationality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Switzerland, Liechtenstein", value = "Nationality")

  public String getNationality() {
    return nationality;
  }


  public void setNationality(String nationality) {
    
    
    
    this.nationality = nationality;
  }


  public ModelPrivate children(Integer children) {
    
    
    
    
    this.children = children;
    return this;
  }

   /**
   * Number of children
   * @return children
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Number of children")

  public Integer getChildren() {
    return children;
  }


  public void setChildren(Integer children) {
    
    
    
    this.children = children;
  }


  public ModelPrivate profession(String profession) {
    
    
    
    
    this.profession = profession;
    return this;
  }

   /**
   * Profession description
   * @return profession
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Health insurance specialist, Doctor, Marketing specialist, etc.", value = "Profession description")

  public String getProfession() {
    return profession;
  }


  public void setProfession(String profession) {
    
    
    
    this.profession = profession;
  }


  public ModelPrivate workSince(String workSince) {
    
    
    
    
    this.workSince = workSince;
    return this;
  }

   /**
   * Date since started with the current employer
   * @return workSince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = " 01.10.2015", value = "Date since started with the current employer")

  public String getWorkSince() {
    return workSince;
  }


  public void setWorkSince(String workSince) {
    
    
    
    this.workSince = workSince;
  }


  public ModelPrivate solvency(String solvency) {
    
    
    
    
    this.solvency = solvency;
    return this;
  }

   /**
   * Check in economical database successful
   * @return solvency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OK, NOK", value = "Check in economical database successful")

  public String getSolvency() {
    return solvency;
  }


  public void setSolvency(String solvency) {
    
    
    
    this.solvency = solvency;
  }


  public ModelPrivate monthlyNetIncome(Double monthlyNetIncome) {
    
    
    
    
    this.monthlyNetIncome = monthlyNetIncome;
    return this;
  }

   /**
   * Monthly net income of the borrower
   * @return monthlyNetIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14991.66", value = "Monthly net income of the borrower")

  public Double getMonthlyNetIncome() {
    return monthlyNetIncome;
  }


  public void setMonthlyNetIncome(Double monthlyNetIncome) {
    
    
    
    this.monthlyNetIncome = monthlyNetIncome;
  }


  public ModelPrivate partnerIncome(Double partnerIncome) {
    
    
    
    
    this.partnerIncome = partnerIncome;
    return this;
  }

   /**
   * Income of the partner (if parter as a second borrower included)
   * @return partnerIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6548.45", value = "Income of the partner (if parter as a second borrower included)")

  public Double getPartnerIncome() {
    return partnerIncome;
  }


  public void setPartnerIncome(Double partnerIncome) {
    
    
    
    this.partnerIncome = partnerIncome;
  }


  public ModelPrivate availableAmount(Double availableAmount) {
    
    
    
    
    this.availableAmount = availableAmount;
    return this;
  }

   /**
   * Income minus expenses
   * @return availableAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7459.16", value = "Income minus expenses")

  public Double getAvailableAmount() {
    return availableAmount;
  }


  public void setAvailableAmount(Double availableAmount) {
    
    
    
    this.availableAmount = availableAmount;
  }


  public ModelPrivate availableAmountPercentage(Double availableAmountPercentage) {
    
    
    
    
    this.availableAmountPercentage = availableAmountPercentage;
    return this;
  }

   /**
   * Relation of monthly payment with available amount (how much of the available amount is covered by the monthly payment)
   * @return availableAmountPercentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11.38", value = "Relation of monthly payment with available amount (how much of the available amount is covered by the monthly payment)")

  public Double getAvailableAmountPercentage() {
    return availableAmountPercentage;
  }


  public void setAvailableAmountPercentage(Double availableAmountPercentage) {
    
    
    
    this.availableAmountPercentage = availableAmountPercentage;
  }


  public ModelPrivate monthlyPayment(Double monthlyPayment) {
    
    
    
    
    this.monthlyPayment = monthlyPayment;
    return this;
  }

   /**
   * Monthly payment of the requested loan
   * @return monthlyPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "849.59", value = "Monthly payment of the requested loan")

  public Double getMonthlyPayment() {
    return monthlyPayment;
  }


  public void setMonthlyPayment(Double monthlyPayment) {
    
    
    
    this.monthlyPayment = monthlyPayment;
  }


  public ModelPrivate collectionProcedures(String collectionProcedures) {
    
    
    
    
    this.collectionProcedures = collectionProcedures;
    return this;
  }

   /**
   * Are there any collection procedures in the last three years
   * @return collectionProcedures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are there any collection procedures in the last three years")

  public String getCollectionProcedures() {
    return collectionProcedures;
  }


  public void setCollectionProcedures(String collectionProcedures) {
    
    
    
    this.collectionProcedures = collectionProcedures;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelPrivate instance itself
   */
  public ModelPrivate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelPrivate _private = (ModelPrivate) o;
    return Objects.equals(this.borrowerId, _private.borrowerId) &&
        Objects.equals(this.zip, _private.zip) &&
        Objects.equals(this.city, _private.city) &&
        Objects.equals(this.age, _private.age) &&
        Objects.equals(this.gender, _private.gender) &&
        Objects.equals(this.category, _private.category) &&
        Objects.equals(this.housingCondition, _private.housingCondition) &&
        Objects.equals(this.residentialSituation, _private.residentialSituation) &&
        Objects.equals(this.nationality, _private.nationality) &&
        Objects.equals(this.children, _private.children) &&
        Objects.equals(this.profession, _private.profession) &&
        Objects.equals(this.workSince, _private.workSince) &&
        Objects.equals(this.solvency, _private.solvency) &&
        Objects.equals(this.monthlyNetIncome, _private.monthlyNetIncome) &&
        Objects.equals(this.partnerIncome, _private.partnerIncome) &&
        Objects.equals(this.availableAmount, _private.availableAmount) &&
        Objects.equals(this.availableAmountPercentage, _private.availableAmountPercentage) &&
        Objects.equals(this.monthlyPayment, _private.monthlyPayment) &&
        Objects.equals(this.collectionProcedures, _private.collectionProcedures)&&
        Objects.equals(this.additionalProperties, _private.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(borrowerId, zip, city, age, gender, category, housingCondition, residentialSituation, nationality, children, profession, workSince, solvency, monthlyNetIncome, partnerIncome, availableAmount, availableAmountPercentage, monthlyPayment, collectionProcedures, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelPrivate {\n");
    sb.append("    borrowerId: ").append(toIndentedString(borrowerId)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    housingCondition: ").append(toIndentedString(housingCondition)).append("\n");
    sb.append("    residentialSituation: ").append(toIndentedString(residentialSituation)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("    children: ").append(toIndentedString(children)).append("\n");
    sb.append("    profession: ").append(toIndentedString(profession)).append("\n");
    sb.append("    workSince: ").append(toIndentedString(workSince)).append("\n");
    sb.append("    solvency: ").append(toIndentedString(solvency)).append("\n");
    sb.append("    monthlyNetIncome: ").append(toIndentedString(monthlyNetIncome)).append("\n");
    sb.append("    partnerIncome: ").append(toIndentedString(partnerIncome)).append("\n");
    sb.append("    availableAmount: ").append(toIndentedString(availableAmount)).append("\n");
    sb.append("    availableAmountPercentage: ").append(toIndentedString(availableAmountPercentage)).append("\n");
    sb.append("    monthlyPayment: ").append(toIndentedString(monthlyPayment)).append("\n");
    sb.append("    collectionProcedures: ").append(toIndentedString(collectionProcedures)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("borrowerId");
    openapiFields.add("zip");
    openapiFields.add("city");
    openapiFields.add("age");
    openapiFields.add("gender");
    openapiFields.add("category");
    openapiFields.add("housingCondition");
    openapiFields.add("residentialSituation");
    openapiFields.add("nationality");
    openapiFields.add("children");
    openapiFields.add("profession");
    openapiFields.add("workSince");
    openapiFields.add("solvency");
    openapiFields.add("monthlyNetIncome");
    openapiFields.add("partnerIncome");
    openapiFields.add("availableAmount");
    openapiFields.add("availableAmountPercentage");
    openapiFields.add("monthlyPayment");
    openapiFields.add("collectionProcedures");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelPrivate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelPrivate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelPrivate is not found in the empty JSON string", ModelPrivate.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("zip").isJsonNull() && (jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if (!jsonObj.get("city").isJsonNull() && (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("gender").isJsonNull() && (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("category").isJsonNull() && (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if (!jsonObj.get("housingCondition").isJsonNull() && (jsonObj.get("housingCondition") != null && !jsonObj.get("housingCondition").isJsonNull()) && !jsonObj.get("housingCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housingCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housingCondition").toString()));
      }
      if (!jsonObj.get("residentialSituation").isJsonNull() && (jsonObj.get("residentialSituation") != null && !jsonObj.get("residentialSituation").isJsonNull()) && !jsonObj.get("residentialSituation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `residentialSituation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("residentialSituation").toString()));
      }
      if (!jsonObj.get("nationality").isJsonNull() && (jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
      if (!jsonObj.get("profession").isJsonNull() && (jsonObj.get("profession") != null && !jsonObj.get("profession").isJsonNull()) && !jsonObj.get("profession").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profession` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profession").toString()));
      }
      if (!jsonObj.get("workSince").isJsonNull() && (jsonObj.get("workSince") != null && !jsonObj.get("workSince").isJsonNull()) && !jsonObj.get("workSince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workSince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workSince").toString()));
      }
      if (!jsonObj.get("solvency").isJsonNull() && (jsonObj.get("solvency") != null && !jsonObj.get("solvency").isJsonNull()) && !jsonObj.get("solvency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `solvency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("solvency").toString()));
      }
      if (!jsonObj.get("collectionProcedures").isJsonNull() && (jsonObj.get("collectionProcedures") != null && !jsonObj.get("collectionProcedures").isJsonNull()) && !jsonObj.get("collectionProcedures").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionProcedures` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionProcedures").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelPrivate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelPrivate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelPrivate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelPrivate.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelPrivate>() {
           @Override
           public void write(JsonWriter out, ModelPrivate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelPrivate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelPrivate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelPrivate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelPrivate
  * @throws IOException if the JSON string is invalid with respect to ModelPrivate
  */
  public static ModelPrivate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelPrivate.class);
  }

 /**
  * Convert an instance of ModelPrivate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

