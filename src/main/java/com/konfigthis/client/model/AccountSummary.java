/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AccountSummary
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccountSummary {
  public static final String SERIALIZED_NAME_OPENING_BALANCE = "openingBalance";
  @SerializedName(SERIALIZED_NAME_OPENING_BALANCE)
  private Double openingBalance;

  public static final String SERIALIZED_NAME_INTEREST = "interest";
  @SerializedName(SERIALIZED_NAME_INTEREST)
  private Double interest;

  public static final String SERIALIZED_NAME_DEFAULT_INTEREST = "defaultInterest";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INTEREST)
  private Double defaultInterest;

  public static final String SERIALIZED_NAME_PRINCIPAL = "principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private Double principal;

  public static final String SERIALIZED_NAME_INVESTMENTS = "investments";
  @SerializedName(SERIALIZED_NAME_INVESTMENTS)
  private Double investments;

  public static final String SERIALIZED_NAME_COMMISSION = "commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private Double commission;

  public static final String SERIALIZED_NAME_DEPOSITS = "deposits";
  @SerializedName(SERIALIZED_NAME_DEPOSITS)
  private Double deposits;

  public static final String SERIALIZED_NAME_WITHDRAWALS = "withdrawals";
  @SerializedName(SERIALIZED_NAME_WITHDRAWALS)
  private Double withdrawals;

  public static final String SERIALIZED_NAME_CLOSING_BALANCE = "closingBalance";
  @SerializedName(SERIALIZED_NAME_CLOSING_BALANCE)
  private Double closingBalance;

  public AccountSummary() {
  }

  public AccountSummary openingBalance(Double openingBalance) {
    
    
    
    
    this.openingBalance = openingBalance;
    return this;
  }

   /**
   * Balance at the beggining of the month
   * @return openingBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Balance at the beggining of the month")

  public Double getOpeningBalance() {
    return openingBalance;
  }


  public void setOpeningBalance(Double openingBalance) {
    
    
    
    this.openingBalance = openingBalance;
  }


  public AccountSummary interest(Double interest) {
    
    
    
    
    this.interest = interest;
    return this;
  }

   /**
   * Interest that investor receives for all investments during the months
   * @return interest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50.3", value = "Interest that investor receives for all investments during the months")

  public Double getInterest() {
    return interest;
  }


  public void setInterest(Double interest) {
    
    
    
    this.interest = interest;
  }


  public AccountSummary defaultInterest(Double defaultInterest) {
    
    
    
    
    this.defaultInterest = defaultInterest;
    return this;
  }

   /**
   * Interest that investor receives for the late payments
   * @return defaultInterest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10.25", value = "Interest that investor receives for the late payments")

  public Double getDefaultInterest() {
    return defaultInterest;
  }


  public void setDefaultInterest(Double defaultInterest) {
    
    
    
    this.defaultInterest = defaultInterest;
  }


  public AccountSummary principal(Double principal) {
    
    
    
    
    this.principal = principal;
    return this;
  }

   /**
   * Principal paid to investor during the month
   * @return principal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "150", value = "Principal paid to investor during the month")

  public Double getPrincipal() {
    return principal;
  }


  public void setPrincipal(Double principal) {
    
    
    
    this.principal = principal;
  }


  public AccountSummary investments(Double investments) {
    
    
    
    
    this.investments = investments;
    return this;
  }

   /**
   * Investor&#39;s investments during the month
   * @return investments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6000", value = "Investor's investments during the month")

  public Double getInvestments() {
    return investments;
  }


  public void setInvestments(Double investments) {
    
    
    
    this.investments = investments;
  }


  public AccountSummary commission(Double commission) {
    
    
    
    
    this.commission = commission;
    return this;
  }

   /**
   * Commission paid by investor during the month
   * @return commission
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Commission paid by investor during the month")

  public Double getCommission() {
    return commission;
  }


  public void setCommission(Double commission) {
    
    
    
    this.commission = commission;
  }


  public AccountSummary deposits(Double deposits) {
    
    
    
    
    this.deposits = deposits;
    return this;
  }

   /**
   * Paid bids by investor during the months
   * @return deposits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "600", value = "Paid bids by investor during the months")

  public Double getDeposits() {
    return deposits;
  }


  public void setDeposits(Double deposits) {
    
    
    
    this.deposits = deposits;
  }


  public AccountSummary withdrawals(Double withdrawals) {
    
    
    
    
    this.withdrawals = withdrawals;
    return this;
  }

   /**
   * Deposits returned to investor during the month, due to cancelation of the agreement by the borrower
   * @return withdrawals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Deposits returned to investor during the month, due to cancelation of the agreement by the borrower")

  public Double getWithdrawals() {
    return withdrawals;
  }


  public void setWithdrawals(Double withdrawals) {
    
    
    
    this.withdrawals = withdrawals;
  }


  public AccountSummary closingBalance(Double closingBalance) {
    
    
    
    
    this.closingBalance = closingBalance;
    return this;
  }

   /**
   * Balance at the end of the month
   * @return closingBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Balance at the end of the month")

  public Double getClosingBalance() {
    return closingBalance;
  }


  public void setClosingBalance(Double closingBalance) {
    
    
    
    this.closingBalance = closingBalance;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccountSummary instance itself
   */
  public AccountSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountSummary accountSummary = (AccountSummary) o;
    return Objects.equals(this.openingBalance, accountSummary.openingBalance) &&
        Objects.equals(this.interest, accountSummary.interest) &&
        Objects.equals(this.defaultInterest, accountSummary.defaultInterest) &&
        Objects.equals(this.principal, accountSummary.principal) &&
        Objects.equals(this.investments, accountSummary.investments) &&
        Objects.equals(this.commission, accountSummary.commission) &&
        Objects.equals(this.deposits, accountSummary.deposits) &&
        Objects.equals(this.withdrawals, accountSummary.withdrawals) &&
        Objects.equals(this.closingBalance, accountSummary.closingBalance)&&
        Objects.equals(this.additionalProperties, accountSummary.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(openingBalance, interest, defaultInterest, principal, investments, commission, deposits, withdrawals, closingBalance, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountSummary {\n");
    sb.append("    openingBalance: ").append(toIndentedString(openingBalance)).append("\n");
    sb.append("    interest: ").append(toIndentedString(interest)).append("\n");
    sb.append("    defaultInterest: ").append(toIndentedString(defaultInterest)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    investments: ").append(toIndentedString(investments)).append("\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    deposits: ").append(toIndentedString(deposits)).append("\n");
    sb.append("    withdrawals: ").append(toIndentedString(withdrawals)).append("\n");
    sb.append("    closingBalance: ").append(toIndentedString(closingBalance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("openingBalance");
    openapiFields.add("interest");
    openapiFields.add("defaultInterest");
    openapiFields.add("principal");
    openapiFields.add("investments");
    openapiFields.add("commission");
    openapiFields.add("deposits");
    openapiFields.add("withdrawals");
    openapiFields.add("closingBalance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountSummary is not found in the empty JSON string", AccountSummary.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountSummary>() {
           @Override
           public void write(JsonWriter out, AccountSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccountSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountSummary
  * @throws IOException if the JSON string is invalid with respect to AccountSummary
  */
  public static AccountSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountSummary.class);
  }

 /**
  * Convert an instance of AccountSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

