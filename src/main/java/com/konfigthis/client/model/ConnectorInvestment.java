/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * An investment made by the connector on behalf of connected investor
 */
@ApiModel(description = "An investment made by the connector on behalf of connected investor")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConnectorInvestment {
  public static final String SERIALIZED_NAME_INVESTOR_ID = "investorId";
  @SerializedName(SERIALIZED_NAME_INVESTOR_ID)
  private Integer investorId;

  public static final String SERIALIZED_NAME_INVESTOR_NAME = "investorName";
  @SerializedName(SERIALIZED_NAME_INVESTOR_NAME)
  private String investorName;

  public static final String SERIALIZED_NAME_BID_AMOUNT = "bidAmount";
  @SerializedName(SERIALIZED_NAME_BID_AMOUNT)
  private Double bidAmount;

  public static final String SERIALIZED_NAME_BID_DATE = "bidDate";
  @SerializedName(SERIALIZED_NAME_BID_DATE)
  private String bidDate;

  public static final String SERIALIZED_NAME_LOAN_ID = "loanId";
  @SerializedName(SERIALIZED_NAME_LOAN_ID)
  private Integer loanId;

  public static final String SERIALIZED_NAME_LOAN_AMOUNT = "loanAmount";
  @SerializedName(SERIALIZED_NAME_LOAN_AMOUNT)
  private Double loanAmount;

  public static final String SERIALIZED_NAME_LOAN_DURATION = "loanDuration";
  @SerializedName(SERIALIZED_NAME_LOAN_DURATION)
  private Integer loanDuration;

  public static final String SERIALIZED_NAME_LOAN_INTEREST = "loanInterest";
  @SerializedName(SERIALIZED_NAME_LOAN_INTEREST)
  private Double loanInterest;

  public static final String SERIALIZED_NAME_LOAN_RATING = "loanRating";
  @SerializedName(SERIALIZED_NAME_LOAN_RATING)
  private String loanRating;

  public ConnectorInvestment() {
  }

  public ConnectorInvestment investorId(Integer investorId) {
    
    
    
    
    this.investorId = investorId;
    return this;
  }

   /**
   * Id of the investor
   * @return investorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "570", value = "Id of the investor")

  public Integer getInvestorId() {
    return investorId;
  }


  public void setInvestorId(Integer investorId) {
    
    
    
    this.investorId = investorId;
  }


  public ConnectorInvestment investorName(String investorName) {
    
    
    
    
    this.investorName = investorName;
    return this;
  }

   /**
   * Name of the investor
   * @return investorName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Connected AG", value = "Name of the investor")

  public String getInvestorName() {
    return investorName;
  }


  public void setInvestorName(String investorName) {
    
    
    
    this.investorName = investorName;
  }


  public ConnectorInvestment bidAmount(Double bidAmount) {
    
    
    
    
    this.bidAmount = bidAmount;
    return this;
  }

   /**
   * Amount of the bid
   * @return bidAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12000", value = "Amount of the bid")

  public Double getBidAmount() {
    return bidAmount;
  }


  public void setBidAmount(Double bidAmount) {
    
    
    
    this.bidAmount = bidAmount;
  }


  public ConnectorInvestment bidDate(String bidDate) {
    
    
    
    
    this.bidDate = bidDate;
    return this;
  }

   /**
   * Date when the bid is placed
   * @return bidDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20.10.2021", value = "Date when the bid is placed")

  public String getBidDate() {
    return bidDate;
  }


  public void setBidDate(String bidDate) {
    
    
    
    this.bidDate = bidDate;
  }


  public ConnectorInvestment loanId(Integer loanId) {
    
    
    
    
    this.loanId = loanId;
    return this;
  }

   /**
   * Id of the loan
   * @return loanId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3201", value = "Id of the loan")

  public Integer getLoanId() {
    return loanId;
  }


  public void setLoanId(Integer loanId) {
    
    
    
    this.loanId = loanId;
  }


  public ConnectorInvestment loanAmount(Double loanAmount) {
    
    
    
    
    this.loanAmount = loanAmount;
    return this;
  }

   /**
   * Amount of the loan
   * @return loanAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "24000", value = "Amount of the loan")

  public Double getLoanAmount() {
    return loanAmount;
  }


  public void setLoanAmount(Double loanAmount) {
    
    
    
    this.loanAmount = loanAmount;
  }


  public ConnectorInvestment loanDuration(Integer loanDuration) {
    
    
    
    
    this.loanDuration = loanDuration;
    return this;
  }

   /**
   * Duration of the loan in months
   * @return loanDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "48", value = "Duration of the loan in months")

  public Integer getLoanDuration() {
    return loanDuration;
  }


  public void setLoanDuration(Integer loanDuration) {
    
    
    
    this.loanDuration = loanDuration;
  }


  public ConnectorInvestment loanInterest(Double loanInterest) {
    
    
    
    
    this.loanInterest = loanInterest;
    return this;
  }

   /**
   * Interest rate of the loan
   * @return loanInterest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5.25", value = "Interest rate of the loan")

  public Double getLoanInterest() {
    return loanInterest;
  }


  public void setLoanInterest(Double loanInterest) {
    
    
    
    this.loanInterest = loanInterest;
  }


  public ConnectorInvestment loanRating(String loanRating) {
    
    
    
    
    this.loanRating = loanRating;
    return this;
  }

   /**
   * Rating of the loan - AA, A, B, C, D
   * @return loanRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AA", value = "Rating of the loan - AA, A, B, C, D")

  public String getLoanRating() {
    return loanRating;
  }


  public void setLoanRating(String loanRating) {
    
    
    
    this.loanRating = loanRating;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConnectorInvestment instance itself
   */
  public ConnectorInvestment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorInvestment connectorInvestment = (ConnectorInvestment) o;
    return Objects.equals(this.investorId, connectorInvestment.investorId) &&
        Objects.equals(this.investorName, connectorInvestment.investorName) &&
        Objects.equals(this.bidAmount, connectorInvestment.bidAmount) &&
        Objects.equals(this.bidDate, connectorInvestment.bidDate) &&
        Objects.equals(this.loanId, connectorInvestment.loanId) &&
        Objects.equals(this.loanAmount, connectorInvestment.loanAmount) &&
        Objects.equals(this.loanDuration, connectorInvestment.loanDuration) &&
        Objects.equals(this.loanInterest, connectorInvestment.loanInterest) &&
        Objects.equals(this.loanRating, connectorInvestment.loanRating)&&
        Objects.equals(this.additionalProperties, connectorInvestment.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(investorId, investorName, bidAmount, bidDate, loanId, loanAmount, loanDuration, loanInterest, loanRating, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorInvestment {\n");
    sb.append("    investorId: ").append(toIndentedString(investorId)).append("\n");
    sb.append("    investorName: ").append(toIndentedString(investorName)).append("\n");
    sb.append("    bidAmount: ").append(toIndentedString(bidAmount)).append("\n");
    sb.append("    bidDate: ").append(toIndentedString(bidDate)).append("\n");
    sb.append("    loanId: ").append(toIndentedString(loanId)).append("\n");
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    loanDuration: ").append(toIndentedString(loanDuration)).append("\n");
    sb.append("    loanInterest: ").append(toIndentedString(loanInterest)).append("\n");
    sb.append("    loanRating: ").append(toIndentedString(loanRating)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("investorId");
    openapiFields.add("investorName");
    openapiFields.add("bidAmount");
    openapiFields.add("bidDate");
    openapiFields.add("loanId");
    openapiFields.add("loanAmount");
    openapiFields.add("loanDuration");
    openapiFields.add("loanInterest");
    openapiFields.add("loanRating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectorInvestment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectorInvestment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorInvestment is not found in the empty JSON string", ConnectorInvestment.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("investorName").isJsonNull() && (jsonObj.get("investorName") != null && !jsonObj.get("investorName").isJsonNull()) && !jsonObj.get("investorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `investorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("investorName").toString()));
      }
      if (!jsonObj.get("bidDate").isJsonNull() && (jsonObj.get("bidDate") != null && !jsonObj.get("bidDate").isJsonNull()) && !jsonObj.get("bidDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidDate").toString()));
      }
      if (!jsonObj.get("loanRating").isJsonNull() && (jsonObj.get("loanRating") != null && !jsonObj.get("loanRating").isJsonNull()) && !jsonObj.get("loanRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanRating").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorInvestment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorInvestment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorInvestment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorInvestment.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorInvestment>() {
           @Override
           public void write(JsonWriter out, ConnectorInvestment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorInvestment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConnectorInvestment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectorInvestment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectorInvestment
  * @throws IOException if the JSON string is invalid with respect to ConnectorInvestment
  */
  public static ConnectorInvestment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorInvestment.class);
  }

 /**
  * Convert an instance of ConnectorInvestment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

