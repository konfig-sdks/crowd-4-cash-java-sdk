/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ActiveBid;
import com.konfigthis.client.model.Company;
import com.konfigthis.client.model.Expenses;
import com.konfigthis.client.model.Financial;
import com.konfigthis.client.model.Income;
import com.konfigthis.client.model.ModelPrivate;
import com.konfigthis.client.model.Questionnaire;
import com.konfigthis.client.model.TechnicalData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Investment opportunity
 */
@ApiModel(description = "Investment opportunity")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Opportunity {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private String dateCreated;

  public static final String SERIALIZED_NAME_DATE_APPROVED = "dateApproved";
  @SerializedName(SERIALIZED_NAME_DATE_APPROVED)
  private String dateApproved;

  public static final String SERIALIZED_NAME_LOAN_AMOUNT = "loanAmount";
  @SerializedName(SERIALIZED_NAME_LOAN_AMOUNT)
  private Double loanAmount;

  public static final String SERIALIZED_NAME_INTEREST_RATE = "interestRate";
  @SerializedName(SERIALIZED_NAME_INTEREST_RATE)
  private Double interestRate;

  public static final String SERIALIZED_NAME_PAYMENT_FREQUENCY = "paymentFrequency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_FREQUENCY)
  private String paymentFrequency;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_BORROWER_TYPE = "borrowerType";
  @SerializedName(SERIALIZED_NAME_BORROWER_TYPE)
  private String borrowerType;

  public static final String SERIALIZED_NAME_BIDDING_TYPE = "biddingType";
  @SerializedName(SERIALIZED_NAME_BIDDING_TYPE)
  private String biddingType;

  public static final String SERIALIZED_NAME_LOAN_TYPE = "loanType";
  @SerializedName(SERIALIZED_NAME_LOAN_TYPE)
  private String loanType;

  public static final String SERIALIZED_NAME_LOAN_PURPOSE = "loanPurpose";
  @SerializedName(SERIALIZED_NAME_LOAN_PURPOSE)
  private String loanPurpose;

  public static final String SERIALIZED_NAME_LOAN_RATING = "loanRating";
  @SerializedName(SERIALIZED_NAME_LOAN_RATING)
  private String loanRating;

  public static final String SERIALIZED_NAME_LOAN_STATUS = "loanStatus";
  @SerializedName(SERIALIZED_NAME_LOAN_STATUS)
  private String loanStatus;

  public static final String SERIALIZED_NAME_PERFORMANCE_STATUS = "performanceStatus";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_STATUS)
  private String performanceStatus;

  public static final String SERIALIZED_NAME_COLLATERAL = "collateral";
  @SerializedName(SERIALIZED_NAME_COLLATERAL)
  private String collateral;

  public static final String SERIALIZED_NAME_COLLATERAL_TYPE = "collateralType";
  @SerializedName(SERIALIZED_NAME_COLLATERAL_TYPE)
  private String collateralType;

  public static final String SERIALIZED_NAME_INSURANCE = "insurance";
  @SerializedName(SERIALIZED_NAME_INSURANCE)
  private String insurance;

  public static final String SERIALIZED_NAME_OPEN_AMOUNT = "openAmount";
  @SerializedName(SERIALIZED_NAME_OPEN_AMOUNT)
  private Double openAmount;

  public static final String SERIALIZED_NAME_BIDDING_END = "biddingEnd";
  @SerializedName(SERIALIZED_NAME_BIDDING_END)
  private String biddingEnd;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_BORROWER_PRIVATE = "borrowerPrivate";
  @SerializedName(SERIALIZED_NAME_BORROWER_PRIVATE)
  private ModelPrivate borrowerPrivate;

  public static final String SERIALIZED_NAME_BORROWER_COMPANY = "borrowerCompany";
  @SerializedName(SERIALIZED_NAME_BORROWER_COMPANY)
  private Company borrowerCompany;

  public static final String SERIALIZED_NAME_INCOME = "income";
  @SerializedName(SERIALIZED_NAME_INCOME)
  private Income income;

  public static final String SERIALIZED_NAME_EXPENSES = "expenses";
  @SerializedName(SERIALIZED_NAME_EXPENSES)
  private Expenses expenses;

  public static final String SERIALIZED_NAME_QUESTIONNAIRE = "questionnaire";
  @SerializedName(SERIALIZED_NAME_QUESTIONNAIRE)
  private Questionnaire questionnaire;

  public static final String SERIALIZED_NAME_FINANCIAL = "financial";
  @SerializedName(SERIALIZED_NAME_FINANCIAL)
  private Financial financial;

  public static final String SERIALIZED_NAME_TECHNICAL_DATA = "technicalData";
  @SerializedName(SERIALIZED_NAME_TECHNICAL_DATA)
  private TechnicalData technicalData;

  public static final String SERIALIZED_NAME_BIDS = "bids";
  @SerializedName(SERIALIZED_NAME_BIDS)
  private List<ActiveBid> bids = null;

  public Opportunity() {
  }

  public Opportunity id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Loan ID
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2913", value = "Loan ID")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public Opportunity dateCreated(String dateCreated) {
    
    
    
    
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Date when the loan application has been submitted.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "09.02.2021", value = "Date when the loan application has been submitted.")

  public String getDateCreated() {
    return dateCreated;
  }


  public void setDateCreated(String dateCreated) {
    
    
    
    this.dateCreated = dateCreated;
  }


  public Opportunity dateApproved(String dateApproved) {
    
    
    
    
    this.dateApproved = dateApproved;
    return this;
  }

   /**
   * Date when the loan application has been reviewed and approved.
   * @return dateApproved
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10.02.2021", value = "Date when the loan application has been reviewed and approved.")

  public String getDateApproved() {
    return dateApproved;
  }


  public void setDateApproved(String dateApproved) {
    
    
    
    this.dateApproved = dateApproved;
  }


  public Opportunity loanAmount(Double loanAmount) {
    
    
    
    
    this.loanAmount = loanAmount;
    return this;
  }

   /**
   * An amount the borrower promises to repay
   * @return loanAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5000", value = "An amount the borrower promises to repay")

  public Double getLoanAmount() {
    return loanAmount;
  }


  public void setLoanAmount(Double loanAmount) {
    
    
    
    this.loanAmount = loanAmount;
  }


  public Opportunity interestRate(Double interestRate) {
    
    
    
    
    this.interestRate = interestRate;
    return this;
  }

   /**
   * Interest rate in %
   * @return interestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7.25", value = "Interest rate in %")

  public Double getInterestRate() {
    return interestRate;
  }


  public void setInterestRate(Double interestRate) {
    
    
    
    this.interestRate = interestRate;
  }


  public Opportunity paymentFrequency(String paymentFrequency) {
    
    
    
    
    this.paymentFrequency = paymentFrequency;
    return this;
  }

   /**
   * Payment frequency defines how often payments will be made
   * @return paymentFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Monthly", value = "Payment frequency defines how often payments will be made")

  public String getPaymentFrequency() {
    return paymentFrequency;
  }


  public void setPaymentFrequency(String paymentFrequency) {
    
    
    
    this.paymentFrequency = paymentFrequency;
  }


  public Opportunity duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * Duration in months
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3", value = "Duration in months")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public Opportunity borrowerType(String borrowerType) {
    
    
    
    
    this.borrowerType = borrowerType;
    return this;
  }

   /**
   * Borrower Type (Private or SME)
   * @return borrowerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Private", value = "Borrower Type (Private or SME)")

  public String getBorrowerType() {
    return borrowerType;
  }


  public void setBorrowerType(String borrowerType) {
    
    
    
    this.borrowerType = borrowerType;
  }


  public Opportunity biddingType(String biddingType) {
    
    
    
    
    this.biddingType = biddingType;
    return this;
  }

   /**
   * Loan type
   * @return biddingType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Short-term loan", value = "Loan type")

  public String getBiddingType() {
    return biddingType;
  }


  public void setBiddingType(String biddingType) {
    
    
    
    this.biddingType = biddingType;
  }


  public Opportunity loanType(String loanType) {
    
    
    
    
    this.loanType = loanType;
    return this;
  }

   /**
   * Loan type e.g. POS loan, Private or SME
   * @return loanType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "POS loan", value = "Loan type e.g. POS loan, Private or SME")

  public String getLoanType() {
    return loanType;
  }


  public void setLoanType(String loanType) {
    
    
    
    this.loanType = loanType;
  }


  public Opportunity loanPurpose(String loanPurpose) {
    
    
    
    
    this.loanPurpose = loanPurpose;
    return this;
  }

   /**
   * Loan purpose category e.g. Education, Furnishing, Vehicle purchase, Wedding, Taxes, Refinancing etc.
   * @return loanPurpose
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Education", value = "Loan purpose category e.g. Education, Furnishing, Vehicle purchase, Wedding, Taxes, Refinancing etc.")

  public String getLoanPurpose() {
    return loanPurpose;
  }


  public void setLoanPurpose(String loanPurpose) {
    
    
    
    this.loanPurpose = loanPurpose;
  }


  public Opportunity loanRating(String loanRating) {
    
    
    
    
    this.loanRating = loanRating;
    return this;
  }

   /**
   * Crowd4Cash Rating
   * @return loanRating
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "A", value = "Crowd4Cash Rating")

  public String getLoanRating() {
    return loanRating;
  }


  public void setLoanRating(String loanRating) {
    
    
    
    this.loanRating = loanRating;
  }


  public Opportunity loanStatus(String loanStatus) {
    
    
    
    
    this.loanStatus = loanStatus;
    return this;
  }

   /**
   * Loan status e.g. In funding, Funded, Active, Closed, Defaulted etc.
   * @return loanStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "In funding", value = "Loan status e.g. In funding, Funded, Active, Closed, Defaulted etc.")

  public String getLoanStatus() {
    return loanStatus;
  }


  public void setLoanStatus(String loanStatus) {
    
    
    
    this.loanStatus = loanStatus;
  }


  public Opportunity performanceStatus(String performanceStatus) {
    
    
    
    
    this.performanceStatus = performanceStatus;
    return this;
  }

   /**
   * Payment status e.g. Performing, Late 1 to 15 days, Late 16 to 30 days, Late more than 120 days, Defaulted, Cancelled, Finished prematurely, Paid off, etc.
   * @return performanceStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Performing", value = "Payment status e.g. Performing, Late 1 to 15 days, Late 16 to 30 days, Late more than 120 days, Defaulted, Cancelled, Finished prematurely, Paid off, etc.")

  public String getPerformanceStatus() {
    return performanceStatus;
  }


  public void setPerformanceStatus(String performanceStatus) {
    
    
    
    this.performanceStatus = performanceStatus;
  }


  public Opportunity collateral(String collateral) {
    
    
    
    
    this.collateral = collateral;
    return this;
  }

   /**
   * Is oan collaterialized?
   * @return collateral
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is oan collaterialized?")

  public String getCollateral() {
    return collateral;
  }


  public void setCollateral(String collateral) {
    
    
    
    this.collateral = collateral;
  }


  public Opportunity collateralType(String collateralType) {
    
    
    
    
    this.collateralType = collateralType;
    return this;
  }

   /**
   * Collater Type - Real estate, Vehicle, Guarantor, Stock
   * @return collateralType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vehicle", value = "Collater Type - Real estate, Vehicle, Guarantor, Stock")

  public String getCollateralType() {
    return collateralType;
  }


  public void setCollateralType(String collateralType) {
    
    
    
    this.collateralType = collateralType;
  }


  public Opportunity insurance(String insurance) {
    
    
    
    
    this.insurance = insurance;
    return this;
  }

   /**
   * Is loan insured?
   * @return insurance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is loan insured?")

  public String getInsurance() {
    return insurance;
  }


  public void setInsurance(String insurance) {
    
    
    
    this.insurance = insurance;
  }


  public Opportunity openAmount(Double openAmount) {
    
    
    
    
    this.openAmount = openAmount;
    return this;
  }

   /**
   * An amount that is not funded yet
   * @return openAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2000", value = "An amount that is not funded yet")

  public Double getOpenAmount() {
    return openAmount;
  }


  public void setOpenAmount(Double openAmount) {
    
    
    
    this.openAmount = openAmount;
  }


  public Opportunity biddingEnd(String biddingEnd) {
    
    
    
    
    this.biddingEnd = biddingEnd;
    return this;
  }

   /**
   * End date of the project
   * @return biddingEnd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "28.02.2021", value = "End date of the project")

  public String getBiddingEnd() {
    return biddingEnd;
  }


  public void setBiddingEnd(String biddingEnd) {
    
    
    
    this.biddingEnd = biddingEnd;
  }


  public Opportunity notes(String notes) {
    
    
    
    
    this.notes = notes;
    return this;
  }

   /**
   * Description of the loan purpose
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The borrower wants to buy a car and has decided to pay for it in cash. This gives him more financial flexibility at comparable costs compared to a leasing solution.", value = "Description of the loan purpose")

  public String getNotes() {
    return notes;
  }


  public void setNotes(String notes) {
    
    
    
    this.notes = notes;
  }


  public Opportunity link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * Web page where loan is displayed in UI
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://crowd4cash.ch/loan-details/2913", value = "Web page where loan is displayed in UI")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public Opportunity borrowerPrivate(ModelPrivate borrowerPrivate) {
    
    
    
    
    this.borrowerPrivate = borrowerPrivate;
    return this;
  }

   /**
   * Get borrowerPrivate
   * @return borrowerPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ModelPrivate getBorrowerPrivate() {
    return borrowerPrivate;
  }


  public void setBorrowerPrivate(ModelPrivate borrowerPrivate) {
    
    
    
    this.borrowerPrivate = borrowerPrivate;
  }


  public Opportunity borrowerCompany(Company borrowerCompany) {
    
    
    
    
    this.borrowerCompany = borrowerCompany;
    return this;
  }

   /**
   * Get borrowerCompany
   * @return borrowerCompany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Company getBorrowerCompany() {
    return borrowerCompany;
  }


  public void setBorrowerCompany(Company borrowerCompany) {
    
    
    
    this.borrowerCompany = borrowerCompany;
  }


  public Opportunity income(Income income) {
    
    
    
    
    this.income = income;
    return this;
  }

   /**
   * Get income
   * @return income
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Income getIncome() {
    return income;
  }


  public void setIncome(Income income) {
    
    
    
    this.income = income;
  }


  public Opportunity expenses(Expenses expenses) {
    
    
    
    
    this.expenses = expenses;
    return this;
  }

   /**
   * Get expenses
   * @return expenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Expenses getExpenses() {
    return expenses;
  }


  public void setExpenses(Expenses expenses) {
    
    
    
    this.expenses = expenses;
  }


  public Opportunity questionnaire(Questionnaire questionnaire) {
    
    
    
    
    this.questionnaire = questionnaire;
    return this;
  }

   /**
   * Get questionnaire
   * @return questionnaire
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Questionnaire getQuestionnaire() {
    return questionnaire;
  }


  public void setQuestionnaire(Questionnaire questionnaire) {
    
    
    
    this.questionnaire = questionnaire;
  }


  public Opportunity financial(Financial financial) {
    
    
    
    
    this.financial = financial;
    return this;
  }

   /**
   * Get financial
   * @return financial
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Financial getFinancial() {
    return financial;
  }


  public void setFinancial(Financial financial) {
    
    
    
    this.financial = financial;
  }


  public Opportunity technicalData(TechnicalData technicalData) {
    
    
    
    
    this.technicalData = technicalData;
    return this;
  }

   /**
   * Get technicalData
   * @return technicalData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TechnicalData getTechnicalData() {
    return technicalData;
  }


  public void setTechnicalData(TechnicalData technicalData) {
    
    
    
    this.technicalData = technicalData;
  }


  public Opportunity bids(List<ActiveBid> bids) {
    
    
    
    
    this.bids = bids;
    return this;
  }

  public Opportunity addBidsItem(ActiveBid bidsItem) {
    if (this.bids == null) {
      this.bids = new ArrayList<>();
    }
    this.bids.add(bidsItem);
    return this;
  }

   /**
   * Get bids
   * @return bids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ActiveBid> getBids() {
    return bids;
  }


  public void setBids(List<ActiveBid> bids) {
    
    
    
    this.bids = bids;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Opportunity instance itself
   */
  public Opportunity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Opportunity opportunity = (Opportunity) o;
    return Objects.equals(this.id, opportunity.id) &&
        Objects.equals(this.dateCreated, opportunity.dateCreated) &&
        Objects.equals(this.dateApproved, opportunity.dateApproved) &&
        Objects.equals(this.loanAmount, opportunity.loanAmount) &&
        Objects.equals(this.interestRate, opportunity.interestRate) &&
        Objects.equals(this.paymentFrequency, opportunity.paymentFrequency) &&
        Objects.equals(this.duration, opportunity.duration) &&
        Objects.equals(this.borrowerType, opportunity.borrowerType) &&
        Objects.equals(this.biddingType, opportunity.biddingType) &&
        Objects.equals(this.loanType, opportunity.loanType) &&
        Objects.equals(this.loanPurpose, opportunity.loanPurpose) &&
        Objects.equals(this.loanRating, opportunity.loanRating) &&
        Objects.equals(this.loanStatus, opportunity.loanStatus) &&
        Objects.equals(this.performanceStatus, opportunity.performanceStatus) &&
        Objects.equals(this.collateral, opportunity.collateral) &&
        Objects.equals(this.collateralType, opportunity.collateralType) &&
        Objects.equals(this.insurance, opportunity.insurance) &&
        Objects.equals(this.openAmount, opportunity.openAmount) &&
        Objects.equals(this.biddingEnd, opportunity.biddingEnd) &&
        Objects.equals(this.notes, opportunity.notes) &&
        Objects.equals(this.link, opportunity.link) &&
        Objects.equals(this.borrowerPrivate, opportunity.borrowerPrivate) &&
        Objects.equals(this.borrowerCompany, opportunity.borrowerCompany) &&
        Objects.equals(this.income, opportunity.income) &&
        Objects.equals(this.expenses, opportunity.expenses) &&
        Objects.equals(this.questionnaire, opportunity.questionnaire) &&
        Objects.equals(this.financial, opportunity.financial) &&
        Objects.equals(this.technicalData, opportunity.technicalData) &&
        Objects.equals(this.bids, opportunity.bids)&&
        Objects.equals(this.additionalProperties, opportunity.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dateCreated, dateApproved, loanAmount, interestRate, paymentFrequency, duration, borrowerType, biddingType, loanType, loanPurpose, loanRating, loanStatus, performanceStatus, collateral, collateralType, insurance, openAmount, biddingEnd, notes, link, borrowerPrivate, borrowerCompany, income, expenses, questionnaire, financial, technicalData, bids, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Opportunity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateApproved: ").append(toIndentedString(dateApproved)).append("\n");
    sb.append("    loanAmount: ").append(toIndentedString(loanAmount)).append("\n");
    sb.append("    interestRate: ").append(toIndentedString(interestRate)).append("\n");
    sb.append("    paymentFrequency: ").append(toIndentedString(paymentFrequency)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    borrowerType: ").append(toIndentedString(borrowerType)).append("\n");
    sb.append("    biddingType: ").append(toIndentedString(biddingType)).append("\n");
    sb.append("    loanType: ").append(toIndentedString(loanType)).append("\n");
    sb.append("    loanPurpose: ").append(toIndentedString(loanPurpose)).append("\n");
    sb.append("    loanRating: ").append(toIndentedString(loanRating)).append("\n");
    sb.append("    loanStatus: ").append(toIndentedString(loanStatus)).append("\n");
    sb.append("    performanceStatus: ").append(toIndentedString(performanceStatus)).append("\n");
    sb.append("    collateral: ").append(toIndentedString(collateral)).append("\n");
    sb.append("    collateralType: ").append(toIndentedString(collateralType)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    openAmount: ").append(toIndentedString(openAmount)).append("\n");
    sb.append("    biddingEnd: ").append(toIndentedString(biddingEnd)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    borrowerPrivate: ").append(toIndentedString(borrowerPrivate)).append("\n");
    sb.append("    borrowerCompany: ").append(toIndentedString(borrowerCompany)).append("\n");
    sb.append("    income: ").append(toIndentedString(income)).append("\n");
    sb.append("    expenses: ").append(toIndentedString(expenses)).append("\n");
    sb.append("    questionnaire: ").append(toIndentedString(questionnaire)).append("\n");
    sb.append("    financial: ").append(toIndentedString(financial)).append("\n");
    sb.append("    technicalData: ").append(toIndentedString(technicalData)).append("\n");
    sb.append("    bids: ").append(toIndentedString(bids)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("dateCreated");
    openapiFields.add("dateApproved");
    openapiFields.add("loanAmount");
    openapiFields.add("interestRate");
    openapiFields.add("paymentFrequency");
    openapiFields.add("duration");
    openapiFields.add("borrowerType");
    openapiFields.add("biddingType");
    openapiFields.add("loanType");
    openapiFields.add("loanPurpose");
    openapiFields.add("loanRating");
    openapiFields.add("loanStatus");
    openapiFields.add("performanceStatus");
    openapiFields.add("collateral");
    openapiFields.add("collateralType");
    openapiFields.add("insurance");
    openapiFields.add("openAmount");
    openapiFields.add("biddingEnd");
    openapiFields.add("notes");
    openapiFields.add("link");
    openapiFields.add("borrowerPrivate");
    openapiFields.add("borrowerCompany");
    openapiFields.add("income");
    openapiFields.add("expenses");
    openapiFields.add("questionnaire");
    openapiFields.add("financial");
    openapiFields.add("technicalData");
    openapiFields.add("bids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Opportunity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Opportunity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Opportunity is not found in the empty JSON string", Opportunity.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("dateCreated").isJsonNull() && (jsonObj.get("dateCreated") != null && !jsonObj.get("dateCreated").isJsonNull()) && !jsonObj.get("dateCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateCreated").toString()));
      }
      if (!jsonObj.get("dateApproved").isJsonNull() && (jsonObj.get("dateApproved") != null && !jsonObj.get("dateApproved").isJsonNull()) && !jsonObj.get("dateApproved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateApproved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateApproved").toString()));
      }
      if (!jsonObj.get("paymentFrequency").isJsonNull() && (jsonObj.get("paymentFrequency") != null && !jsonObj.get("paymentFrequency").isJsonNull()) && !jsonObj.get("paymentFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentFrequency").toString()));
      }
      if (!jsonObj.get("borrowerType").isJsonNull() && (jsonObj.get("borrowerType") != null && !jsonObj.get("borrowerType").isJsonNull()) && !jsonObj.get("borrowerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `borrowerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("borrowerType").toString()));
      }
      if (!jsonObj.get("biddingType").isJsonNull() && (jsonObj.get("biddingType") != null && !jsonObj.get("biddingType").isJsonNull()) && !jsonObj.get("biddingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biddingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biddingType").toString()));
      }
      if (!jsonObj.get("loanType").isJsonNull() && (jsonObj.get("loanType") != null && !jsonObj.get("loanType").isJsonNull()) && !jsonObj.get("loanType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanType").toString()));
      }
      if (!jsonObj.get("loanPurpose").isJsonNull() && (jsonObj.get("loanPurpose") != null && !jsonObj.get("loanPurpose").isJsonNull()) && !jsonObj.get("loanPurpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanPurpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanPurpose").toString()));
      }
      if (!jsonObj.get("loanRating").isJsonNull() && (jsonObj.get("loanRating") != null && !jsonObj.get("loanRating").isJsonNull()) && !jsonObj.get("loanRating").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanRating` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanRating").toString()));
      }
      if (!jsonObj.get("loanStatus").isJsonNull() && (jsonObj.get("loanStatus") != null && !jsonObj.get("loanStatus").isJsonNull()) && !jsonObj.get("loanStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loanStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loanStatus").toString()));
      }
      if (!jsonObj.get("performanceStatus").isJsonNull() && (jsonObj.get("performanceStatus") != null && !jsonObj.get("performanceStatus").isJsonNull()) && !jsonObj.get("performanceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceStatus").toString()));
      }
      if (!jsonObj.get("collateral").isJsonNull() && (jsonObj.get("collateral") != null && !jsonObj.get("collateral").isJsonNull()) && !jsonObj.get("collateral").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collateral` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collateral").toString()));
      }
      if (!jsonObj.get("collateralType").isJsonNull() && (jsonObj.get("collateralType") != null && !jsonObj.get("collateralType").isJsonNull()) && !jsonObj.get("collateralType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collateralType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collateralType").toString()));
      }
      if (!jsonObj.get("insurance").isJsonNull() && (jsonObj.get("insurance") != null && !jsonObj.get("insurance").isJsonNull()) && !jsonObj.get("insurance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insurance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insurance").toString()));
      }
      if (!jsonObj.get("biddingEnd").isJsonNull() && (jsonObj.get("biddingEnd") != null && !jsonObj.get("biddingEnd").isJsonNull()) && !jsonObj.get("biddingEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biddingEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biddingEnd").toString()));
      }
      if (!jsonObj.get("notes").isJsonNull() && (jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (!jsonObj.get("link").isJsonNull() && (jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `borrowerPrivate`
      if (jsonObj.get("borrowerPrivate") != null && !jsonObj.get("borrowerPrivate").isJsonNull()) {
        ModelPrivate.validateJsonObject(jsonObj.getAsJsonObject("borrowerPrivate"));
      }
      // validate the optional field `borrowerCompany`
      if (jsonObj.get("borrowerCompany") != null && !jsonObj.get("borrowerCompany").isJsonNull()) {
        Company.validateJsonObject(jsonObj.getAsJsonObject("borrowerCompany"));
      }
      // validate the optional field `income`
      if (jsonObj.get("income") != null && !jsonObj.get("income").isJsonNull()) {
        Income.validateJsonObject(jsonObj.getAsJsonObject("income"));
      }
      // validate the optional field `expenses`
      if (jsonObj.get("expenses") != null && !jsonObj.get("expenses").isJsonNull()) {
        Expenses.validateJsonObject(jsonObj.getAsJsonObject("expenses"));
      }
      // validate the optional field `questionnaire`
      if (jsonObj.get("questionnaire") != null && !jsonObj.get("questionnaire").isJsonNull()) {
        Questionnaire.validateJsonObject(jsonObj.getAsJsonObject("questionnaire"));
      }
      // validate the optional field `financial`
      if (jsonObj.get("financial") != null && !jsonObj.get("financial").isJsonNull()) {
        Financial.validateJsonObject(jsonObj.getAsJsonObject("financial"));
      }
      // validate the optional field `technicalData`
      if (jsonObj.get("technicalData") != null && !jsonObj.get("technicalData").isJsonNull()) {
        TechnicalData.validateJsonObject(jsonObj.getAsJsonObject("technicalData"));
      }
      if (jsonObj.get("bids") != null && !jsonObj.get("bids").isJsonNull()) {
        JsonArray jsonArraybids = jsonObj.getAsJsonArray("bids");
        if (jsonArraybids != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bids` to be an array in the JSON string but got `%s`", jsonObj.get("bids").toString()));
          }

          // validate the optional field `bids` (array)
          for (int i = 0; i < jsonArraybids.size(); i++) {
            ActiveBid.validateJsonObject(jsonArraybids.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Opportunity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Opportunity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Opportunity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Opportunity.class));

       return (TypeAdapter<T>) new TypeAdapter<Opportunity>() {
           @Override
           public void write(JsonWriter out, Opportunity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Opportunity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Opportunity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Opportunity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Opportunity
  * @throws IOException if the JSON string is invalid with respect to Opportunity
  */
  public static Opportunity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Opportunity.class);
  }

 /**
  * Convert an instance of Opportunity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

