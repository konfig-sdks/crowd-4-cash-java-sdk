/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A loan application that is submitted by the rental on behalf of their rentee(s)
 */
@ApiModel(description = "A loan application that is submitted by the rental on behalf of their rentee(s)")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RentalLoanApplication {
  public static final String SERIALIZED_NAME_API_REQUESTER = "apiRequester";
  @SerializedName(SERIALIZED_NAME_API_REQUESTER)
  private String apiRequester;

  public static final String SERIALIZED_NAME_RENTEE_GENDER = "renteeGender";
  @SerializedName(SERIALIZED_NAME_RENTEE_GENDER)
  private String renteeGender;

  public static final String SERIALIZED_NAME_RENTEE_FIRST_NAME = "renteeFirstName";
  @SerializedName(SERIALIZED_NAME_RENTEE_FIRST_NAME)
  private String renteeFirstName;

  public static final String SERIALIZED_NAME_RENTEE_LAST_NAME = "renteeLastName";
  @SerializedName(SERIALIZED_NAME_RENTEE_LAST_NAME)
  private String renteeLastName;

  public static final String SERIALIZED_NAME_RENTEE_BIRTHDATE = "renteeBirthdate";
  @SerializedName(SERIALIZED_NAME_RENTEE_BIRTHDATE)
  private String renteeBirthdate;

  public static final String SERIALIZED_NAME_RENTEE_EMAIL = "renteeEmail";
  @SerializedName(SERIALIZED_NAME_RENTEE_EMAIL)
  private String renteeEmail;

  public static final String SERIALIZED_NAME_RENTEE_MOBILE_PHONE_NUMBER = "renteeMobilePhoneNumber";
  @SerializedName(SERIALIZED_NAME_RENTEE_MOBILE_PHONE_NUMBER)
  private String renteeMobilePhoneNumber;

  public static final String SERIALIZED_NAME_RENTEE_STREET_ADDRESS = "renteeStreetAddress";
  @SerializedName(SERIALIZED_NAME_RENTEE_STREET_ADDRESS)
  private String renteeStreetAddress;

  public static final String SERIALIZED_NAME_RENTEE_HOUSE_NUMBER = "renteeHouseNumber";
  @SerializedName(SERIALIZED_NAME_RENTEE_HOUSE_NUMBER)
  private String renteeHouseNumber;

  public static final String SERIALIZED_NAME_RENTEE_ZIP_CODE = "renteeZipCode";
  @SerializedName(SERIALIZED_NAME_RENTEE_ZIP_CODE)
  private String renteeZipCode;

  public static final String SERIALIZED_NAME_RENTEE_CITY = "renteeCity";
  @SerializedName(SERIALIZED_NAME_RENTEE_CITY)
  private String renteeCity;

  public static final String SERIALIZED_NAME_PURCHASE_ITEM = "purchaseItem";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ITEM)
  private String purchaseItem;

  public static final String SERIALIZED_NAME_ITEM_STATUS = "itemStatus";
  @SerializedName(SERIALIZED_NAME_ITEM_STATUS)
  private String itemStatus;

  public static final String SERIALIZED_NAME_ITEM_NAME = "itemName";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_ITEM_BRAND = "itemBrand";
  @SerializedName(SERIALIZED_NAME_ITEM_BRAND)
  private String itemBrand;

  public static final String SERIALIZED_NAME_ITEM_MODEL = "itemModel";
  @SerializedName(SERIALIZED_NAME_ITEM_MODEL)
  private String itemModel;

  public static final String SERIALIZED_NAME_ITEM_COLOR = "itemColor";
  @SerializedName(SERIALIZED_NAME_ITEM_COLOR)
  private String itemColor;

  public static final String SERIALIZED_NAME_ITEM_MARKET_VALUE = "itemMarketValue";
  @SerializedName(SERIALIZED_NAME_ITEM_MARKET_VALUE)
  private Double itemMarketValue;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_IDENTIFICATION_NUMBER = "identificationNumber";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_NUMBER)
  private String identificationNumber;

  public static final String SERIALIZED_NAME_RENTAL_AMOUNT = "rentalAmount";
  @SerializedName(SERIALIZED_NAME_RENTAL_AMOUNT)
  private Double rentalAmount;

  public static final String SERIALIZED_NAME_RENT_DATE = "rentDate";
  @SerializedName(SERIALIZED_NAME_RENT_DATE)
  private String rentDate;

  public static final String SERIALIZED_NAME_ID_FRONT_PHOTO = "idFrontPhoto";
  @SerializedName(SERIALIZED_NAME_ID_FRONT_PHOTO)
  private String idFrontPhoto;

  public static final String SERIALIZED_NAME_ID_FRONT_EXTENSION = "idFrontExtension";
  @SerializedName(SERIALIZED_NAME_ID_FRONT_EXTENSION)
  private String idFrontExtension;

  public static final String SERIALIZED_NAME_ID_BACK_PHOTO = "idBackPhoto";
  @SerializedName(SERIALIZED_NAME_ID_BACK_PHOTO)
  private String idBackPhoto;

  public static final String SERIALIZED_NAME_ID_BACK_EXTENSION = "idBackExtension";
  @SerializedName(SERIALIZED_NAME_ID_BACK_EXTENSION)
  private String idBackExtension;

  public static final String SERIALIZED_NAME_SELFIE_PHOTO = "selfiePhoto";
  @SerializedName(SERIALIZED_NAME_SELFIE_PHOTO)
  private String selfiePhoto;

  public static final String SERIALIZED_NAME_SELFIE_EXTENSION = "selfieExtension";
  @SerializedName(SERIALIZED_NAME_SELFIE_EXTENSION)
  private String selfieExtension;

  public static final String SERIALIZED_NAME_CONTRACT_FILE = "contractFile";
  @SerializedName(SERIALIZED_NAME_CONTRACT_FILE)
  private String contractFile;

  public static final String SERIALIZED_NAME_CONTRACT_FILE_EXTENSION = "contractFileExtension";
  @SerializedName(SERIALIZED_NAME_CONTRACT_FILE_EXTENSION)
  private String contractFileExtension;

  public RentalLoanApplication() {
  }

  public RentalLoanApplication apiRequester(String apiRequester) {
    
    
    
    
    this.apiRequester = apiRequester;
    return this;
  }

   /**
   * Name or E-mail of the user who makes the API call
   * @return apiRequester
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Otto Schneider", value = "Name or E-mail of the user who makes the API call")

  public String getApiRequester() {
    return apiRequester;
  }


  public void setApiRequester(String apiRequester) {
    
    
    
    this.apiRequester = apiRequester;
  }


  public RentalLoanApplication renteeGender(String renteeGender) {
    
    
    if (renteeGender != null && renteeGender.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeGender. Length must be greater than or equal to 1.");
    }
    
    this.renteeGender = renteeGender;
    return this;
  }

   /**
   * Rentee gender acronym. M stands for male and F for female.
   * @return renteeGender
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "F", required = true, value = "Rentee gender acronym. M stands for male and F for female.")

  public String getRenteeGender() {
    return renteeGender;
  }


  public void setRenteeGender(String renteeGender) {
    
    
    if (renteeGender != null && renteeGender.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeGender. Length must be greater than or equal to 1.");
    }
    this.renteeGender = renteeGender;
  }


  public RentalLoanApplication renteeFirstName(String renteeFirstName) {
    
    
    if (renteeFirstName != null && renteeFirstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeFirstName. Length must be greater than or equal to 1.");
    }
    
    this.renteeFirstName = renteeFirstName;
    return this;
  }

   /**
   * First name of the rentee
   * @return renteeFirstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Emma", required = true, value = "First name of the rentee")

  public String getRenteeFirstName() {
    return renteeFirstName;
  }


  public void setRenteeFirstName(String renteeFirstName) {
    
    
    if (renteeFirstName != null && renteeFirstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeFirstName. Length must be greater than or equal to 1.");
    }
    this.renteeFirstName = renteeFirstName;
  }


  public RentalLoanApplication renteeLastName(String renteeLastName) {
    
    
    if (renteeLastName != null && renteeLastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeLastName. Length must be greater than or equal to 1.");
    }
    
    this.renteeLastName = renteeLastName;
    return this;
  }

   /**
   * Last name of the rentee
   * @return renteeLastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "MÃ¼ller", required = true, value = "Last name of the rentee")

  public String getRenteeLastName() {
    return renteeLastName;
  }


  public void setRenteeLastName(String renteeLastName) {
    
    
    if (renteeLastName != null && renteeLastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeLastName. Length must be greater than or equal to 1.");
    }
    this.renteeLastName = renteeLastName;
  }


  public RentalLoanApplication renteeBirthdate(String renteeBirthdate) {
    
    
    
    
    this.renteeBirthdate = renteeBirthdate;
    return this;
  }

   /**
   * Birthdate of the rentee. Expected format: dd.MM.yyyy
   * @return renteeBirthdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23.09.1972", value = "Birthdate of the rentee. Expected format: dd.MM.yyyy")

  public String getRenteeBirthdate() {
    return renteeBirthdate;
  }


  public void setRenteeBirthdate(String renteeBirthdate) {
    
    
    
    this.renteeBirthdate = renteeBirthdate;
  }


  public RentalLoanApplication renteeEmail(String renteeEmail) {
    
    
    if (renteeEmail != null && renteeEmail.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeEmail. Length must be greater than or equal to 1.");
    }
    
    this.renteeEmail = renteeEmail;
    return this;
  }

   /**
   * E-mail address of the rentee
   * @return renteeEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "username@domainname.ch", required = true, value = "E-mail address of the rentee")

  public String getRenteeEmail() {
    return renteeEmail;
  }


  public void setRenteeEmail(String renteeEmail) {
    
    
    if (renteeEmail != null && renteeEmail.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeEmail. Length must be greater than or equal to 1.");
    }
    this.renteeEmail = renteeEmail;
  }


  public RentalLoanApplication renteeMobilePhoneNumber(String renteeMobilePhoneNumber) {
    
    
    if (renteeMobilePhoneNumber != null && renteeMobilePhoneNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeMobilePhoneNumber. Length must be greater than or equal to 1.");
    }
    
    this.renteeMobilePhoneNumber = renteeMobilePhoneNumber;
    return this;
  }

   /**
   * Rentee mobile phone number - the last 8 digits only
   * @return renteeMobilePhoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "91100201", required = true, value = "Rentee mobile phone number - the last 8 digits only")

  public String getRenteeMobilePhoneNumber() {
    return renteeMobilePhoneNumber;
  }


  public void setRenteeMobilePhoneNumber(String renteeMobilePhoneNumber) {
    
    
    if (renteeMobilePhoneNumber != null && renteeMobilePhoneNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for renteeMobilePhoneNumber. Length must be greater than or equal to 1.");
    }
    this.renteeMobilePhoneNumber = renteeMobilePhoneNumber;
  }


  public RentalLoanApplication renteeStreetAddress(String renteeStreetAddress) {
    
    
    
    
    this.renteeStreetAddress = renteeStreetAddress;
    return this;
  }

   /**
   * Street address of the rentee
   * @return renteeStreetAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TÃ¤fernstrasse", value = "Street address of the rentee")

  public String getRenteeStreetAddress() {
    return renteeStreetAddress;
  }


  public void setRenteeStreetAddress(String renteeStreetAddress) {
    
    
    
    this.renteeStreetAddress = renteeStreetAddress;
  }


  public RentalLoanApplication renteeHouseNumber(String renteeHouseNumber) {
    
    
    
    
    this.renteeHouseNumber = renteeHouseNumber;
    return this;
  }

   /**
   * House number of the rentee
   * @return renteeHouseNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4", value = "House number of the rentee")

  public String getRenteeHouseNumber() {
    return renteeHouseNumber;
  }


  public void setRenteeHouseNumber(String renteeHouseNumber) {
    
    
    
    this.renteeHouseNumber = renteeHouseNumber;
  }


  public RentalLoanApplication renteeZipCode(String renteeZipCode) {
    
    
    
    
    this.renteeZipCode = renteeZipCode;
    return this;
  }

   /**
   * Zip code of the rentee
   * @return renteeZipCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5405", value = "Zip code of the rentee")

  public String getRenteeZipCode() {
    return renteeZipCode;
  }


  public void setRenteeZipCode(String renteeZipCode) {
    
    
    
    this.renteeZipCode = renteeZipCode;
  }


  public RentalLoanApplication renteeCity(String renteeCity) {
    
    
    
    
    this.renteeCity = renteeCity;
    return this;
  }

   /**
   * City of the rentee
   * @return renteeCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DÃ¤ttwil", value = "City of the rentee")

  public String getRenteeCity() {
    return renteeCity;
  }


  public void setRenteeCity(String renteeCity) {
    
    
    
    this.renteeCity = renteeCity;
  }


  public RentalLoanApplication purchaseItem(String purchaseItem) {
    
    
    if (purchaseItem != null && purchaseItem.length() < 1) {
      throw new IllegalArgumentException("Invalid value for purchaseItem. Length must be greater than or equal to 1.");
    }
    
    this.purchaseItem = purchaseItem;
    return this;
  }

   /**
   * Description of the item you buy
   * @return purchaseItem
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Electric Scooter", required = true, value = "Description of the item you buy")

  public String getPurchaseItem() {
    return purchaseItem;
  }


  public void setPurchaseItem(String purchaseItem) {
    
    
    if (purchaseItem != null && purchaseItem.length() < 1) {
      throw new IllegalArgumentException("Invalid value for purchaseItem. Length must be greater than or equal to 1.");
    }
    this.purchaseItem = purchaseItem;
  }


  public RentalLoanApplication itemStatus(String itemStatus) {
    
    
    
    
    this.itemStatus = itemStatus;
    return this;
  }

   /**
   * Status of the item
   * @return itemStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Rented", value = "Status of the item")

  public String getItemStatus() {
    return itemStatus;
  }


  public void setItemStatus(String itemStatus) {
    
    
    
    this.itemStatus = itemStatus;
  }


  public RentalLoanApplication itemName(String itemName) {
    
    
    if (itemName != null && itemName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for itemName. Length must be greater than or equal to 1.");
    }
    
    this.itemName = itemName;
    return this;
  }

   /**
   * Name of the item
   * @return itemName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Vespino Go, 500W", required = true, value = "Name of the item")

  public String getItemName() {
    return itemName;
  }


  public void setItemName(String itemName) {
    
    
    if (itemName != null && itemName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for itemName. Length must be greater than or equal to 1.");
    }
    this.itemName = itemName;
  }


  public RentalLoanApplication itemType(String itemType) {
    
    
    
    
    this.itemType = itemType;
    return this;
  }

   /**
   * Type of the item e.g. Electric Scooter, E-Motorcycle etc.
   * @return itemType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Electric Scooter", value = "Type of the item e.g. Electric Scooter, E-Motorcycle etc.")

  public String getItemType() {
    return itemType;
  }


  public void setItemType(String itemType) {
    
    
    
    this.itemType = itemType;
  }


  public RentalLoanApplication itemBrand(String itemBrand) {
    
    
    
    
    this.itemBrand = itemBrand;
    return this;
  }

   /**
   * Brand of the item
   * @return itemBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Piaggio", value = "Brand of the item")

  public String getItemBrand() {
    return itemBrand;
  }


  public void setItemBrand(String itemBrand) {
    
    
    
    this.itemBrand = itemBrand;
  }


  public RentalLoanApplication itemModel(String itemModel) {
    
    
    
    
    this.itemModel = itemModel;
    return this;
  }

   /**
   * Model of the item
   * @return itemModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Vespino Go", value = "Model of the item")

  public String getItemModel() {
    return itemModel;
  }


  public void setItemModel(String itemModel) {
    
    
    
    this.itemModel = itemModel;
  }


  public RentalLoanApplication itemColor(String itemColor) {
    
    
    
    
    this.itemColor = itemColor;
    return this;
  }

   /**
   * Color of the item
   * @return itemColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Green", value = "Color of the item")

  public String getItemColor() {
    return itemColor;
  }


  public void setItemColor(String itemColor) {
    
    
    
    this.itemColor = itemColor;
  }


  public RentalLoanApplication itemMarketValue(Double itemMarketValue) {
    
    
    
    
    this.itemMarketValue = itemMarketValue;
    return this;
  }

   /**
   * Market value of the item that is rented.
   * @return itemMarketValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "10000", required = true, value = "Market value of the item that is rented.")

  public Double getItemMarketValue() {
    return itemMarketValue;
  }


  public void setItemMarketValue(Double itemMarketValue) {
    
    
    
    this.itemMarketValue = itemMarketValue;
  }


  public RentalLoanApplication serialNumber(String serialNumber) {
    
    
    
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Serial number (aka VIN or Chassis No.)
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "WBAVB12345KS12345", value = "Serial number (aka VIN or Chassis No.)")

  public String getSerialNumber() {
    return serialNumber;
  }


  public void setSerialNumber(String serialNumber) {
    
    
    
    this.serialNumber = serialNumber;
  }


  public RentalLoanApplication identificationNumber(String identificationNumber) {
    
    
    
    
    this.identificationNumber = identificationNumber;
    return this;
  }

   /**
   * Identification number (aka Stammnummer)
   * @return identificationNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "630.830.709", value = "Identification number (aka Stammnummer)")

  public String getIdentificationNumber() {
    return identificationNumber;
  }


  public void setIdentificationNumber(String identificationNumber) {
    
    
    
    this.identificationNumber = identificationNumber;
  }


  public RentalLoanApplication rentalAmount(Double rentalAmount) {
    
    
    
    
    this.rentalAmount = rentalAmount;
    return this;
  }

   /**
   * Rental amount per month
   * @return rentalAmount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "500", required = true, value = "Rental amount per month")

  public Double getRentalAmount() {
    return rentalAmount;
  }


  public void setRentalAmount(Double rentalAmount) {
    
    
    
    this.rentalAmount = rentalAmount;
  }


  public RentalLoanApplication rentDate(String rentDate) {
    
    
    
    
    this.rentDate = rentDate;
    return this;
  }

   /**
   * The first date of the rental period. Expected format: dd.MM.yyyy
   * @return rentDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23.01.2023", value = "The first date of the rental period. Expected format: dd.MM.yyyy")

  public String getRentDate() {
    return rentDate;
  }


  public void setRentDate(String rentDate) {
    
    
    
    this.rentDate = rentDate;
  }


  public RentalLoanApplication idFrontPhoto(String idFrontPhoto) {
    
    
    if (idFrontPhoto != null && idFrontPhoto.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idFrontPhoto. Length must be greater than or equal to 1.");
    }
    
    this.idFrontPhoto = idFrontPhoto;
    return this;
  }

   /**
   * Front Side of the Identity Document (National ID, Passport or Permit). Please notice that you must first convert it to Base64 and then send to our API.
   * @return idFrontPhoto
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/9j/4AAQSkZJRgABAQEASABIAAD/...", required = true, value = "Front Side of the Identity Document (National ID, Passport or Permit). Please notice that you must first convert it to Base64 and then send to our API.")

  public String getIdFrontPhoto() {
    return idFrontPhoto;
  }


  public void setIdFrontPhoto(String idFrontPhoto) {
    
    
    if (idFrontPhoto != null && idFrontPhoto.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idFrontPhoto. Length must be greater than or equal to 1.");
    }
    this.idFrontPhoto = idFrontPhoto;
  }


  public RentalLoanApplication idFrontExtension(String idFrontExtension) {
    
    
    if (idFrontExtension != null && idFrontExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idFrontExtension. Length must be greater than or equal to 1.");
    }
    
    this.idFrontExtension = idFrontExtension;
    return this;
  }

   /**
   * Front Side file extension.
   * @return idFrontExtension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jpg", required = true, value = "Front Side file extension.")

  public String getIdFrontExtension() {
    return idFrontExtension;
  }


  public void setIdFrontExtension(String idFrontExtension) {
    
    
    if (idFrontExtension != null && idFrontExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idFrontExtension. Length must be greater than or equal to 1.");
    }
    this.idFrontExtension = idFrontExtension;
  }


  public RentalLoanApplication idBackPhoto(String idBackPhoto) {
    
    
    if (idBackPhoto != null && idBackPhoto.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idBackPhoto. Length must be greater than or equal to 1.");
    }
    
    this.idBackPhoto = idBackPhoto;
    return this;
  }

   /**
   * Back Side of the Identity Document (National ID, Passport or Permit). Please notice that you must first convert it to Base64 and then send to our API.
   * @return idBackPhoto
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/9j/4AAQSkZJRgABAQEASABIAAD/...", required = true, value = "Back Side of the Identity Document (National ID, Passport or Permit). Please notice that you must first convert it to Base64 and then send to our API.")

  public String getIdBackPhoto() {
    return idBackPhoto;
  }


  public void setIdBackPhoto(String idBackPhoto) {
    
    
    if (idBackPhoto != null && idBackPhoto.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idBackPhoto. Length must be greater than or equal to 1.");
    }
    this.idBackPhoto = idBackPhoto;
  }


  public RentalLoanApplication idBackExtension(String idBackExtension) {
    
    
    if (idBackExtension != null && idBackExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idBackExtension. Length must be greater than or equal to 1.");
    }
    
    this.idBackExtension = idBackExtension;
    return this;
  }

   /**
   * Back Side file extension.
   * @return idBackExtension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jpg", required = true, value = "Back Side file extension.")

  public String getIdBackExtension() {
    return idBackExtension;
  }


  public void setIdBackExtension(String idBackExtension) {
    
    
    if (idBackExtension != null && idBackExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for idBackExtension. Length must be greater than or equal to 1.");
    }
    this.idBackExtension = idBackExtension;
  }


  public RentalLoanApplication selfiePhoto(String selfiePhoto) {
    
    
    if (selfiePhoto != null && selfiePhoto.length() < 1) {
      throw new IllegalArgumentException("Invalid value for selfiePhoto. Length must be greater than or equal to 1.");
    }
    
    this.selfiePhoto = selfiePhoto;
    return this;
  }

   /**
   * Selfie of the Rentee. Please notice that you must first convert it to Base64 and then send to our API.
   * @return selfiePhoto
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "/9j/4AAQSkZJRgABAQEASABIAAD/...", required = true, value = "Selfie of the Rentee. Please notice that you must first convert it to Base64 and then send to our API.")

  public String getSelfiePhoto() {
    return selfiePhoto;
  }


  public void setSelfiePhoto(String selfiePhoto) {
    
    
    if (selfiePhoto != null && selfiePhoto.length() < 1) {
      throw new IllegalArgumentException("Invalid value for selfiePhoto. Length must be greater than or equal to 1.");
    }
    this.selfiePhoto = selfiePhoto;
  }


  public RentalLoanApplication selfieExtension(String selfieExtension) {
    
    
    if (selfieExtension != null && selfieExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for selfieExtension. Length must be greater than or equal to 1.");
    }
    
    this.selfieExtension = selfieExtension;
    return this;
  }

   /**
   * Selfie file extension.
   * @return selfieExtension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "jpg", required = true, value = "Selfie file extension.")

  public String getSelfieExtension() {
    return selfieExtension;
  }


  public void setSelfieExtension(String selfieExtension) {
    
    
    if (selfieExtension != null && selfieExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for selfieExtension. Length must be greater than or equal to 1.");
    }
    this.selfieExtension = selfieExtension;
  }


  public RentalLoanApplication contractFile(String contractFile) {
    
    
    if (contractFile != null && contractFile.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contractFile. Length must be greater than or equal to 1.");
    }
    
    this.contractFile = contractFile;
    return this;
  }

   /**
   * Copy of the Contract. Please notice that you must first convert it to Base64 and then send to our API.
   * @return contractFile
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "JVBERi0xLjUKJeLjz9MKMyAwIG9...", required = true, value = "Copy of the Contract. Please notice that you must first convert it to Base64 and then send to our API.")

  public String getContractFile() {
    return contractFile;
  }


  public void setContractFile(String contractFile) {
    
    
    if (contractFile != null && contractFile.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contractFile. Length must be greater than or equal to 1.");
    }
    this.contractFile = contractFile;
  }


  public RentalLoanApplication contractFileExtension(String contractFileExtension) {
    
    
    if (contractFileExtension != null && contractFileExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contractFileExtension. Length must be greater than or equal to 1.");
    }
    
    this.contractFileExtension = contractFileExtension;
    return this;
  }

   /**
   * Contract file extension.
   * @return contractFileExtension
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "pdf", required = true, value = "Contract file extension.")

  public String getContractFileExtension() {
    return contractFileExtension;
  }


  public void setContractFileExtension(String contractFileExtension) {
    
    
    if (contractFileExtension != null && contractFileExtension.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contractFileExtension. Length must be greater than or equal to 1.");
    }
    this.contractFileExtension = contractFileExtension;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RentalLoanApplication instance itself
   */
  public RentalLoanApplication putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RentalLoanApplication rentalLoanApplication = (RentalLoanApplication) o;
    return Objects.equals(this.apiRequester, rentalLoanApplication.apiRequester) &&
        Objects.equals(this.renteeGender, rentalLoanApplication.renteeGender) &&
        Objects.equals(this.renteeFirstName, rentalLoanApplication.renteeFirstName) &&
        Objects.equals(this.renteeLastName, rentalLoanApplication.renteeLastName) &&
        Objects.equals(this.renteeBirthdate, rentalLoanApplication.renteeBirthdate) &&
        Objects.equals(this.renteeEmail, rentalLoanApplication.renteeEmail) &&
        Objects.equals(this.renteeMobilePhoneNumber, rentalLoanApplication.renteeMobilePhoneNumber) &&
        Objects.equals(this.renteeStreetAddress, rentalLoanApplication.renteeStreetAddress) &&
        Objects.equals(this.renteeHouseNumber, rentalLoanApplication.renteeHouseNumber) &&
        Objects.equals(this.renteeZipCode, rentalLoanApplication.renteeZipCode) &&
        Objects.equals(this.renteeCity, rentalLoanApplication.renteeCity) &&
        Objects.equals(this.purchaseItem, rentalLoanApplication.purchaseItem) &&
        Objects.equals(this.itemStatus, rentalLoanApplication.itemStatus) &&
        Objects.equals(this.itemName, rentalLoanApplication.itemName) &&
        Objects.equals(this.itemType, rentalLoanApplication.itemType) &&
        Objects.equals(this.itemBrand, rentalLoanApplication.itemBrand) &&
        Objects.equals(this.itemModel, rentalLoanApplication.itemModel) &&
        Objects.equals(this.itemColor, rentalLoanApplication.itemColor) &&
        Objects.equals(this.itemMarketValue, rentalLoanApplication.itemMarketValue) &&
        Objects.equals(this.serialNumber, rentalLoanApplication.serialNumber) &&
        Objects.equals(this.identificationNumber, rentalLoanApplication.identificationNumber) &&
        Objects.equals(this.rentalAmount, rentalLoanApplication.rentalAmount) &&
        Objects.equals(this.rentDate, rentalLoanApplication.rentDate) &&
        Objects.equals(this.idFrontPhoto, rentalLoanApplication.idFrontPhoto) &&
        Objects.equals(this.idFrontExtension, rentalLoanApplication.idFrontExtension) &&
        Objects.equals(this.idBackPhoto, rentalLoanApplication.idBackPhoto) &&
        Objects.equals(this.idBackExtension, rentalLoanApplication.idBackExtension) &&
        Objects.equals(this.selfiePhoto, rentalLoanApplication.selfiePhoto) &&
        Objects.equals(this.selfieExtension, rentalLoanApplication.selfieExtension) &&
        Objects.equals(this.contractFile, rentalLoanApplication.contractFile) &&
        Objects.equals(this.contractFileExtension, rentalLoanApplication.contractFileExtension)&&
        Objects.equals(this.additionalProperties, rentalLoanApplication.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiRequester, renteeGender, renteeFirstName, renteeLastName, renteeBirthdate, renteeEmail, renteeMobilePhoneNumber, renteeStreetAddress, renteeHouseNumber, renteeZipCode, renteeCity, purchaseItem, itemStatus, itemName, itemType, itemBrand, itemModel, itemColor, itemMarketValue, serialNumber, identificationNumber, rentalAmount, rentDate, idFrontPhoto, idFrontExtension, idBackPhoto, idBackExtension, selfiePhoto, selfieExtension, contractFile, contractFileExtension, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RentalLoanApplication {\n");
    sb.append("    apiRequester: ").append(toIndentedString(apiRequester)).append("\n");
    sb.append("    renteeGender: ").append(toIndentedString(renteeGender)).append("\n");
    sb.append("    renteeFirstName: ").append(toIndentedString(renteeFirstName)).append("\n");
    sb.append("    renteeLastName: ").append(toIndentedString(renteeLastName)).append("\n");
    sb.append("    renteeBirthdate: ").append(toIndentedString(renteeBirthdate)).append("\n");
    sb.append("    renteeEmail: ").append(toIndentedString(renteeEmail)).append("\n");
    sb.append("    renteeMobilePhoneNumber: ").append(toIndentedString(renteeMobilePhoneNumber)).append("\n");
    sb.append("    renteeStreetAddress: ").append(toIndentedString(renteeStreetAddress)).append("\n");
    sb.append("    renteeHouseNumber: ").append(toIndentedString(renteeHouseNumber)).append("\n");
    sb.append("    renteeZipCode: ").append(toIndentedString(renteeZipCode)).append("\n");
    sb.append("    renteeCity: ").append(toIndentedString(renteeCity)).append("\n");
    sb.append("    purchaseItem: ").append(toIndentedString(purchaseItem)).append("\n");
    sb.append("    itemStatus: ").append(toIndentedString(itemStatus)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    itemBrand: ").append(toIndentedString(itemBrand)).append("\n");
    sb.append("    itemModel: ").append(toIndentedString(itemModel)).append("\n");
    sb.append("    itemColor: ").append(toIndentedString(itemColor)).append("\n");
    sb.append("    itemMarketValue: ").append(toIndentedString(itemMarketValue)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    identificationNumber: ").append(toIndentedString(identificationNumber)).append("\n");
    sb.append("    rentalAmount: ").append(toIndentedString(rentalAmount)).append("\n");
    sb.append("    rentDate: ").append(toIndentedString(rentDate)).append("\n");
    sb.append("    idFrontPhoto: ").append(toIndentedString(idFrontPhoto)).append("\n");
    sb.append("    idFrontExtension: ").append(toIndentedString(idFrontExtension)).append("\n");
    sb.append("    idBackPhoto: ").append(toIndentedString(idBackPhoto)).append("\n");
    sb.append("    idBackExtension: ").append(toIndentedString(idBackExtension)).append("\n");
    sb.append("    selfiePhoto: ").append(toIndentedString(selfiePhoto)).append("\n");
    sb.append("    selfieExtension: ").append(toIndentedString(selfieExtension)).append("\n");
    sb.append("    contractFile: ").append(toIndentedString(contractFile)).append("\n");
    sb.append("    contractFileExtension: ").append(toIndentedString(contractFileExtension)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiRequester");
    openapiFields.add("renteeGender");
    openapiFields.add("renteeFirstName");
    openapiFields.add("renteeLastName");
    openapiFields.add("renteeBirthdate");
    openapiFields.add("renteeEmail");
    openapiFields.add("renteeMobilePhoneNumber");
    openapiFields.add("renteeStreetAddress");
    openapiFields.add("renteeHouseNumber");
    openapiFields.add("renteeZipCode");
    openapiFields.add("renteeCity");
    openapiFields.add("purchaseItem");
    openapiFields.add("itemStatus");
    openapiFields.add("itemName");
    openapiFields.add("itemType");
    openapiFields.add("itemBrand");
    openapiFields.add("itemModel");
    openapiFields.add("itemColor");
    openapiFields.add("itemMarketValue");
    openapiFields.add("serialNumber");
    openapiFields.add("identificationNumber");
    openapiFields.add("rentalAmount");
    openapiFields.add("rentDate");
    openapiFields.add("idFrontPhoto");
    openapiFields.add("idFrontExtension");
    openapiFields.add("idBackPhoto");
    openapiFields.add("idBackExtension");
    openapiFields.add("selfiePhoto");
    openapiFields.add("selfieExtension");
    openapiFields.add("contractFile");
    openapiFields.add("contractFileExtension");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("renteeGender");
    openapiRequiredFields.add("renteeFirstName");
    openapiRequiredFields.add("renteeLastName");
    openapiRequiredFields.add("renteeEmail");
    openapiRequiredFields.add("renteeMobilePhoneNumber");
    openapiRequiredFields.add("purchaseItem");
    openapiRequiredFields.add("itemName");
    openapiRequiredFields.add("itemMarketValue");
    openapiRequiredFields.add("rentalAmount");
    openapiRequiredFields.add("idFrontPhoto");
    openapiRequiredFields.add("idFrontExtension");
    openapiRequiredFields.add("idBackPhoto");
    openapiRequiredFields.add("idBackExtension");
    openapiRequiredFields.add("selfiePhoto");
    openapiRequiredFields.add("selfieExtension");
    openapiRequiredFields.add("contractFile");
    openapiRequiredFields.add("contractFileExtension");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RentalLoanApplication
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RentalLoanApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RentalLoanApplication is not found in the empty JSON string", RentalLoanApplication.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RentalLoanApplication.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("apiRequester").isJsonNull() && (jsonObj.get("apiRequester") != null && !jsonObj.get("apiRequester").isJsonNull()) && !jsonObj.get("apiRequester").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiRequester` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiRequester").toString()));
      }
      if (!jsonObj.get("renteeGender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeGender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeGender").toString()));
      }
      if (!jsonObj.get("renteeFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeFirstName").toString()));
      }
      if (!jsonObj.get("renteeLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeLastName").toString()));
      }
      if (!jsonObj.get("renteeBirthdate").isJsonNull() && (jsonObj.get("renteeBirthdate") != null && !jsonObj.get("renteeBirthdate").isJsonNull()) && !jsonObj.get("renteeBirthdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeBirthdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeBirthdate").toString()));
      }
      if (!jsonObj.get("renteeEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeEmail").toString()));
      }
      if (!jsonObj.get("renteeMobilePhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeMobilePhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeMobilePhoneNumber").toString()));
      }
      if (!jsonObj.get("renteeStreetAddress").isJsonNull() && (jsonObj.get("renteeStreetAddress") != null && !jsonObj.get("renteeStreetAddress").isJsonNull()) && !jsonObj.get("renteeStreetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeStreetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeStreetAddress").toString()));
      }
      if (!jsonObj.get("renteeHouseNumber").isJsonNull() && (jsonObj.get("renteeHouseNumber") != null && !jsonObj.get("renteeHouseNumber").isJsonNull()) && !jsonObj.get("renteeHouseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeHouseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeHouseNumber").toString()));
      }
      if (!jsonObj.get("renteeZipCode").isJsonNull() && (jsonObj.get("renteeZipCode") != null && !jsonObj.get("renteeZipCode").isJsonNull()) && !jsonObj.get("renteeZipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeZipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeZipCode").toString()));
      }
      if (!jsonObj.get("renteeCity").isJsonNull() && (jsonObj.get("renteeCity") != null && !jsonObj.get("renteeCity").isJsonNull()) && !jsonObj.get("renteeCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renteeCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renteeCity").toString()));
      }
      if (!jsonObj.get("purchaseItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseItem").toString()));
      }
      if (!jsonObj.get("itemStatus").isJsonNull() && (jsonObj.get("itemStatus") != null && !jsonObj.get("itemStatus").isJsonNull()) && !jsonObj.get("itemStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemStatus").toString()));
      }
      if (!jsonObj.get("itemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemName").toString()));
      }
      if (!jsonObj.get("itemType").isJsonNull() && (jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) && !jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      if (!jsonObj.get("itemBrand").isJsonNull() && (jsonObj.get("itemBrand") != null && !jsonObj.get("itemBrand").isJsonNull()) && !jsonObj.get("itemBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemBrand").toString()));
      }
      if (!jsonObj.get("itemModel").isJsonNull() && (jsonObj.get("itemModel") != null && !jsonObj.get("itemModel").isJsonNull()) && !jsonObj.get("itemModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemModel").toString()));
      }
      if (!jsonObj.get("itemColor").isJsonNull() && (jsonObj.get("itemColor") != null && !jsonObj.get("itemColor").isJsonNull()) && !jsonObj.get("itemColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemColor").toString()));
      }
      if (!jsonObj.get("serialNumber").isJsonNull() && (jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if (!jsonObj.get("identificationNumber").isJsonNull() && (jsonObj.get("identificationNumber") != null && !jsonObj.get("identificationNumber").isJsonNull()) && !jsonObj.get("identificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationNumber").toString()));
      }
      if (!jsonObj.get("rentDate").isJsonNull() && (jsonObj.get("rentDate") != null && !jsonObj.get("rentDate").isJsonNull()) && !jsonObj.get("rentDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rentDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rentDate").toString()));
      }
      if (!jsonObj.get("idFrontPhoto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idFrontPhoto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idFrontPhoto").toString()));
      }
      if (!jsonObj.get("idFrontExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idFrontExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idFrontExtension").toString()));
      }
      if (!jsonObj.get("idBackPhoto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idBackPhoto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idBackPhoto").toString()));
      }
      if (!jsonObj.get("idBackExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idBackExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idBackExtension").toString()));
      }
      if (!jsonObj.get("selfiePhoto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfiePhoto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfiePhoto").toString()));
      }
      if (!jsonObj.get("selfieExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfieExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfieExtension").toString()));
      }
      if (!jsonObj.get("contractFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractFile").toString()));
      }
      if (!jsonObj.get("contractFileExtension").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractFileExtension` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractFileExtension").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RentalLoanApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RentalLoanApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RentalLoanApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RentalLoanApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<RentalLoanApplication>() {
           @Override
           public void write(JsonWriter out, RentalLoanApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RentalLoanApplication read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RentalLoanApplication instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RentalLoanApplication given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RentalLoanApplication
  * @throws IOException if the JSON string is invalid with respect to RentalLoanApplication
  */
  public static RentalLoanApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RentalLoanApplication.class);
  }

 /**
  * Convert an instance of RentalLoanApplication to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

