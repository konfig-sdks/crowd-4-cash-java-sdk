/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the each payment by the borrower
 */
@ApiModel(description = "Information about the each payment by the borrower")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccountStatementEntry {
  public static final String SERIALIZED_NAME_ANNUITY_NUMBER = "annuityNumber";
  @SerializedName(SERIALIZED_NAME_ANNUITY_NUMBER)
  private Integer annuityNumber;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_MESSAGE_DATE = "messageDate";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DATE)
  private String messageDate;

  public static final String SERIALIZED_NAME_MATCHING_DATE = "matchingDate";
  @SerializedName(SERIALIZED_NAME_MATCHING_DATE)
  private String matchingDate;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public AccountStatementEntry() {
  }

  public AccountStatementEntry annuityNumber(Integer annuityNumber) {
    
    
    
    
    this.annuityNumber = annuityNumber;
    return this;
  }

   /**
   * Number of the borrower instalment
   * @return annuityNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5320", value = "Number of the borrower instalment")

  public Integer getAnnuityNumber() {
    return annuityNumber;
  }


  public void setAnnuityNumber(Integer annuityNumber) {
    
    
    
    this.annuityNumber = annuityNumber;
  }


  public AccountStatementEntry dueDate(String dueDate) {
    
    
    
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Instalment due date
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "26.02.2021", value = "Instalment due date")

  public String getDueDate() {
    return dueDate;
  }


  public void setDueDate(String dueDate) {
    
    
    
    this.dueDate = dueDate;
  }


  public AccountStatementEntry messageDate(String messageDate) {
    
    
    
    
    this.messageDate = messageDate;
    return this;
  }

   /**
   * A date when the instalment is paid by borrower
   * @return messageDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01.03.2021", value = "A date when the instalment is paid by borrower")

  public String getMessageDate() {
    return messageDate;
  }


  public void setMessageDate(String messageDate) {
    
    
    
    this.messageDate = messageDate;
  }


  public AccountStatementEntry matchingDate(String matchingDate) {
    
    
    
    
    this.matchingDate = matchingDate;
    return this;
  }

   /**
   * A date when payment is booked in C4C system
   * @return matchingDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "01.03.2021", value = "A date when payment is booked in C4C system")

  public String getMatchingDate() {
    return matchingDate;
  }


  public void setMatchingDate(String matchingDate) {
    
    
    
    this.matchingDate = matchingDate;
  }


  public AccountStatementEntry amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * An amount paid by the borrower
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "945.78", value = "An amount paid by the borrower")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccountStatementEntry instance itself
   */
  public AccountStatementEntry putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountStatementEntry accountStatementEntry = (AccountStatementEntry) o;
    return Objects.equals(this.annuityNumber, accountStatementEntry.annuityNumber) &&
        Objects.equals(this.dueDate, accountStatementEntry.dueDate) &&
        Objects.equals(this.messageDate, accountStatementEntry.messageDate) &&
        Objects.equals(this.matchingDate, accountStatementEntry.matchingDate) &&
        Objects.equals(this.amount, accountStatementEntry.amount)&&
        Objects.equals(this.additionalProperties, accountStatementEntry.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(annuityNumber, dueDate, messageDate, matchingDate, amount, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountStatementEntry {\n");
    sb.append("    annuityNumber: ").append(toIndentedString(annuityNumber)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    messageDate: ").append(toIndentedString(messageDate)).append("\n");
    sb.append("    matchingDate: ").append(toIndentedString(matchingDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annuityNumber");
    openapiFields.add("dueDate");
    openapiFields.add("messageDate");
    openapiFields.add("matchingDate");
    openapiFields.add("amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountStatementEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountStatementEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountStatementEntry is not found in the empty JSON string", AccountStatementEntry.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("dueDate").isJsonNull() && (jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) && !jsonObj.get("dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dueDate").toString()));
      }
      if (!jsonObj.get("messageDate").isJsonNull() && (jsonObj.get("messageDate") != null && !jsonObj.get("messageDate").isJsonNull()) && !jsonObj.get("messageDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageDate").toString()));
      }
      if (!jsonObj.get("matchingDate").isJsonNull() && (jsonObj.get("matchingDate") != null && !jsonObj.get("matchingDate").isJsonNull()) && !jsonObj.get("matchingDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchingDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchingDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountStatementEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountStatementEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountStatementEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountStatementEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountStatementEntry>() {
           @Override
           public void write(JsonWriter out, AccountStatementEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountStatementEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccountStatementEntry instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountStatementEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountStatementEntry
  * @throws IOException if the JSON string is invalid with respect to AccountStatementEntry
  */
  public static AccountStatementEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountStatementEntry.class);
  }

 /**
  * Convert an instance of AccountStatementEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

