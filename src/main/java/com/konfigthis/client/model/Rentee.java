/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * rental location that is the borrower itself e.g. garage/shop/store
 */
@ApiModel(description = "rental location that is the borrower itself e.g. garage/shop/store")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Rentee {
  public static final String SERIALIZED_NAME_RENTEE_ID = "renteeId";
  @SerializedName(SERIALIZED_NAME_RENTEE_ID)
  private Integer renteeId;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_BIRTHDATE = "birthdate";
  @SerializedName(SERIALIZED_NAME_BIRTHDATE)
  private String birthdate;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "mobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_HOUSE_NUMBER = "houseNumber";
  @SerializedName(SERIALIZED_NAME_HOUSE_NUMBER)
  private String houseNumber;

  public static final String SERIALIZED_NAME_ZIP_CODE = "zipCode";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE)
  private String zipCode;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public Rentee() {
  }

  public Rentee renteeId(Integer renteeId) {
    
    
    
    
    this.renteeId = renteeId;
    return this;
  }

   /**
   * Id of the rentee
   * @return renteeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2342", value = "Id of the rentee")

  public Integer getRenteeId() {
    return renteeId;
  }


  public void setRenteeId(Integer renteeId) {
    
    
    
    this.renteeId = renteeId;
  }


  public Rentee gender(String gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Rentee gender acronym. M stands for male and F for female.
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "F", value = "Rentee gender acronym. M stands for male and F for female.")

  public String getGender() {
    return gender;
  }


  public void setGender(String gender) {
    
    
    
    this.gender = gender;
  }


  public Rentee firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the rentee
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Anna", value = "First name of the rentee")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Rentee lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the rentee
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "MÃ¼ller", value = "Last name of the rentee")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Rentee birthdate(String birthdate) {
    
    
    
    
    this.birthdate = birthdate;
    return this;
  }

   /**
   * Birthdate of the rentee
   * @return birthdate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Birthdate of the rentee")

  public String getBirthdate() {
    return birthdate;
  }


  public void setBirthdate(String birthdate) {
    
    
    
    this.birthdate = birthdate;
  }


  public Rentee email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * E-mail address of the rentee
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "E-mail address of the rentee")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public Rentee mobilePhone(String mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Mobile phone number of the rentee
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Mobile phone number of the rentee")

  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public Rentee streetAddress(String streetAddress) {
    
    
    
    
    this.streetAddress = streetAddress;
    return this;
  }

   /**
   * Street address of the garage/shop/store
   * @return streetAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Street address of the garage/shop/store")

  public String getStreetAddress() {
    return streetAddress;
  }


  public void setStreetAddress(String streetAddress) {
    
    
    
    this.streetAddress = streetAddress;
  }


  public Rentee houseNumber(String houseNumber) {
    
    
    
    
    this.houseNumber = houseNumber;
    return this;
  }

   /**
   * House number of the garage/shop/store
   * @return houseNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "House number of the garage/shop/store")

  public String getHouseNumber() {
    return houseNumber;
  }


  public void setHouseNumber(String houseNumber) {
    
    
    
    this.houseNumber = houseNumber;
  }


  public Rentee zipCode(String zipCode) {
    
    
    
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * Zip code of the rentee
   * @return zipCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Zip code of the rentee")

  public String getZipCode() {
    return zipCode;
  }


  public void setZipCode(String zipCode) {
    
    
    
    this.zipCode = zipCode;
  }


  public Rentee city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City where the rentee resides
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "City where the rentee resides")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public Rentee iban(String iban) {
    
    
    
    
    this.iban = iban;
    return this;
  }

   /**
   * IBAN of the rentee
   * @return iban
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IBAN of the rentee")

  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    
    
    
    this.iban = iban;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Rentee instance itself
   */
  public Rentee putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rentee rentee = (Rentee) o;
    return Objects.equals(this.renteeId, rentee.renteeId) &&
        Objects.equals(this.gender, rentee.gender) &&
        Objects.equals(this.firstName, rentee.firstName) &&
        Objects.equals(this.lastName, rentee.lastName) &&
        Objects.equals(this.birthdate, rentee.birthdate) &&
        Objects.equals(this.email, rentee.email) &&
        Objects.equals(this.mobilePhone, rentee.mobilePhone) &&
        Objects.equals(this.streetAddress, rentee.streetAddress) &&
        Objects.equals(this.houseNumber, rentee.houseNumber) &&
        Objects.equals(this.zipCode, rentee.zipCode) &&
        Objects.equals(this.city, rentee.city) &&
        Objects.equals(this.iban, rentee.iban)&&
        Objects.equals(this.additionalProperties, rentee.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(renteeId, gender, firstName, lastName, birthdate, email, mobilePhone, streetAddress, houseNumber, zipCode, city, iban, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rentee {\n");
    sb.append("    renteeId: ").append(toIndentedString(renteeId)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    birthdate: ").append(toIndentedString(birthdate)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    houseNumber: ").append(toIndentedString(houseNumber)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("renteeId");
    openapiFields.add("gender");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("birthdate");
    openapiFields.add("email");
    openapiFields.add("mobilePhone");
    openapiFields.add("streetAddress");
    openapiFields.add("houseNumber");
    openapiFields.add("zipCode");
    openapiFields.add("city");
    openapiFields.add("iban");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Rentee
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Rentee.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rentee is not found in the empty JSON string", Rentee.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("gender").isJsonNull() && (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("firstName").isJsonNull() && (jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && (jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("birthdate").isJsonNull() && (jsonObj.get("birthdate") != null && !jsonObj.get("birthdate").isJsonNull()) && !jsonObj.get("birthdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthdate").toString()));
      }
      if (!jsonObj.get("email").isJsonNull() && (jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("mobilePhone").isJsonNull() && (jsonObj.get("mobilePhone") != null && !jsonObj.get("mobilePhone").isJsonNull()) && !jsonObj.get("mobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mobilePhone").toString()));
      }
      if (!jsonObj.get("streetAddress").isJsonNull() && (jsonObj.get("streetAddress") != null && !jsonObj.get("streetAddress").isJsonNull()) && !jsonObj.get("streetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress").toString()));
      }
      if (!jsonObj.get("houseNumber").isJsonNull() && (jsonObj.get("houseNumber") != null && !jsonObj.get("houseNumber").isJsonNull()) && !jsonObj.get("houseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `houseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("houseNumber").toString()));
      }
      if (!jsonObj.get("zipCode").isJsonNull() && (jsonObj.get("zipCode") != null && !jsonObj.get("zipCode").isJsonNull()) && !jsonObj.get("zipCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zipCode").toString()));
      }
      if (!jsonObj.get("city").isJsonNull() && (jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("iban").isJsonNull() && (jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rentee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rentee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rentee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rentee.class));

       return (TypeAdapter<T>) new TypeAdapter<Rentee>() {
           @Override
           public void write(JsonWriter out, Rentee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Rentee read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Rentee instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Rentee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Rentee
  * @throws IOException if the JSON string is invalid with respect to Rentee
  */
  public static Rentee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rentee.class);
  }

 /**
  * Convert an instance of Rentee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

