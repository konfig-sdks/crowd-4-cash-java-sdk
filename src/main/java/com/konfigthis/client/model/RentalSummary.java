/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RentalLoan;
import com.konfigthis.client.model.Rentee;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A rental company like Carify which rents user and new cars
 */
@ApiModel(description = "A rental company like Carify which rents user and new cars")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RentalSummary {
  public static final String SERIALIZED_NAME_RENTAL_NAME = "rentalName";
  @SerializedName(SERIALIZED_NAME_RENTAL_NAME)
  private String rentalName;

  public static final String SERIALIZED_NAME_NUMBER_OF_RENTEES = "numberOfRentees";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RENTEES)
  private Integer numberOfRentees;

  public static final String SERIALIZED_NAME_NUMBER_OF_LOANS = "numberOfLoans";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_LOANS)
  private Integer numberOfLoans;

  public static final String SERIALIZED_NAME_LOANS_TOTAL_AMOUNT = "loansTotalAmount";
  @SerializedName(SERIALIZED_NAME_LOANS_TOTAL_AMOUNT)
  private Double loansTotalAmount;

  public static final String SERIALIZED_NAME_RENTEES = "rentees";
  @SerializedName(SERIALIZED_NAME_RENTEES)
  private List<Rentee> rentees = null;

  public static final String SERIALIZED_NAME_LOANS = "loans";
  @SerializedName(SERIALIZED_NAME_LOANS)
  private List<RentalLoan> loans = null;

  public RentalSummary() {
  }

  public RentalSummary rentalName(String rentalName) {
    
    
    
    
    this.rentalName = rentalName;
    return this;
  }

   /**
   * Name of the rental company
   * @return rentalName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Carify AG", value = "Name of the rental company")

  public String getRentalName() {
    return rentalName;
  }


  public void setRentalName(String rentalName) {
    
    
    
    this.rentalName = rentalName;
  }


  public RentalSummary numberOfRentees(Integer numberOfRentees) {
    
    
    
    
    this.numberOfRentees = numberOfRentees;
    return this;
  }

   /**
   * Number of rentees
   * @return numberOfRentees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of rentees")

  public Integer getNumberOfRentees() {
    return numberOfRentees;
  }


  public void setNumberOfRentees(Integer numberOfRentees) {
    
    
    
    this.numberOfRentees = numberOfRentees;
  }


  public RentalSummary numberOfLoans(Integer numberOfLoans) {
    
    
    
    
    this.numberOfLoans = numberOfLoans;
    return this;
  }

   /**
   * Number of loan applications
   * @return numberOfLoans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of loan applications")

  public Integer getNumberOfLoans() {
    return numberOfLoans;
  }


  public void setNumberOfLoans(Integer numberOfLoans) {
    
    
    
    this.numberOfLoans = numberOfLoans;
  }


  public RentalSummary loansTotalAmount(Double loansTotalAmount) {
    
    
    
    
    this.loansTotalAmount = loansTotalAmount;
    return this;
  }

   /**
   * A sum of all partner loans
   * @return loansTotalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A sum of all partner loans")

  public Double getLoansTotalAmount() {
    return loansTotalAmount;
  }


  public void setLoansTotalAmount(Double loansTotalAmount) {
    
    
    
    this.loansTotalAmount = loansTotalAmount;
  }


  public RentalSummary rentees(List<Rentee> rentees) {
    
    
    
    
    this.rentees = rentees;
    return this;
  }

  public RentalSummary addRenteesItem(Rentee renteesItem) {
    if (this.rentees == null) {
      this.rentees = new ArrayList<>();
    }
    this.rentees.add(renteesItem);
    return this;
  }

   /**
   * List of your rentees
   * @return rentees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of your rentees")

  public List<Rentee> getRentees() {
    return rentees;
  }


  public void setRentees(List<Rentee> rentees) {
    
    
    
    this.rentees = rentees;
  }


  public RentalSummary loans(List<RentalLoan> loans) {
    
    
    
    
    this.loans = loans;
    return this;
  }

  public RentalSummary addLoansItem(RentalLoan loansItem) {
    if (this.loans == null) {
      this.loans = new ArrayList<>();
    }
    this.loans.add(loansItem);
    return this;
  }

   /**
   * List of your partner loan(s)
   * @return loans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of your partner loan(s)")

  public List<RentalLoan> getLoans() {
    return loans;
  }


  public void setLoans(List<RentalLoan> loans) {
    
    
    
    this.loans = loans;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RentalSummary instance itself
   */
  public RentalSummary putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RentalSummary rentalSummary = (RentalSummary) o;
    return Objects.equals(this.rentalName, rentalSummary.rentalName) &&
        Objects.equals(this.numberOfRentees, rentalSummary.numberOfRentees) &&
        Objects.equals(this.numberOfLoans, rentalSummary.numberOfLoans) &&
        Objects.equals(this.loansTotalAmount, rentalSummary.loansTotalAmount) &&
        Objects.equals(this.rentees, rentalSummary.rentees) &&
        Objects.equals(this.loans, rentalSummary.loans)&&
        Objects.equals(this.additionalProperties, rentalSummary.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rentalName, numberOfRentees, numberOfLoans, loansTotalAmount, rentees, loans, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RentalSummary {\n");
    sb.append("    rentalName: ").append(toIndentedString(rentalName)).append("\n");
    sb.append("    numberOfRentees: ").append(toIndentedString(numberOfRentees)).append("\n");
    sb.append("    numberOfLoans: ").append(toIndentedString(numberOfLoans)).append("\n");
    sb.append("    loansTotalAmount: ").append(toIndentedString(loansTotalAmount)).append("\n");
    sb.append("    rentees: ").append(toIndentedString(rentees)).append("\n");
    sb.append("    loans: ").append(toIndentedString(loans)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rentalName");
    openapiFields.add("numberOfRentees");
    openapiFields.add("numberOfLoans");
    openapiFields.add("loansTotalAmount");
    openapiFields.add("rentees");
    openapiFields.add("loans");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RentalSummary
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RentalSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RentalSummary is not found in the empty JSON string", RentalSummary.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("rentalName").isJsonNull() && (jsonObj.get("rentalName") != null && !jsonObj.get("rentalName").isJsonNull()) && !jsonObj.get("rentalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rentalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rentalName").toString()));
      }
      if (jsonObj.get("rentees") != null && !jsonObj.get("rentees").isJsonNull()) {
        JsonArray jsonArrayrentees = jsonObj.getAsJsonArray("rentees");
        if (jsonArrayrentees != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rentees").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rentees` to be an array in the JSON string but got `%s`", jsonObj.get("rentees").toString()));
          }

          // validate the optional field `rentees` (array)
          for (int i = 0; i < jsonArrayrentees.size(); i++) {
            Rentee.validateJsonObject(jsonArrayrentees.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("loans") != null && !jsonObj.get("loans").isJsonNull()) {
        JsonArray jsonArrayloans = jsonObj.getAsJsonArray("loans");
        if (jsonArrayloans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loans` to be an array in the JSON string but got `%s`", jsonObj.get("loans").toString()));
          }

          // validate the optional field `loans` (array)
          for (int i = 0; i < jsonArrayloans.size(); i++) {
            RentalLoan.validateJsonObject(jsonArrayloans.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RentalSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RentalSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RentalSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RentalSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<RentalSummary>() {
           @Override
           public void write(JsonWriter out, RentalSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RentalSummary read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RentalSummary instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RentalSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RentalSummary
  * @throws IOException if the JSON string is invalid with respect to RentalSummary
  */
  public static RentalSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RentalSummary.class);
  }

 /**
  * Convert an instance of RentalSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

