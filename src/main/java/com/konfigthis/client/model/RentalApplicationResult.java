/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RentalApplicationResult {
  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private String result;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_LOAN_ID = "loanId";
  @SerializedName(SERIALIZED_NAME_LOAN_ID)
  private Integer loanId;

  public static final String SERIALIZED_NAME_ESR = "esr";
  @SerializedName(SERIALIZED_NAME_ESR)
  private String esr;

  public static final String SERIALIZED_NAME_RENTAL_AMOUNT_WITH_INSURANCE = "rentalAmountWithInsurance";
  @SerializedName(SERIALIZED_NAME_RENTAL_AMOUNT_WITH_INSURANCE)
  private Double rentalAmountWithInsurance;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public RentalApplicationResult() {
  }

  public RentalApplicationResult result(String result) {
    
    
    
    
    this.result = result;
    return this;
  }

   /**
   * Success or Error
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Success or Error")

  public String getResult() {
    return result;
  }


  public void setResult(String result) {
    
    
    
    this.result = result;
  }


  public RentalApplicationResult message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * Message of the action
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Message of the action")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public RentalApplicationResult loanId(Integer loanId) {
    
    
    
    
    this.loanId = loanId;
    return this;
  }

   /**
   * ID of the newly created loan
   * @return loanId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the newly created loan")

  public Integer getLoanId() {
    return loanId;
  }


  public void setLoanId(Integer loanId) {
    
    
    
    this.loanId = loanId;
  }


  public RentalApplicationResult esr(String esr) {
    
    
    
    
    this.esr = esr;
    return this;
  }

   /**
   * ESR of the newly created loan
   * @return esr
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ESR of the newly created loan")

  public String getEsr() {
    return esr;
  }


  public void setEsr(String esr) {
    
    
    
    this.esr = esr;
  }


  public RentalApplicationResult rentalAmountWithInsurance(Double rentalAmountWithInsurance) {
    
    
    
    
    this.rentalAmountWithInsurance = rentalAmountWithInsurance;
    return this;
  }

   /**
   * Monthly payment on a loan with insurance premium amount added
   * @return rentalAmountWithInsurance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Monthly payment on a loan with insurance premium amount added")

  public Double getRentalAmountWithInsurance() {
    return rentalAmountWithInsurance;
  }


  public void setRentalAmountWithInsurance(Double rentalAmountWithInsurance) {
    
    
    
    this.rentalAmountWithInsurance = rentalAmountWithInsurance;
  }


  public RentalApplicationResult error(String error) {
    
    
    
    
    this.error = error;
    return this;
  }

   /**
   * If no error, it&#39;s empty
   * @return error
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If no error, it's empty")

  public String getError() {
    return error;
  }


  public void setError(String error) {
    
    
    
    this.error = error;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RentalApplicationResult instance itself
   */
  public RentalApplicationResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RentalApplicationResult rentalApplicationResult = (RentalApplicationResult) o;
    return Objects.equals(this.result, rentalApplicationResult.result) &&
        Objects.equals(this.message, rentalApplicationResult.message) &&
        Objects.equals(this.loanId, rentalApplicationResult.loanId) &&
        Objects.equals(this.esr, rentalApplicationResult.esr) &&
        Objects.equals(this.rentalAmountWithInsurance, rentalApplicationResult.rentalAmountWithInsurance) &&
        Objects.equals(this.error, rentalApplicationResult.error)&&
        Objects.equals(this.additionalProperties, rentalApplicationResult.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(result, message, loanId, esr, rentalAmountWithInsurance, error, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RentalApplicationResult {\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    loanId: ").append(toIndentedString(loanId)).append("\n");
    sb.append("    esr: ").append(toIndentedString(esr)).append("\n");
    sb.append("    rentalAmountWithInsurance: ").append(toIndentedString(rentalAmountWithInsurance)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("result");
    openapiFields.add("message");
    openapiFields.add("loanId");
    openapiFields.add("esr");
    openapiFields.add("rentalAmountWithInsurance");
    openapiFields.add("error");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RentalApplicationResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RentalApplicationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RentalApplicationResult is not found in the empty JSON string", RentalApplicationResult.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("result").isJsonNull() && (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
      if (!jsonObj.get("message").isJsonNull() && (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("esr").isJsonNull() && (jsonObj.get("esr") != null && !jsonObj.get("esr").isJsonNull()) && !jsonObj.get("esr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `esr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("esr").toString()));
      }
      if (!jsonObj.get("error").isJsonNull() && (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RentalApplicationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RentalApplicationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RentalApplicationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RentalApplicationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RentalApplicationResult>() {
           @Override
           public void write(JsonWriter out, RentalApplicationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RentalApplicationResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RentalApplicationResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RentalApplicationResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RentalApplicationResult
  * @throws IOException if the JSON string is invalid with respect to RentalApplicationResult
  */
  public static RentalApplicationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RentalApplicationResult.class);
  }

 /**
  * Convert an instance of RentalApplicationResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

