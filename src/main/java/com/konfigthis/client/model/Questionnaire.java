/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Information about the major issues, market possition, growth of the company
 */
@ApiModel(description = "Information about the major issues, market possition, growth of the company")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Questionnaire {
  public static final String SERIALIZED_NAME_KNOWN_ISSUES = "knownIssues";
  @SerializedName(SERIALIZED_NAME_KNOWN_ISSUES)
  private String knownIssues;

  public static final String SERIALIZED_NAME_KNOWN_ISSUES_DESCRIPTION = "knownIssuesDescription";
  @SerializedName(SERIALIZED_NAME_KNOWN_ISSUES_DESCRIPTION)
  private String knownIssuesDescription;

  public static final String SERIALIZED_NAME_MAJOR_ISSUES = "majorIssues";
  @SerializedName(SERIALIZED_NAME_MAJOR_ISSUES)
  private String majorIssues;

  public static final String SERIALIZED_NAME_MAJOR_ISSUES_DESCRIPTION = "majorIssuesDescription";
  @SerializedName(SERIALIZED_NAME_MAJOR_ISSUES_DESCRIPTION)
  private String majorIssuesDescription;

  public static final String SERIALIZED_NAME_FINANCIAL_RECOVERY = "financialRecovery";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_RECOVERY)
  private String financialRecovery;

  public static final String SERIALIZED_NAME_FINANCIAL_RECOVERY_DESCRIPTION = "financialRecoveryDescription";
  @SerializedName(SERIALIZED_NAME_FINANCIAL_RECOVERY_DESCRIPTION)
  private String financialRecoveryDescription;

  public static final String SERIALIZED_NAME_OPTION_TEAM = "optionTeam";
  @SerializedName(SERIALIZED_NAME_OPTION_TEAM)
  private String optionTeam;

  public static final String SERIALIZED_NAME_OPTION_AUDIT = "optionAudit";
  @SerializedName(SERIALIZED_NAME_OPTION_AUDIT)
  private String optionAudit;

  public static final String SERIALIZED_NAME_OPTION_REVENUE = "optionRevenue";
  @SerializedName(SERIALIZED_NAME_OPTION_REVENUE)
  private String optionRevenue;

  public static final String SERIALIZED_NAME_OPTION_PRICE = "optionPrice";
  @SerializedName(SERIALIZED_NAME_OPTION_PRICE)
  private String optionPrice;

  public static final String SERIALIZED_NAME_MARKET_ESTIMATION = "marketEstimation";
  @SerializedName(SERIALIZED_NAME_MARKET_ESTIMATION)
  private String marketEstimation;

  public static final String SERIALIZED_NAME_MARKET_POSITION = "marketPosition";
  @SerializedName(SERIALIZED_NAME_MARKET_POSITION)
  private String marketPosition;

  public static final String SERIALIZED_NAME_MARKET_RISK = "marketRisk";
  @SerializedName(SERIALIZED_NAME_MARKET_RISK)
  private String marketRisk;

  public static final String SERIALIZED_NAME_CURRENT_REVENUE = "currentRevenue";
  @SerializedName(SERIALIZED_NAME_CURRENT_REVENUE)
  private String currentRevenue;

  public static final String SERIALIZED_NAME_REVENUE_GROWTH = "revenueGrowth";
  @SerializedName(SERIALIZED_NAME_REVENUE_GROWTH)
  private String revenueGrowth;

  public static final String SERIALIZED_NAME_EBITDA_MARGIN = "ebitdaMargin";
  @SerializedName(SERIALIZED_NAME_EBITDA_MARGIN)
  private String ebitdaMargin;

  public Questionnaire() {
  }

  public Questionnaire knownIssues(String knownIssues) {
    
    
    
    
    this.knownIssues = knownIssues;
    return this;
  }

   /**
   * Are there any current known issues with your services or product?
   * @return knownIssues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are there any current known issues with your services or product?")

  public String getKnownIssues() {
    return knownIssues;
  }


  public void setKnownIssues(String knownIssues) {
    
    
    
    this.knownIssues = knownIssues;
  }


  public Questionnaire knownIssuesDescription(String knownIssuesDescription) {
    
    
    
    
    this.knownIssuesDescription = knownIssuesDescription;
    return this;
  }

   /**
   * Description of known issues (if yes)
   * @return knownIssuesDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of known issues (if yes)")

  public String getKnownIssuesDescription() {
    return knownIssuesDescription;
  }


  public void setKnownIssuesDescription(String knownIssuesDescription) {
    
    
    
    this.knownIssuesDescription = knownIssuesDescription;
  }


  public Questionnaire majorIssues(String majorIssues) {
    
    
    
    
    this.majorIssues = majorIssues;
    return this;
  }

   /**
   * Were there any major issues in your company connected to your services/ products (like third party liability or any bigger lawsuits)?
   * @return majorIssues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Were there any major issues in your company connected to your services/ products (like third party liability or any bigger lawsuits)?")

  public String getMajorIssues() {
    return majorIssues;
  }


  public void setMajorIssues(String majorIssues) {
    
    
    
    this.majorIssues = majorIssues;
  }


  public Questionnaire majorIssuesDescription(String majorIssuesDescription) {
    
    
    
    
    this.majorIssuesDescription = majorIssuesDescription;
    return this;
  }

   /**
   * Description of major issues (if yes)
   * @return majorIssuesDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of major issues (if yes)")

  public String getMajorIssuesDescription() {
    return majorIssuesDescription;
  }


  public void setMajorIssuesDescription(String majorIssuesDescription) {
    
    
    
    this.majorIssuesDescription = majorIssuesDescription;
  }


  public Questionnaire financialRecovery(String financialRecovery) {
    
    
    
    
    this.financialRecovery = financialRecovery;
    return this;
  }

   /**
   * Did you undergo any financial restructuring or financial recovery (or do you plan any in the foreseeable future)?
   * @return financialRecovery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Did you undergo any financial restructuring or financial recovery (or do you plan any in the foreseeable future)?")

  public String getFinancialRecovery() {
    return financialRecovery;
  }


  public void setFinancialRecovery(String financialRecovery) {
    
    
    
    this.financialRecovery = financialRecovery;
  }


  public Questionnaire financialRecoveryDescription(String financialRecoveryDescription) {
    
    
    
    
    this.financialRecoveryDescription = financialRecoveryDescription;
    return this;
  }

   /**
   * Description of financial recovery (if yes)
   * @return financialRecoveryDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of financial recovery (if yes)")

  public String getFinancialRecoveryDescription() {
    return financialRecoveryDescription;
  }


  public void setFinancialRecoveryDescription(String financialRecoveryDescription) {
    
    
    
    this.financialRecoveryDescription = financialRecoveryDescription;
  }


  public Questionnaire optionTeam(String optionTeam) {
    
    
    
    
    this.optionTeam = optionTeam;
    return this;
  }

   /**
   * How long is your current management team active in this role in the company?
   * @return optionTeam
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "More than 5 years, Between 1 and 5 years, Less than 1 year", value = "How long is your current management team active in this role in the company?")

  public String getOptionTeam() {
    return optionTeam;
  }


  public void setOptionTeam(String optionTeam) {
    
    
    
    this.optionTeam = optionTeam;
  }


  public Questionnaire optionAudit(String optionAudit) {
    
    
    
    
    this.optionAudit = optionAudit;
    return this;
  }

   /**
   * Is your company subject of an external audit?
   * @return optionAudit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "No external audit, Limited audit, Ordinary audit", value = "Is your company subject of an external audit?")

  public String getOptionAudit() {
    return optionAudit;
  }


  public void setOptionAudit(String optionAudit) {
    
    
    
    this.optionAudit = optionAudit;
  }


  public Questionnaire optionRevenue(String optionRevenue) {
    
    
    
    
    this.optionRevenue = optionRevenue;
    return this;
  }

   /**
   * How much of your revenue is related to the top 3 clients?
   * @return optionRevenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Under 25%, Between 25% and 50%, Between 50% and 75%, Above 75%", value = "How much of your revenue is related to the top 3 clients?")

  public String getOptionRevenue() {
    return optionRevenue;
  }


  public void setOptionRevenue(String optionRevenue) {
    
    
    
    this.optionRevenue = optionRevenue;
  }


  public Questionnaire optionPrice(String optionPrice) {
    
    
    
    
    this.optionPrice = optionPrice;
    return this;
  }

   /**
   * What was the price trend of your services/ products in the last few years?
   * @return optionPrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "More than 10% decrease, Decrease between 5% and 10%, Decrease between 0% and 5%, Stable, Increase between 0% and 5%, Increase between 5% and 10%, More than 10% increase", value = "What was the price trend of your services/ products in the last few years?")

  public String getOptionPrice() {
    return optionPrice;
  }


  public void setOptionPrice(String optionPrice) {
    
    
    
    this.optionPrice = optionPrice;
  }


  public Questionnaire marketEstimation(String marketEstimation) {
    
    
    
    
    this.marketEstimation = marketEstimation;
    return this;
  }

   /**
   * What is your market estimation in the next few years?
   * @return marketEstimation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The market is competitive and only well-positioned and established companies  have appropriate future prospects.", value = "What is your market estimation in the next few years?")

  public String getMarketEstimation() {
    return marketEstimation;
  }


  public void setMarketEstimation(String marketEstimation) {
    
    
    
    this.marketEstimation = marketEstimation;
  }


  public Questionnaire marketPosition(String marketPosition) {
    
    
    
    
    this.marketPosition = marketPosition;
    return this;
  }

   /**
   * What is your position in the market?
   * @return marketPosition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "We are positioned in several areas, which means that we are not dependent on one customer segment.", value = "What is your position in the market?")

  public String getMarketPosition() {
    return marketPosition;
  }


  public void setMarketPosition(String marketPosition) {
    
    
    
    this.marketPosition = marketPosition;
  }


  public Questionnaire marketRisk(String marketRisk) {
    
    
    
    
    this.marketRisk = marketRisk;
    return this;
  }

   /**
   * What are the highest risks for your company in the next three years?
   * @return marketRisk
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "The greatest risk lies in having capable and good quality staff; the labor market is currently weak. However, we can train and motivate young employees.", value = "What are the highest risks for your company in the next three years?")

  public String getMarketRisk() {
    return marketRisk;
  }


  public void setMarketRisk(String marketRisk) {
    
    
    
    this.marketRisk = marketRisk;
  }


  public Questionnaire currentRevenue(String currentRevenue) {
    
    
    
    
    this.currentRevenue = currentRevenue;
    return this;
  }

   /**
   * What are your expectations related to revenue and net profit in the current fiscal year?
   * @return currentRevenue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "High increase, Slight increase, Stable, Slight decrease, High decrease", value = "What are your expectations related to revenue and net profit in the current fiscal year?")

  public String getCurrentRevenue() {
    return currentRevenue;
  }


  public void setCurrentRevenue(String currentRevenue) {
    
    
    
    this.currentRevenue = currentRevenue;
  }


  public Questionnaire revenueGrowth(String revenueGrowth) {
    
    
    
    
    this.revenueGrowth = revenueGrowth;
    return this;
  }

   /**
   * What are your expectations related to revenue growth in the current fiscal year?
   * @return revenueGrowth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "High increase, Slight increase, Stable, Slight decrease, High decrease", value = "What are your expectations related to revenue growth in the current fiscal year?")

  public String getRevenueGrowth() {
    return revenueGrowth;
  }


  public void setRevenueGrowth(String revenueGrowth) {
    
    
    
    this.revenueGrowth = revenueGrowth;
  }


  public Questionnaire ebitdaMargin(String ebitdaMargin) {
    
    
    
    
    this.ebitdaMargin = ebitdaMargin;
    return this;
  }

   /**
   * What are your expectations related to the EBITDA margin in the next three years?
   * @return ebitdaMargin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "High increase, Slight increase, Stable, Slight decrease, High decrease", value = "What are your expectations related to the EBITDA margin in the next three years?")

  public String getEbitdaMargin() {
    return ebitdaMargin;
  }


  public void setEbitdaMargin(String ebitdaMargin) {
    
    
    
    this.ebitdaMargin = ebitdaMargin;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Questionnaire instance itself
   */
  public Questionnaire putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Questionnaire questionnaire = (Questionnaire) o;
    return Objects.equals(this.knownIssues, questionnaire.knownIssues) &&
        Objects.equals(this.knownIssuesDescription, questionnaire.knownIssuesDescription) &&
        Objects.equals(this.majorIssues, questionnaire.majorIssues) &&
        Objects.equals(this.majorIssuesDescription, questionnaire.majorIssuesDescription) &&
        Objects.equals(this.financialRecovery, questionnaire.financialRecovery) &&
        Objects.equals(this.financialRecoveryDescription, questionnaire.financialRecoveryDescription) &&
        Objects.equals(this.optionTeam, questionnaire.optionTeam) &&
        Objects.equals(this.optionAudit, questionnaire.optionAudit) &&
        Objects.equals(this.optionRevenue, questionnaire.optionRevenue) &&
        Objects.equals(this.optionPrice, questionnaire.optionPrice) &&
        Objects.equals(this.marketEstimation, questionnaire.marketEstimation) &&
        Objects.equals(this.marketPosition, questionnaire.marketPosition) &&
        Objects.equals(this.marketRisk, questionnaire.marketRisk) &&
        Objects.equals(this.currentRevenue, questionnaire.currentRevenue) &&
        Objects.equals(this.revenueGrowth, questionnaire.revenueGrowth) &&
        Objects.equals(this.ebitdaMargin, questionnaire.ebitdaMargin)&&
        Objects.equals(this.additionalProperties, questionnaire.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(knownIssues, knownIssuesDescription, majorIssues, majorIssuesDescription, financialRecovery, financialRecoveryDescription, optionTeam, optionAudit, optionRevenue, optionPrice, marketEstimation, marketPosition, marketRisk, currentRevenue, revenueGrowth, ebitdaMargin, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Questionnaire {\n");
    sb.append("    knownIssues: ").append(toIndentedString(knownIssues)).append("\n");
    sb.append("    knownIssuesDescription: ").append(toIndentedString(knownIssuesDescription)).append("\n");
    sb.append("    majorIssues: ").append(toIndentedString(majorIssues)).append("\n");
    sb.append("    majorIssuesDescription: ").append(toIndentedString(majorIssuesDescription)).append("\n");
    sb.append("    financialRecovery: ").append(toIndentedString(financialRecovery)).append("\n");
    sb.append("    financialRecoveryDescription: ").append(toIndentedString(financialRecoveryDescription)).append("\n");
    sb.append("    optionTeam: ").append(toIndentedString(optionTeam)).append("\n");
    sb.append("    optionAudit: ").append(toIndentedString(optionAudit)).append("\n");
    sb.append("    optionRevenue: ").append(toIndentedString(optionRevenue)).append("\n");
    sb.append("    optionPrice: ").append(toIndentedString(optionPrice)).append("\n");
    sb.append("    marketEstimation: ").append(toIndentedString(marketEstimation)).append("\n");
    sb.append("    marketPosition: ").append(toIndentedString(marketPosition)).append("\n");
    sb.append("    marketRisk: ").append(toIndentedString(marketRisk)).append("\n");
    sb.append("    currentRevenue: ").append(toIndentedString(currentRevenue)).append("\n");
    sb.append("    revenueGrowth: ").append(toIndentedString(revenueGrowth)).append("\n");
    sb.append("    ebitdaMargin: ").append(toIndentedString(ebitdaMargin)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("knownIssues");
    openapiFields.add("knownIssuesDescription");
    openapiFields.add("majorIssues");
    openapiFields.add("majorIssuesDescription");
    openapiFields.add("financialRecovery");
    openapiFields.add("financialRecoveryDescription");
    openapiFields.add("optionTeam");
    openapiFields.add("optionAudit");
    openapiFields.add("optionRevenue");
    openapiFields.add("optionPrice");
    openapiFields.add("marketEstimation");
    openapiFields.add("marketPosition");
    openapiFields.add("marketRisk");
    openapiFields.add("currentRevenue");
    openapiFields.add("revenueGrowth");
    openapiFields.add("ebitdaMargin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Questionnaire
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Questionnaire.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Questionnaire is not found in the empty JSON string", Questionnaire.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("knownIssues").isJsonNull() && (jsonObj.get("knownIssues") != null && !jsonObj.get("knownIssues").isJsonNull()) && !jsonObj.get("knownIssues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownIssues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knownIssues").toString()));
      }
      if (!jsonObj.get("knownIssuesDescription").isJsonNull() && (jsonObj.get("knownIssuesDescription") != null && !jsonObj.get("knownIssuesDescription").isJsonNull()) && !jsonObj.get("knownIssuesDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `knownIssuesDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("knownIssuesDescription").toString()));
      }
      if (!jsonObj.get("majorIssues").isJsonNull() && (jsonObj.get("majorIssues") != null && !jsonObj.get("majorIssues").isJsonNull()) && !jsonObj.get("majorIssues").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `majorIssues` to be a primitive type in the JSON string but got `%s`", jsonObj.get("majorIssues").toString()));
      }
      if (!jsonObj.get("majorIssuesDescription").isJsonNull() && (jsonObj.get("majorIssuesDescription") != null && !jsonObj.get("majorIssuesDescription").isJsonNull()) && !jsonObj.get("majorIssuesDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `majorIssuesDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("majorIssuesDescription").toString()));
      }
      if (!jsonObj.get("financialRecovery").isJsonNull() && (jsonObj.get("financialRecovery") != null && !jsonObj.get("financialRecovery").isJsonNull()) && !jsonObj.get("financialRecovery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financialRecovery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financialRecovery").toString()));
      }
      if (!jsonObj.get("financialRecoveryDescription").isJsonNull() && (jsonObj.get("financialRecoveryDescription") != null && !jsonObj.get("financialRecoveryDescription").isJsonNull()) && !jsonObj.get("financialRecoveryDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `financialRecoveryDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("financialRecoveryDescription").toString()));
      }
      if (!jsonObj.get("optionTeam").isJsonNull() && (jsonObj.get("optionTeam") != null && !jsonObj.get("optionTeam").isJsonNull()) && !jsonObj.get("optionTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionTeam").toString()));
      }
      if (!jsonObj.get("optionAudit").isJsonNull() && (jsonObj.get("optionAudit") != null && !jsonObj.get("optionAudit").isJsonNull()) && !jsonObj.get("optionAudit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionAudit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionAudit").toString()));
      }
      if (!jsonObj.get("optionRevenue").isJsonNull() && (jsonObj.get("optionRevenue") != null && !jsonObj.get("optionRevenue").isJsonNull()) && !jsonObj.get("optionRevenue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionRevenue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionRevenue").toString()));
      }
      if (!jsonObj.get("optionPrice").isJsonNull() && (jsonObj.get("optionPrice") != null && !jsonObj.get("optionPrice").isJsonNull()) && !jsonObj.get("optionPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `optionPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("optionPrice").toString()));
      }
      if (!jsonObj.get("marketEstimation").isJsonNull() && (jsonObj.get("marketEstimation") != null && !jsonObj.get("marketEstimation").isJsonNull()) && !jsonObj.get("marketEstimation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketEstimation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketEstimation").toString()));
      }
      if (!jsonObj.get("marketPosition").isJsonNull() && (jsonObj.get("marketPosition") != null && !jsonObj.get("marketPosition").isJsonNull()) && !jsonObj.get("marketPosition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketPosition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketPosition").toString()));
      }
      if (!jsonObj.get("marketRisk").isJsonNull() && (jsonObj.get("marketRisk") != null && !jsonObj.get("marketRisk").isJsonNull()) && !jsonObj.get("marketRisk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketRisk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketRisk").toString()));
      }
      if (!jsonObj.get("currentRevenue").isJsonNull() && (jsonObj.get("currentRevenue") != null && !jsonObj.get("currentRevenue").isJsonNull()) && !jsonObj.get("currentRevenue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentRevenue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentRevenue").toString()));
      }
      if (!jsonObj.get("revenueGrowth").isJsonNull() && (jsonObj.get("revenueGrowth") != null && !jsonObj.get("revenueGrowth").isJsonNull()) && !jsonObj.get("revenueGrowth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revenueGrowth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revenueGrowth").toString()));
      }
      if (!jsonObj.get("ebitdaMargin").isJsonNull() && (jsonObj.get("ebitdaMargin") != null && !jsonObj.get("ebitdaMargin").isJsonNull()) && !jsonObj.get("ebitdaMargin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ebitdaMargin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ebitdaMargin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Questionnaire.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Questionnaire' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Questionnaire> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Questionnaire.class));

       return (TypeAdapter<T>) new TypeAdapter<Questionnaire>() {
           @Override
           public void write(JsonWriter out, Questionnaire value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Questionnaire read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Questionnaire instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Questionnaire given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Questionnaire
  * @throws IOException if the JSON string is invalid with respect to Questionnaire
  */
  public static Questionnaire fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Questionnaire.class);
  }

 /**
  * Convert an instance of Questionnaire to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

