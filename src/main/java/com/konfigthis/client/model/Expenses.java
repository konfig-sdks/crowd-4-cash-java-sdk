/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Monthly expenses of the borrower
 */
@ApiModel(description = "Monthly expenses of the borrower")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Expenses {
  public static final String SERIALIZED_NAME_TAX_AT_SOURCE = "taxAtSource";
  @SerializedName(SERIALIZED_NAME_TAX_AT_SOURCE)
  private Double taxAtSource;

  public static final String SERIALIZED_NAME_HOUSING_CONDITION = "housingCondition";
  @SerializedName(SERIALIZED_NAME_HOUSING_CONDITION)
  private String housingCondition;

  public static final String SERIALIZED_NAME_RESIDENTAL_SITUATION = "residentalSituation";
  @SerializedName(SERIALIZED_NAME_RESIDENTAL_SITUATION)
  private String residentalSituation;

  public static final String SERIALIZED_NAME_MONTHLY_RENT = "monthlyRent";
  @SerializedName(SERIALIZED_NAME_MONTHLY_RENT)
  private Double monthlyRent;

  public static final String SERIALIZED_NAME_PAY_COST_SOLELY = "payCostSolely";
  @SerializedName(SERIALIZED_NAME_PAY_COST_SOLELY)
  private String payCostSolely;

  public static final String SERIALIZED_NAME_MONTHLY_COST_PORTION = "monthlyCostPortion";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COST_PORTION)
  private Double monthlyCostPortion;

  public static final String SERIALIZED_NAME_MONTHLY_MORTGAGE = "monthlyMortgage";
  @SerializedName(SERIALIZED_NAME_MONTHLY_MORTGAGE)
  private Double monthlyMortgage;

  public static final String SERIALIZED_NAME_MORTGAGE_AMOUNT = "mortgageAmount";
  @SerializedName(SERIALIZED_NAME_MORTGAGE_AMOUNT)
  private Double mortgageAmount;

  public static final String SERIALIZED_NAME_ANOTHER_LOAN = "anotherLoan";
  @SerializedName(SERIALIZED_NAME_ANOTHER_LOAN)
  private String anotherLoan;

  public static final String SERIALIZED_NAME_ANOTHER_LOAN_LENDER = "anotherLoanLender";
  @SerializedName(SERIALIZED_NAME_ANOTHER_LOAN_LENDER)
  private String anotherLoanLender;

  public static final String SERIALIZED_NAME_ANOTHER_LOAN_AMOUNT = "anotherLoanAmount";
  @SerializedName(SERIALIZED_NAME_ANOTHER_LOAN_AMOUNT)
  private Double anotherLoanAmount;

  public static final String SERIALIZED_NAME_ANOTHER_LOAN_INTEREST_RATE = "anotherLoanInterestRate";
  @SerializedName(SERIALIZED_NAME_ANOTHER_LOAN_INTEREST_RATE)
  private Double anotherLoanInterestRate;

  public static final String SERIALIZED_NAME_ANOTHER_LOAN_MONTHLY_PAYMENT = "anotherLoanMonthlyPayment";
  @SerializedName(SERIALIZED_NAME_ANOTHER_LOAN_MONTHLY_PAYMENT)
  private Double anotherLoanMonthlyPayment;

  public static final String SERIALIZED_NAME_INSURANCE_MONTHLY_COST = "insuranceMonthlyCost";
  @SerializedName(SERIALIZED_NAME_INSURANCE_MONTHLY_COST)
  private Double insuranceMonthlyCost;

  public static final String SERIALIZED_NAME_PRIVATE_TRANSPORT_MONTHLY_COST = "privateTransportMonthlyCost";
  @SerializedName(SERIALIZED_NAME_PRIVATE_TRANSPORT_MONTHLY_COST)
  private Double privateTransportMonthlyCost;

  public static final String SERIALIZED_NAME_PUBLIC_TRANSPORT_MONTHLY_COST = "publicTransportMonthlyCost";
  @SerializedName(SERIALIZED_NAME_PUBLIC_TRANSPORT_MONTHLY_COST)
  private Double publicTransportMonthlyCost;

  public static final String SERIALIZED_NAME_DEPENDENT_CHILDREN = "dependentChildren";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_CHILDREN)
  private String dependentChildren;

  public static final String SERIALIZED_NAME_CHILDREN_YOUNGER_THAN_TEN = "childrenYoungerThanTen";
  @SerializedName(SERIALIZED_NAME_CHILDREN_YOUNGER_THAN_TEN)
  private Integer childrenYoungerThanTen;

  public static final String SERIALIZED_NAME_CHILDREN_OLDER_THAN_TEN = "childrenOlderThanTen";
  @SerializedName(SERIALIZED_NAME_CHILDREN_OLDER_THAN_TEN)
  private Integer childrenOlderThanTen;

  public static final String SERIALIZED_NAME_ALIMONY_OR_CHILD_SUPPORT = "alimonyOrChildSupport";
  @SerializedName(SERIALIZED_NAME_ALIMONY_OR_CHILD_SUPPORT)
  private String alimonyOrChildSupport;

  public static final String SERIALIZED_NAME_ALIMONY_OR_CHILD_SUPPORT_AMOUNT = "alimonyOrChildSupportAmount";
  @SerializedName(SERIALIZED_NAME_ALIMONY_OR_CHILD_SUPPORT_AMOUNT)
  private Double alimonyOrChildSupportAmount;

  public static final String SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST = "furtherRecurringMonthlyCost";
  @SerializedName(SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST)
  private String furtherRecurringMonthlyCost;

  public static final String SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST1_AMOUNT = "furtherRecurringMonthlyCost1Amount";
  @SerializedName(SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST1_AMOUNT)
  private Double furtherRecurringMonthlyCost1Amount;

  public static final String SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST1_DESCRIPTION = "furtherRecurringMonthlyCost1Description";
  @SerializedName(SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST1_DESCRIPTION)
  private String furtherRecurringMonthlyCost1Description;

  public static final String SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST2_AMOUNT = "furtherRecurringMonthlyCost2Amount";
  @SerializedName(SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST2_AMOUNT)
  private Double furtherRecurringMonthlyCost2Amount;

  public static final String SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST2_DESCRIPTION = "furtherRecurringMonthlyCost2Description";
  @SerializedName(SERIALIZED_NAME_FURTHER_RECURRING_MONTHLY_COST2_DESCRIPTION)
  private String furtherRecurringMonthlyCost2Description;

  public Expenses() {
  }

  public Expenses taxAtSource(Double taxAtSource) {
    
    
    
    
    this.taxAtSource = taxAtSource;
    return this;
  }

   /**
   * Tax to be paid
   * @return taxAtSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2515", value = "Tax to be paid")

  public Double getTaxAtSource() {
    return taxAtSource;
  }


  public void setTaxAtSource(Double taxAtSource) {
    
    
    
    this.taxAtSource = taxAtSource;
  }


  public Expenses housingCondition(String housingCondition) {
    
    
    
    
    this.housingCondition = housingCondition;
    return this;
  }

   /**
   * 
   * @return housingCondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Single, Single sharing an apartment, Partnership without sharing an apartment, Single parent, etc.", value = "")

  public String getHousingCondition() {
    return housingCondition;
  }


  public void setHousingCondition(String housingCondition) {
    
    
    
    this.housingCondition = housingCondition;
  }


  public Expenses residentalSituation(String residentalSituation) {
    
    
    
    
    this.residentalSituation = residentalSituation;
    return this;
  }

   /**
   * Residential situation
   * @return residentalSituation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Tenant, Homeowner", value = "Residential situation")

  public String getResidentalSituation() {
    return residentalSituation;
  }


  public void setResidentalSituation(String residentalSituation) {
    
    
    
    this.residentalSituation = residentalSituation;
  }


  public Expenses monthlyRent(Double monthlyRent) {
    
    
    
    
    this.monthlyRent = monthlyRent;
    return this;
  }

   /**
   * Monthly rental cost
   * @return monthlyRent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1805", value = "Monthly rental cost")

  public Double getMonthlyRent() {
    return monthlyRent;
  }


  public void setMonthlyRent(Double monthlyRent) {
    
    
    
    this.monthlyRent = monthlyRent;
  }


  public Expenses payCostSolely(String payCostSolely) {
    
    
    
    
    this.payCostSolely = payCostSolely;
    return this;
  }

   /**
   * Are the rental costs shared?
   * @return payCostSolely
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are the rental costs shared?")

  public String getPayCostSolely() {
    return payCostSolely;
  }


  public void setPayCostSolely(String payCostSolely) {
    
    
    
    this.payCostSolely = payCostSolely;
  }


  public Expenses monthlyCostPortion(Double monthlyCostPortion) {
    
    
    
    
    this.monthlyCostPortion = monthlyCostPortion;
    return this;
  }

   /**
   * Part of the rental costs (if shared)
   * @return monthlyCostPortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "900", value = "Part of the rental costs (if shared)")

  public Double getMonthlyCostPortion() {
    return monthlyCostPortion;
  }


  public void setMonthlyCostPortion(Double monthlyCostPortion) {
    
    
    
    this.monthlyCostPortion = monthlyCostPortion;
  }


  public Expenses monthlyMortgage(Double monthlyMortgage) {
    
    
    
    
    this.monthlyMortgage = monthlyMortgage;
    return this;
  }

   /**
   * Monthly cost for homeowners
   * @return monthlyMortgage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "500", value = "Monthly cost for homeowners")

  public Double getMonthlyMortgage() {
    return monthlyMortgage;
  }


  public void setMonthlyMortgage(Double monthlyMortgage) {
    
    
    
    this.monthlyMortgage = monthlyMortgage;
  }


  public Expenses mortgageAmount(Double mortgageAmount) {
    
    
    
    
    this.mortgageAmount = mortgageAmount;
    return this;
  }

   /**
   * Amount of mortgage outstanding
   * @return mortgageAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Amount of mortgage outstanding")

  public Double getMortgageAmount() {
    return mortgageAmount;
  }


  public void setMortgageAmount(Double mortgageAmount) {
    
    
    
    this.mortgageAmount = mortgageAmount;
  }


  public Expenses anotherLoan(String anotherLoan) {
    
    
    
    
    this.anotherLoan = anotherLoan;
    return this;
  }

   /**
   * Are there any other open loans?
   * @return anotherLoan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are there any other open loans?")

  public String getAnotherLoan() {
    return anotherLoan;
  }


  public void setAnotherLoan(String anotherLoan) {
    
    
    
    this.anotherLoan = anotherLoan;
  }


  public Expenses anotherLoanLender(String anotherLoanLender) {
    
    
    
    
    this.anotherLoanLender = anotherLoanLender;
    return this;
  }

   /**
   * Name of lender of the outstanding loan
   * @return anotherLoanLender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PostFinance", value = "Name of lender of the outstanding loan")

  public String getAnotherLoanLender() {
    return anotherLoanLender;
  }


  public void setAnotherLoanLender(String anotherLoanLender) {
    
    
    
    this.anotherLoanLender = anotherLoanLender;
  }


  public Expenses anotherLoanAmount(Double anotherLoanAmount) {
    
    
    
    
    this.anotherLoanAmount = anotherLoanAmount;
    return this;
  }

   /**
   * Amount of the outstanding loan
   * @return anotherLoanAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2378.25", value = "Amount of the outstanding loan")

  public Double getAnotherLoanAmount() {
    return anotherLoanAmount;
  }


  public void setAnotherLoanAmount(Double anotherLoanAmount) {
    
    
    
    this.anotherLoanAmount = anotherLoanAmount;
  }


  public Expenses anotherLoanInterestRate(Double anotherLoanInterestRate) {
    
    
    
    
    this.anotherLoanInterestRate = anotherLoanInterestRate;
    return this;
  }

   /**
   * Interest rate of the outstanding loan
   * @return anotherLoanInterestRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7.85", value = "Interest rate of the outstanding loan")

  public Double getAnotherLoanInterestRate() {
    return anotherLoanInterestRate;
  }


  public void setAnotherLoanInterestRate(Double anotherLoanInterestRate) {
    
    
    
    this.anotherLoanInterestRate = anotherLoanInterestRate;
  }


  public Expenses anotherLoanMonthlyPayment(Double anotherLoanMonthlyPayment) {
    
    
    
    
    this.anotherLoanMonthlyPayment = anotherLoanMonthlyPayment;
    return this;
  }

   /**
   * Monthly payment of the outstanding loan
   * @return anotherLoanMonthlyPayment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "215.29", value = "Monthly payment of the outstanding loan")

  public Double getAnotherLoanMonthlyPayment() {
    return anotherLoanMonthlyPayment;
  }


  public void setAnotherLoanMonthlyPayment(Double anotherLoanMonthlyPayment) {
    
    
    
    this.anotherLoanMonthlyPayment = anotherLoanMonthlyPayment;
  }


  public Expenses insuranceMonthlyCost(Double insuranceMonthlyCost) {
    
    
    
    
    this.insuranceMonthlyCost = insuranceMonthlyCost;
    return this;
  }

   /**
   * Cost of insurances on a monthly basis
   * @return insuranceMonthlyCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "614.1", value = "Cost of insurances on a monthly basis")

  public Double getInsuranceMonthlyCost() {
    return insuranceMonthlyCost;
  }


  public void setInsuranceMonthlyCost(Double insuranceMonthlyCost) {
    
    
    
    this.insuranceMonthlyCost = insuranceMonthlyCost;
  }


  public Expenses privateTransportMonthlyCost(Double privateTransportMonthlyCost) {
    
    
    
    
    this.privateTransportMonthlyCost = privateTransportMonthlyCost;
    return this;
  }

   /**
   * Cost of private transportation on a monthly basis (cost of leasing etc.)
   * @return privateTransportMonthlyCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "518.4", value = "Cost of private transportation on a monthly basis (cost of leasing etc.)")

  public Double getPrivateTransportMonthlyCost() {
    return privateTransportMonthlyCost;
  }


  public void setPrivateTransportMonthlyCost(Double privateTransportMonthlyCost) {
    
    
    
    this.privateTransportMonthlyCost = privateTransportMonthlyCost;
  }


  public Expenses publicTransportMonthlyCost(Double publicTransportMonthlyCost) {
    
    
    
    
    this.publicTransportMonthlyCost = publicTransportMonthlyCost;
    return this;
  }

   /**
   * Cost of public transportation on a monthly basis
   * @return publicTransportMonthlyCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "300", value = "Cost of public transportation on a monthly basis")

  public Double getPublicTransportMonthlyCost() {
    return publicTransportMonthlyCost;
  }


  public void setPublicTransportMonthlyCost(Double publicTransportMonthlyCost) {
    
    
    
    this.publicTransportMonthlyCost = publicTransportMonthlyCost;
  }


  public Expenses dependentChildren(String dependentChildren) {
    
    
    
    
    this.dependentChildren = dependentChildren;
    return this;
  }

   /**
   * Are there any dependent children?
   * @return dependentChildren
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are there any dependent children?")

  public String getDependentChildren() {
    return dependentChildren;
  }


  public void setDependentChildren(String dependentChildren) {
    
    
    
    this.dependentChildren = dependentChildren;
  }


  public Expenses childrenYoungerThanTen(Integer childrenYoungerThanTen) {
    
    
    
    
    this.childrenYoungerThanTen = childrenYoungerThanTen;
    return this;
  }

   /**
   * Number of children younger than ten years?
   * @return childrenYoungerThanTen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Number of children younger than ten years?")

  public Integer getChildrenYoungerThanTen() {
    return childrenYoungerThanTen;
  }


  public void setChildrenYoungerThanTen(Integer childrenYoungerThanTen) {
    
    
    
    this.childrenYoungerThanTen = childrenYoungerThanTen;
  }


  public Expenses childrenOlderThanTen(Integer childrenOlderThanTen) {
    
    
    
    
    this.childrenOlderThanTen = childrenOlderThanTen;
    return this;
  }

   /**
   * Number of children older than ten years?
   * @return childrenOlderThanTen
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Number of children older than ten years?")

  public Integer getChildrenOlderThanTen() {
    return childrenOlderThanTen;
  }


  public void setChildrenOlderThanTen(Integer childrenOlderThanTen) {
    
    
    
    this.childrenOlderThanTen = childrenOlderThanTen;
  }


  public Expenses alimonyOrChildSupport(String alimonyOrChildSupport) {
    
    
    
    
    this.alimonyOrChildSupport = alimonyOrChildSupport;
    return this;
  }

   /**
   * Are there any alimony or external child support
   * @return alimonyOrChildSupport
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are there any alimony or external child support")

  public String getAlimonyOrChildSupport() {
    return alimonyOrChildSupport;
  }


  public void setAlimonyOrChildSupport(String alimonyOrChildSupport) {
    
    
    
    this.alimonyOrChildSupport = alimonyOrChildSupport;
  }


  public Expenses alimonyOrChildSupportAmount(Double alimonyOrChildSupportAmount) {
    
    
    
    
    this.alimonyOrChildSupportAmount = alimonyOrChildSupportAmount;
    return this;
  }

   /**
   * Amount of alimony or external child support (if yes)
   * @return alimonyOrChildSupportAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Amount of alimony or external child support (if yes)")

  public Double getAlimonyOrChildSupportAmount() {
    return alimonyOrChildSupportAmount;
  }


  public void setAlimonyOrChildSupportAmount(Double alimonyOrChildSupportAmount) {
    
    
    
    this.alimonyOrChildSupportAmount = alimonyOrChildSupportAmount;
  }


  public Expenses furtherRecurringMonthlyCost(String furtherRecurringMonthlyCost) {
    
    
    
    
    this.furtherRecurringMonthlyCost = furtherRecurringMonthlyCost;
    return this;
  }

   /**
   * Are there any other recurring monthly cost?
   * @return furtherRecurringMonthlyCost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes, No", value = "Are there any other recurring monthly cost?")

  public String getFurtherRecurringMonthlyCost() {
    return furtherRecurringMonthlyCost;
  }


  public void setFurtherRecurringMonthlyCost(String furtherRecurringMonthlyCost) {
    
    
    
    this.furtherRecurringMonthlyCost = furtherRecurringMonthlyCost;
  }


  public Expenses furtherRecurringMonthlyCost1Amount(Double furtherRecurringMonthlyCost1Amount) {
    
    
    
    
    this.furtherRecurringMonthlyCost1Amount = furtherRecurringMonthlyCost1Amount;
    return this;
  }

   /**
   * Amount of any other recurruing monthly cost (if yes)
   * @return furtherRecurringMonthlyCost1Amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "300", value = "Amount of any other recurruing monthly cost (if yes)")

  public Double getFurtherRecurringMonthlyCost1Amount() {
    return furtherRecurringMonthlyCost1Amount;
  }


  public void setFurtherRecurringMonthlyCost1Amount(Double furtherRecurringMonthlyCost1Amount) {
    
    
    
    this.furtherRecurringMonthlyCost1Amount = furtherRecurringMonthlyCost1Amount;
  }


  public Expenses furtherRecurringMonthlyCost1Description(String furtherRecurringMonthlyCost1Description) {
    
    
    
    
    this.furtherRecurringMonthlyCost1Description = furtherRecurringMonthlyCost1Description;
    return this;
  }

   /**
   * Description of any other recurruing monthly cost (if yes)
   * @return furtherRecurringMonthlyCost1Description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Business meal expenses", value = "Description of any other recurruing monthly cost (if yes)")

  public String getFurtherRecurringMonthlyCost1Description() {
    return furtherRecurringMonthlyCost1Description;
  }


  public void setFurtherRecurringMonthlyCost1Description(String furtherRecurringMonthlyCost1Description) {
    
    
    
    this.furtherRecurringMonthlyCost1Description = furtherRecurringMonthlyCost1Description;
  }


  public Expenses furtherRecurringMonthlyCost2Amount(Double furtherRecurringMonthlyCost2Amount) {
    
    
    
    
    this.furtherRecurringMonthlyCost2Amount = furtherRecurringMonthlyCost2Amount;
    return this;
  }

   /**
   * Amount of any other recurruing monthly cost (if yes)
   * @return furtherRecurringMonthlyCost2Amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "500", value = "Amount of any other recurruing monthly cost (if yes)")

  public Double getFurtherRecurringMonthlyCost2Amount() {
    return furtherRecurringMonthlyCost2Amount;
  }


  public void setFurtherRecurringMonthlyCost2Amount(Double furtherRecurringMonthlyCost2Amount) {
    
    
    
    this.furtherRecurringMonthlyCost2Amount = furtherRecurringMonthlyCost2Amount;
  }


  public Expenses furtherRecurringMonthlyCost2Description(String furtherRecurringMonthlyCost2Description) {
    
    
    
    
    this.furtherRecurringMonthlyCost2Description = furtherRecurringMonthlyCost2Description;
    return this;
  }

   /**
   * Description of any other recurruing monthly cost (if yes)
   * @return furtherRecurringMonthlyCost2Description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cleaning expenses", value = "Description of any other recurruing monthly cost (if yes)")

  public String getFurtherRecurringMonthlyCost2Description() {
    return furtherRecurringMonthlyCost2Description;
  }


  public void setFurtherRecurringMonthlyCost2Description(String furtherRecurringMonthlyCost2Description) {
    
    
    
    this.furtherRecurringMonthlyCost2Description = furtherRecurringMonthlyCost2Description;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Expenses instance itself
   */
  public Expenses putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Expenses expenses = (Expenses) o;
    return Objects.equals(this.taxAtSource, expenses.taxAtSource) &&
        Objects.equals(this.housingCondition, expenses.housingCondition) &&
        Objects.equals(this.residentalSituation, expenses.residentalSituation) &&
        Objects.equals(this.monthlyRent, expenses.monthlyRent) &&
        Objects.equals(this.payCostSolely, expenses.payCostSolely) &&
        Objects.equals(this.monthlyCostPortion, expenses.monthlyCostPortion) &&
        Objects.equals(this.monthlyMortgage, expenses.monthlyMortgage) &&
        Objects.equals(this.mortgageAmount, expenses.mortgageAmount) &&
        Objects.equals(this.anotherLoan, expenses.anotherLoan) &&
        Objects.equals(this.anotherLoanLender, expenses.anotherLoanLender) &&
        Objects.equals(this.anotherLoanAmount, expenses.anotherLoanAmount) &&
        Objects.equals(this.anotherLoanInterestRate, expenses.anotherLoanInterestRate) &&
        Objects.equals(this.anotherLoanMonthlyPayment, expenses.anotherLoanMonthlyPayment) &&
        Objects.equals(this.insuranceMonthlyCost, expenses.insuranceMonthlyCost) &&
        Objects.equals(this.privateTransportMonthlyCost, expenses.privateTransportMonthlyCost) &&
        Objects.equals(this.publicTransportMonthlyCost, expenses.publicTransportMonthlyCost) &&
        Objects.equals(this.dependentChildren, expenses.dependentChildren) &&
        Objects.equals(this.childrenYoungerThanTen, expenses.childrenYoungerThanTen) &&
        Objects.equals(this.childrenOlderThanTen, expenses.childrenOlderThanTen) &&
        Objects.equals(this.alimonyOrChildSupport, expenses.alimonyOrChildSupport) &&
        Objects.equals(this.alimonyOrChildSupportAmount, expenses.alimonyOrChildSupportAmount) &&
        Objects.equals(this.furtherRecurringMonthlyCost, expenses.furtherRecurringMonthlyCost) &&
        Objects.equals(this.furtherRecurringMonthlyCost1Amount, expenses.furtherRecurringMonthlyCost1Amount) &&
        Objects.equals(this.furtherRecurringMonthlyCost1Description, expenses.furtherRecurringMonthlyCost1Description) &&
        Objects.equals(this.furtherRecurringMonthlyCost2Amount, expenses.furtherRecurringMonthlyCost2Amount) &&
        Objects.equals(this.furtherRecurringMonthlyCost2Description, expenses.furtherRecurringMonthlyCost2Description)&&
        Objects.equals(this.additionalProperties, expenses.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(taxAtSource, housingCondition, residentalSituation, monthlyRent, payCostSolely, monthlyCostPortion, monthlyMortgage, mortgageAmount, anotherLoan, anotherLoanLender, anotherLoanAmount, anotherLoanInterestRate, anotherLoanMonthlyPayment, insuranceMonthlyCost, privateTransportMonthlyCost, publicTransportMonthlyCost, dependentChildren, childrenYoungerThanTen, childrenOlderThanTen, alimonyOrChildSupport, alimonyOrChildSupportAmount, furtherRecurringMonthlyCost, furtherRecurringMonthlyCost1Amount, furtherRecurringMonthlyCost1Description, furtherRecurringMonthlyCost2Amount, furtherRecurringMonthlyCost2Description, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Expenses {\n");
    sb.append("    taxAtSource: ").append(toIndentedString(taxAtSource)).append("\n");
    sb.append("    housingCondition: ").append(toIndentedString(housingCondition)).append("\n");
    sb.append("    residentalSituation: ").append(toIndentedString(residentalSituation)).append("\n");
    sb.append("    monthlyRent: ").append(toIndentedString(monthlyRent)).append("\n");
    sb.append("    payCostSolely: ").append(toIndentedString(payCostSolely)).append("\n");
    sb.append("    monthlyCostPortion: ").append(toIndentedString(monthlyCostPortion)).append("\n");
    sb.append("    monthlyMortgage: ").append(toIndentedString(monthlyMortgage)).append("\n");
    sb.append("    mortgageAmount: ").append(toIndentedString(mortgageAmount)).append("\n");
    sb.append("    anotherLoan: ").append(toIndentedString(anotherLoan)).append("\n");
    sb.append("    anotherLoanLender: ").append(toIndentedString(anotherLoanLender)).append("\n");
    sb.append("    anotherLoanAmount: ").append(toIndentedString(anotherLoanAmount)).append("\n");
    sb.append("    anotherLoanInterestRate: ").append(toIndentedString(anotherLoanInterestRate)).append("\n");
    sb.append("    anotherLoanMonthlyPayment: ").append(toIndentedString(anotherLoanMonthlyPayment)).append("\n");
    sb.append("    insuranceMonthlyCost: ").append(toIndentedString(insuranceMonthlyCost)).append("\n");
    sb.append("    privateTransportMonthlyCost: ").append(toIndentedString(privateTransportMonthlyCost)).append("\n");
    sb.append("    publicTransportMonthlyCost: ").append(toIndentedString(publicTransportMonthlyCost)).append("\n");
    sb.append("    dependentChildren: ").append(toIndentedString(dependentChildren)).append("\n");
    sb.append("    childrenYoungerThanTen: ").append(toIndentedString(childrenYoungerThanTen)).append("\n");
    sb.append("    childrenOlderThanTen: ").append(toIndentedString(childrenOlderThanTen)).append("\n");
    sb.append("    alimonyOrChildSupport: ").append(toIndentedString(alimonyOrChildSupport)).append("\n");
    sb.append("    alimonyOrChildSupportAmount: ").append(toIndentedString(alimonyOrChildSupportAmount)).append("\n");
    sb.append("    furtherRecurringMonthlyCost: ").append(toIndentedString(furtherRecurringMonthlyCost)).append("\n");
    sb.append("    furtherRecurringMonthlyCost1Amount: ").append(toIndentedString(furtherRecurringMonthlyCost1Amount)).append("\n");
    sb.append("    furtherRecurringMonthlyCost1Description: ").append(toIndentedString(furtherRecurringMonthlyCost1Description)).append("\n");
    sb.append("    furtherRecurringMonthlyCost2Amount: ").append(toIndentedString(furtherRecurringMonthlyCost2Amount)).append("\n");
    sb.append("    furtherRecurringMonthlyCost2Description: ").append(toIndentedString(furtherRecurringMonthlyCost2Description)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("taxAtSource");
    openapiFields.add("housingCondition");
    openapiFields.add("residentalSituation");
    openapiFields.add("monthlyRent");
    openapiFields.add("payCostSolely");
    openapiFields.add("monthlyCostPortion");
    openapiFields.add("monthlyMortgage");
    openapiFields.add("mortgageAmount");
    openapiFields.add("anotherLoan");
    openapiFields.add("anotherLoanLender");
    openapiFields.add("anotherLoanAmount");
    openapiFields.add("anotherLoanInterestRate");
    openapiFields.add("anotherLoanMonthlyPayment");
    openapiFields.add("insuranceMonthlyCost");
    openapiFields.add("privateTransportMonthlyCost");
    openapiFields.add("publicTransportMonthlyCost");
    openapiFields.add("dependentChildren");
    openapiFields.add("childrenYoungerThanTen");
    openapiFields.add("childrenOlderThanTen");
    openapiFields.add("alimonyOrChildSupport");
    openapiFields.add("alimonyOrChildSupportAmount");
    openapiFields.add("furtherRecurringMonthlyCost");
    openapiFields.add("furtherRecurringMonthlyCost1Amount");
    openapiFields.add("furtherRecurringMonthlyCost1Description");
    openapiFields.add("furtherRecurringMonthlyCost2Amount");
    openapiFields.add("furtherRecurringMonthlyCost2Description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Expenses
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Expenses.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Expenses is not found in the empty JSON string", Expenses.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("housingCondition").isJsonNull() && (jsonObj.get("housingCondition") != null && !jsonObj.get("housingCondition").isJsonNull()) && !jsonObj.get("housingCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `housingCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("housingCondition").toString()));
      }
      if (!jsonObj.get("residentalSituation").isJsonNull() && (jsonObj.get("residentalSituation") != null && !jsonObj.get("residentalSituation").isJsonNull()) && !jsonObj.get("residentalSituation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `residentalSituation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("residentalSituation").toString()));
      }
      if (!jsonObj.get("payCostSolely").isJsonNull() && (jsonObj.get("payCostSolely") != null && !jsonObj.get("payCostSolely").isJsonNull()) && !jsonObj.get("payCostSolely").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payCostSolely` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payCostSolely").toString()));
      }
      if (!jsonObj.get("anotherLoan").isJsonNull() && (jsonObj.get("anotherLoan") != null && !jsonObj.get("anotherLoan").isJsonNull()) && !jsonObj.get("anotherLoan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anotherLoan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anotherLoan").toString()));
      }
      if (!jsonObj.get("anotherLoanLender").isJsonNull() && (jsonObj.get("anotherLoanLender") != null && !jsonObj.get("anotherLoanLender").isJsonNull()) && !jsonObj.get("anotherLoanLender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anotherLoanLender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anotherLoanLender").toString()));
      }
      if (!jsonObj.get("dependentChildren").isJsonNull() && (jsonObj.get("dependentChildren") != null && !jsonObj.get("dependentChildren").isJsonNull()) && !jsonObj.get("dependentChildren").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dependentChildren` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dependentChildren").toString()));
      }
      if (!jsonObj.get("alimonyOrChildSupport").isJsonNull() && (jsonObj.get("alimonyOrChildSupport") != null && !jsonObj.get("alimonyOrChildSupport").isJsonNull()) && !jsonObj.get("alimonyOrChildSupport").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alimonyOrChildSupport` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alimonyOrChildSupport").toString()));
      }
      if (!jsonObj.get("furtherRecurringMonthlyCost").isJsonNull() && (jsonObj.get("furtherRecurringMonthlyCost") != null && !jsonObj.get("furtherRecurringMonthlyCost").isJsonNull()) && !jsonObj.get("furtherRecurringMonthlyCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `furtherRecurringMonthlyCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("furtherRecurringMonthlyCost").toString()));
      }
      if (!jsonObj.get("furtherRecurringMonthlyCost1Description").isJsonNull() && (jsonObj.get("furtherRecurringMonthlyCost1Description") != null && !jsonObj.get("furtherRecurringMonthlyCost1Description").isJsonNull()) && !jsonObj.get("furtherRecurringMonthlyCost1Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `furtherRecurringMonthlyCost1Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("furtherRecurringMonthlyCost1Description").toString()));
      }
      if (!jsonObj.get("furtherRecurringMonthlyCost2Description").isJsonNull() && (jsonObj.get("furtherRecurringMonthlyCost2Description") != null && !jsonObj.get("furtherRecurringMonthlyCost2Description").isJsonNull()) && !jsonObj.get("furtherRecurringMonthlyCost2Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `furtherRecurringMonthlyCost2Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("furtherRecurringMonthlyCost2Description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Expenses.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Expenses' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Expenses> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Expenses.class));

       return (TypeAdapter<T>) new TypeAdapter<Expenses>() {
           @Override
           public void write(JsonWriter out, Expenses value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Expenses read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Expenses instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Expenses given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Expenses
  * @throws IOException if the JSON string is invalid with respect to Expenses
  */
  public static Expenses fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Expenses.class);
  }

 /**
  * Convert an instance of Expenses to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

