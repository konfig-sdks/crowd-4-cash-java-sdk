/*
 * C4C REST API
 * Access to the Crowd4Cash Crowdlending Platform through an API
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: info@crowd4cash.ch
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A loan application that is submitted by the intermediary company on behalf of their partner(s)
 */
@ApiModel(description = "A loan application that is submitted by the intermediary company on behalf of their partner(s)")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class IntermediaryLoanApplication {
  public static final String SERIALIZED_NAME_PARTNER_ID = "partnerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_ID)
  private Integer partnerId;

  public static final String SERIALIZED_NAME_PURCHASE_ITEM = "purchaseItem";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ITEM)
  private String purchaseItem;

  public static final String SERIALIZED_NAME_ITEM_STATUS = "itemStatus";
  @SerializedName(SERIALIZED_NAME_ITEM_STATUS)
  private String itemStatus;

  public static final String SERIALIZED_NAME_ITEM_NAME = "itemName";
  @SerializedName(SERIALIZED_NAME_ITEM_NAME)
  private String itemName;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "itemType";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_ITEM_BRAND = "itemBrand";
  @SerializedName(SERIALIZED_NAME_ITEM_BRAND)
  private String itemBrand;

  public static final String SERIALIZED_NAME_ITEM_MODEL = "itemModel";
  @SerializedName(SERIALIZED_NAME_ITEM_MODEL)
  private String itemModel;

  public static final String SERIALIZED_NAME_ITEM_COLOR = "itemColor";
  @SerializedName(SERIALIZED_NAME_ITEM_COLOR)
  private String itemColor;

  public static final String SERIALIZED_NAME_ITEM_MARKET_VALUE = "itemMarketValue";
  @SerializedName(SERIALIZED_NAME_ITEM_MARKET_VALUE)
  private Double itemMarketValue;

  public static final String SERIALIZED_NAME_MANUFACTURE_DATE = "manufactureDate";
  @SerializedName(SERIALIZED_NAME_MANUFACTURE_DATE)
  private String manufactureDate;

  public static final String SERIALIZED_NAME_FIRST_REGISTRATION = "firstRegistration";
  @SerializedName(SERIALIZED_NAME_FIRST_REGISTRATION)
  private String firstRegistration;

  public static final String SERIALIZED_NAME_MILEAGE = "mileage";
  @SerializedName(SERIALIZED_NAME_MILEAGE)
  private String mileage;

  public static final String SERIALIZED_NAME_ITEM_CERTIFICATE = "itemCertificate";
  @SerializedName(SERIALIZED_NAME_ITEM_CERTIFICATE)
  private String itemCertificate;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_IDENTIFICATION_NUMBER = "identificationNumber";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_NUMBER)
  private String identificationNumber;

  public static final String SERIALIZED_NAME_RENTAL_AMOUNT = "rentalAmount";
  @SerializedName(SERIALIZED_NAME_RENTAL_AMOUNT)
  private Double rentalAmount;

  public static final String SERIALIZED_NAME_HANDOVER_DATE = "handoverDate";
  @SerializedName(SERIALIZED_NAME_HANDOVER_DATE)
  private String handoverDate;

  public IntermediaryLoanApplication() {
  }

  public IntermediaryLoanApplication partnerId(Integer partnerId) {
    
    
    
    
    this.partnerId = partnerId;
    return this;
  }

   /**
   * ID of the partner that is buying an item. This ID can be taken from the Report endpoint and Intermediary route.
   * @return partnerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12225", value = "ID of the partner that is buying an item. This ID can be taken from the Report endpoint and Intermediary route.")

  public Integer getPartnerId() {
    return partnerId;
  }


  public void setPartnerId(Integer partnerId) {
    
    
    
    this.partnerId = partnerId;
  }


  public IntermediaryLoanApplication purchaseItem(String purchaseItem) {
    
    
    
    
    this.purchaseItem = purchaseItem;
    return this;
  }

   /**
   * Description of the item you buy e.g. Car
   * @return purchaseItem
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Car", value = "Description of the item you buy e.g. Car")

  public String getPurchaseItem() {
    return purchaseItem;
  }


  public void setPurchaseItem(String purchaseItem) {
    
    
    
    this.purchaseItem = purchaseItem;
  }


  public IntermediaryLoanApplication itemStatus(String itemStatus) {
    
    
    
    
    this.itemStatus = itemStatus;
    return this;
  }

   /**
   * Status of the item
   * @return itemStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Rented", value = "Status of the item")

  public String getItemStatus() {
    return itemStatus;
  }


  public void setItemStatus(String itemStatus) {
    
    
    
    this.itemStatus = itemStatus;
  }


  public IntermediaryLoanApplication itemName(String itemName) {
    
    
    
    
    this.itemName = itemName;
    return this;
  }

   /**
   * Name of the item
   * @return itemName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BMW 318D e90", value = "Name of the item")

  public String getItemName() {
    return itemName;
  }


  public void setItemName(String itemName) {
    
    
    
    this.itemName = itemName;
  }


  public IntermediaryLoanApplication itemType(String itemType) {
    
    
    
    
    this.itemType = itemType;
    return this;
  }

   /**
   * Type of the item e.g. SUV, Van, Saloon, Cabriolet etc.
   * @return itemType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Saloon", value = "Type of the item e.g. SUV, Van, Saloon, Cabriolet etc.")

  public String getItemType() {
    return itemType;
  }


  public void setItemType(String itemType) {
    
    
    
    this.itemType = itemType;
  }


  public IntermediaryLoanApplication itemBrand(String itemBrand) {
    
    
    
    
    this.itemBrand = itemBrand;
    return this;
  }

   /**
   * Brand of the item
   * @return itemBrand
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BMW", value = "Brand of the item")

  public String getItemBrand() {
    return itemBrand;
  }


  public void setItemBrand(String itemBrand) {
    
    
    
    this.itemBrand = itemBrand;
  }


  public IntermediaryLoanApplication itemModel(String itemModel) {
    
    
    
    
    this.itemModel = itemModel;
    return this;
  }

   /**
   * Model of the item
   * @return itemModel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "318D", value = "Model of the item")

  public String getItemModel() {
    return itemModel;
  }


  public void setItemModel(String itemModel) {
    
    
    
    this.itemModel = itemModel;
  }


  public IntermediaryLoanApplication itemColor(String itemColor) {
    
    
    
    
    this.itemColor = itemColor;
    return this;
  }

   /**
   * Color of the item
   * @return itemColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Black", value = "Color of the item")

  public String getItemColor() {
    return itemColor;
  }


  public void setItemColor(String itemColor) {
    
    
    
    this.itemColor = itemColor;
  }


  public IntermediaryLoanApplication itemMarketValue(Double itemMarketValue) {
    
    
    
    
    this.itemMarketValue = itemMarketValue;
    return this;
  }

   /**
   * Market value of the item you want to buy. Please notice that the Loan Amount will be 80% of this value.
   * @return itemMarketValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10000", value = "Market value of the item you want to buy. Please notice that the Loan Amount will be 80% of this value.")

  public Double getItemMarketValue() {
    return itemMarketValue;
  }


  public void setItemMarketValue(Double itemMarketValue) {
    
    
    
    this.itemMarketValue = itemMarketValue;
  }


  public IntermediaryLoanApplication manufactureDate(String manufactureDate) {
    
    
    
    
    this.manufactureDate = manufactureDate;
    return this;
  }

   /**
   * Date when the car was manufactured
   * @return manufactureDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "13.05.2020", value = "Date when the car was manufactured")

  public String getManufactureDate() {
    return manufactureDate;
  }


  public void setManufactureDate(String manufactureDate) {
    
    
    
    this.manufactureDate = manufactureDate;
  }


  public IntermediaryLoanApplication firstRegistration(String firstRegistration) {
    
    
    
    
    this.firstRegistration = firstRegistration;
    return this;
  }

   /**
   * Date when the item was registered very first time
   * @return firstRegistration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15.01.2021", value = "Date when the item was registered very first time")

  public String getFirstRegistration() {
    return firstRegistration;
  }


  public void setFirstRegistration(String firstRegistration) {
    
    
    
    this.firstRegistration = firstRegistration;
  }


  public IntermediaryLoanApplication mileage(String mileage) {
    
    
    
    
    this.mileage = mileage;
    return this;
  }

   /**
   * Mileage of the item
   * @return mileage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "24000 km", value = "Mileage of the item")

  public String getMileage() {
    return mileage;
  }


  public void setMileage(String mileage) {
    
    
    
    this.mileage = mileage;
  }


  public IntermediaryLoanApplication itemCertificate(String itemCertificate) {
    
    
    
    
    this.itemCertificate = itemCertificate;
    return this;
  }

   /**
   * Certificate of the item
   * @return itemCertificate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1AA123", value = "Certificate of the item")

  public String getItemCertificate() {
    return itemCertificate;
  }


  public void setItemCertificate(String itemCertificate) {
    
    
    
    this.itemCertificate = itemCertificate;
  }


  public IntermediaryLoanApplication serialNumber(String serialNumber) {
    
    
    if (serialNumber != null && serialNumber.length() < 17) {
      throw new IllegalArgumentException("Invalid value for serialNumber. Length must be greater than or equal to 17.");
    }
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Serial number (aka VIN or Chassis No.)
   * @return serialNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "WBAVB12345KS12345", required = true, value = "Serial number (aka VIN or Chassis No.)")

  public String getSerialNumber() {
    return serialNumber;
  }


  public void setSerialNumber(String serialNumber) {
    
    
    if (serialNumber != null && serialNumber.length() < 17) {
      throw new IllegalArgumentException("Invalid value for serialNumber. Length must be greater than or equal to 17.");
    }
    this.serialNumber = serialNumber;
  }


  public IntermediaryLoanApplication identificationNumber(String identificationNumber) {
    
    
    if (identificationNumber != null && identificationNumber.length() < 9) {
      throw new IllegalArgumentException("Invalid value for identificationNumber. Length must be greater than or equal to 9.");
    }
    
    this.identificationNumber = identificationNumber;
    return this;
  }

   /**
   * Identification number (aka Stammnummer)
   * @return identificationNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "630.830.709", required = true, value = "Identification number (aka Stammnummer)")

  public String getIdentificationNumber() {
    return identificationNumber;
  }


  public void setIdentificationNumber(String identificationNumber) {
    
    
    if (identificationNumber != null && identificationNumber.length() < 9) {
      throw new IllegalArgumentException("Invalid value for identificationNumber. Length must be greater than or equal to 9.");
    }
    this.identificationNumber = identificationNumber;
  }


  public IntermediaryLoanApplication rentalAmount(Double rentalAmount) {
    
    
    
    
    this.rentalAmount = rentalAmount;
    return this;
  }

   /**
   * Rental amount per month
   * @return rentalAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "420", value = "Rental amount per month")

  public Double getRentalAmount() {
    return rentalAmount;
  }


  public void setRentalAmount(Double rentalAmount) {
    
    
    
    this.rentalAmount = rentalAmount;
  }


  public IntermediaryLoanApplication handoverDate(String handoverDate) {
    
    
    
    
    this.handoverDate = handoverDate;
    return this;
  }

   /**
   * The expected/approximate handover date (date when the car is expected to be handed over to the subscriber). Expected format: dd.MM.yyyy
   * @return handoverDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "23.01.2023", value = "The expected/approximate handover date (date when the car is expected to be handed over to the subscriber). Expected format: dd.MM.yyyy")

  public String getHandoverDate() {
    return handoverDate;
  }


  public void setHandoverDate(String handoverDate) {
    
    
    
    this.handoverDate = handoverDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the IntermediaryLoanApplication instance itself
   */
  public IntermediaryLoanApplication putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntermediaryLoanApplication intermediaryLoanApplication = (IntermediaryLoanApplication) o;
    return Objects.equals(this.partnerId, intermediaryLoanApplication.partnerId) &&
        Objects.equals(this.purchaseItem, intermediaryLoanApplication.purchaseItem) &&
        Objects.equals(this.itemStatus, intermediaryLoanApplication.itemStatus) &&
        Objects.equals(this.itemName, intermediaryLoanApplication.itemName) &&
        Objects.equals(this.itemType, intermediaryLoanApplication.itemType) &&
        Objects.equals(this.itemBrand, intermediaryLoanApplication.itemBrand) &&
        Objects.equals(this.itemModel, intermediaryLoanApplication.itemModel) &&
        Objects.equals(this.itemColor, intermediaryLoanApplication.itemColor) &&
        Objects.equals(this.itemMarketValue, intermediaryLoanApplication.itemMarketValue) &&
        Objects.equals(this.manufactureDate, intermediaryLoanApplication.manufactureDate) &&
        Objects.equals(this.firstRegistration, intermediaryLoanApplication.firstRegistration) &&
        Objects.equals(this.mileage, intermediaryLoanApplication.mileage) &&
        Objects.equals(this.itemCertificate, intermediaryLoanApplication.itemCertificate) &&
        Objects.equals(this.serialNumber, intermediaryLoanApplication.serialNumber) &&
        Objects.equals(this.identificationNumber, intermediaryLoanApplication.identificationNumber) &&
        Objects.equals(this.rentalAmount, intermediaryLoanApplication.rentalAmount) &&
        Objects.equals(this.handoverDate, intermediaryLoanApplication.handoverDate)&&
        Objects.equals(this.additionalProperties, intermediaryLoanApplication.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(partnerId, purchaseItem, itemStatus, itemName, itemType, itemBrand, itemModel, itemColor, itemMarketValue, manufactureDate, firstRegistration, mileage, itemCertificate, serialNumber, identificationNumber, rentalAmount, handoverDate, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntermediaryLoanApplication {\n");
    sb.append("    partnerId: ").append(toIndentedString(partnerId)).append("\n");
    sb.append("    purchaseItem: ").append(toIndentedString(purchaseItem)).append("\n");
    sb.append("    itemStatus: ").append(toIndentedString(itemStatus)).append("\n");
    sb.append("    itemName: ").append(toIndentedString(itemName)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    itemBrand: ").append(toIndentedString(itemBrand)).append("\n");
    sb.append("    itemModel: ").append(toIndentedString(itemModel)).append("\n");
    sb.append("    itemColor: ").append(toIndentedString(itemColor)).append("\n");
    sb.append("    itemMarketValue: ").append(toIndentedString(itemMarketValue)).append("\n");
    sb.append("    manufactureDate: ").append(toIndentedString(manufactureDate)).append("\n");
    sb.append("    firstRegistration: ").append(toIndentedString(firstRegistration)).append("\n");
    sb.append("    mileage: ").append(toIndentedString(mileage)).append("\n");
    sb.append("    itemCertificate: ").append(toIndentedString(itemCertificate)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    identificationNumber: ").append(toIndentedString(identificationNumber)).append("\n");
    sb.append("    rentalAmount: ").append(toIndentedString(rentalAmount)).append("\n");
    sb.append("    handoverDate: ").append(toIndentedString(handoverDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("partnerId");
    openapiFields.add("purchaseItem");
    openapiFields.add("itemStatus");
    openapiFields.add("itemName");
    openapiFields.add("itemType");
    openapiFields.add("itemBrand");
    openapiFields.add("itemModel");
    openapiFields.add("itemColor");
    openapiFields.add("itemMarketValue");
    openapiFields.add("manufactureDate");
    openapiFields.add("firstRegistration");
    openapiFields.add("mileage");
    openapiFields.add("itemCertificate");
    openapiFields.add("serialNumber");
    openapiFields.add("identificationNumber");
    openapiFields.add("rentalAmount");
    openapiFields.add("handoverDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serialNumber");
    openapiRequiredFields.add("identificationNumber");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to IntermediaryLoanApplication
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!IntermediaryLoanApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntermediaryLoanApplication is not found in the empty JSON string", IntermediaryLoanApplication.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntermediaryLoanApplication.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("purchaseItem").isJsonNull() && (jsonObj.get("purchaseItem") != null && !jsonObj.get("purchaseItem").isJsonNull()) && !jsonObj.get("purchaseItem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseItem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseItem").toString()));
      }
      if (!jsonObj.get("itemStatus").isJsonNull() && (jsonObj.get("itemStatus") != null && !jsonObj.get("itemStatus").isJsonNull()) && !jsonObj.get("itemStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemStatus").toString()));
      }
      if (!jsonObj.get("itemName").isJsonNull() && (jsonObj.get("itemName") != null && !jsonObj.get("itemName").isJsonNull()) && !jsonObj.get("itemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemName").toString()));
      }
      if (!jsonObj.get("itemType").isJsonNull() && (jsonObj.get("itemType") != null && !jsonObj.get("itemType").isJsonNull()) && !jsonObj.get("itemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemType").toString()));
      }
      if (!jsonObj.get("itemBrand").isJsonNull() && (jsonObj.get("itemBrand") != null && !jsonObj.get("itemBrand").isJsonNull()) && !jsonObj.get("itemBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemBrand").toString()));
      }
      if (!jsonObj.get("itemModel").isJsonNull() && (jsonObj.get("itemModel") != null && !jsonObj.get("itemModel").isJsonNull()) && !jsonObj.get("itemModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemModel").toString()));
      }
      if (!jsonObj.get("itemColor").isJsonNull() && (jsonObj.get("itemColor") != null && !jsonObj.get("itemColor").isJsonNull()) && !jsonObj.get("itemColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemColor").toString()));
      }
      if (!jsonObj.get("manufactureDate").isJsonNull() && (jsonObj.get("manufactureDate") != null && !jsonObj.get("manufactureDate").isJsonNull()) && !jsonObj.get("manufactureDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufactureDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufactureDate").toString()));
      }
      if (!jsonObj.get("firstRegistration").isJsonNull() && (jsonObj.get("firstRegistration") != null && !jsonObj.get("firstRegistration").isJsonNull()) && !jsonObj.get("firstRegistration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstRegistration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstRegistration").toString()));
      }
      if (!jsonObj.get("mileage").isJsonNull() && (jsonObj.get("mileage") != null && !jsonObj.get("mileage").isJsonNull()) && !jsonObj.get("mileage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mileage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mileage").toString()));
      }
      if (!jsonObj.get("itemCertificate").isJsonNull() && (jsonObj.get("itemCertificate") != null && !jsonObj.get("itemCertificate").isJsonNull()) && !jsonObj.get("itemCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemCertificate").toString()));
      }
      if (!jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if (!jsonObj.get("identificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identificationNumber").toString()));
      }
      if (!jsonObj.get("handoverDate").isJsonNull() && (jsonObj.get("handoverDate") != null && !jsonObj.get("handoverDate").isJsonNull()) && !jsonObj.get("handoverDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handoverDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handoverDate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntermediaryLoanApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntermediaryLoanApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntermediaryLoanApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntermediaryLoanApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<IntermediaryLoanApplication>() {
           @Override
           public void write(JsonWriter out, IntermediaryLoanApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public IntermediaryLoanApplication read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             IntermediaryLoanApplication instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of IntermediaryLoanApplication given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of IntermediaryLoanApplication
  * @throws IOException if the JSON string is invalid with respect to IntermediaryLoanApplication
  */
  public static IntermediaryLoanApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntermediaryLoanApplication.class);
  }

 /**
  * Convert an instance of IntermediaryLoanApplication to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

